<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="group">
    <name>CharsetConv</name>
    <title>Character Set Conversion</title>
    <filename>group__CharsetConv.html</filename>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabf5fac564c47a7a9ad6037044c3909f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_charset</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga88965337df48a173a6b013e8243e4631</anchor>
      <arglist>(std::string &amp;charset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga58f7e4556c436a96c64b186bbc8f7f4c</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga40b5aa172fabd1f3dbf50a962d0d351f</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert_with_fallback</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaf1b091e4397a7637e884148484b1f71e</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;to_codeset, const std::string &amp;from_codeset, const Glib::ustring &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>locale_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga4517b17f2aad4cd5c0e0640de212d928</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>locale_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gacc062729285890a7e9b22bece6fb987c</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga6cf95dc00505401594260a360d70c17b</anchor>
      <arglist>(const std::string &amp;opsys_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_utf8</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga2bd94064ad97b43324a7854b62f0835b</anchor>
      <arglist>(const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gada23cd7f7dc8eb25e99b867a55551763</anchor>
      <arglist>(const Glib::ustring &amp;uri, Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>filename_from_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gab1cb94f4a4a70bad06b715fb14a252d9</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gae1b2f056bde3fbab578c602fe42e3de9</anchor>
      <arglist>(const std::string &amp;filename, const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_to_uri</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gaaf69aec83665229cc06596cf627d9d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_basename</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>ga05dd67157ad35da4401263247b6f4d81</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>filename_display_name</name>
      <anchorfile>group__CharsetConv.html</anchorfile>
      <anchor>gabc1b404cc965f3da6beecddfe2623afc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FileUtils</name>
    <title>File Utilities</title>
    <filename>group__FileUtils.html</filename>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <member kind="function">
      <type>bool</type>
      <name>file_test</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga0b2fce78896a9a84f7ea3a5646cc7d36</anchor>
      <arglist>(const std::string &amp;filename, FileTest test)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>mkstemp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae4c8d716bd109b6b8e1420a8c20b3507</anchor>
      <arglist>(std::string &amp;filename_template)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>gae91f239f1cf0123399374deed54fbf3a</anchor>
      <arglist>(std::string &amp;name_used, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>file_open_tmp</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga682379de4ea119540b4bdc1759e93e1d</anchor>
      <arglist>(std::string &amp;name_used)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>file_get_contents</name>
      <anchorfile>group__FileUtils.html</anchorfile>
      <anchor>ga835da54212fe78e833ac55b49150b989</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Markup</name>
    <title>Simple XML Subset Parser</title>
    <filename>group__Markup.html</filename>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
    <member kind="typedef">
      <type>Glib::MarkupError</type>
      <name>Error</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga7d0403c76601e7d3ba4641737e094e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>escape_text</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>gac95c5843d8dada8449f90f2fd635feb1</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ShellUtils</name>
    <title>Shell-related Utilities</title>
    <filename>group__ShellUtils.html</filename>
    <class kind="class">Glib::ShellError</class>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>shell_parse_argv</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>gabc52fcb14cfc7a5ba37ca821cc837818</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_quote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga55ebfb935f2131b2ae40d339568f568c</anchor>
      <arglist>(const std::string &amp;unquoted_string)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>shell_unquote</name>
      <anchorfile>group__ShellUtils.html</anchorfile>
      <anchor>ga449dc37c6ea7e7563740df86e31c263c</anchor>
      <arglist>(const std::string &amp;quoted_string)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Spawn</name>
    <title>Spawning Processes</title>
    <filename>group__Spawn.html</filename>
    <class kind="class">Glib::SpawnError</class>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga0a530eed9f6343ea1d51cb8ec8051ce7</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async_with_pipes</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga36b7c1d110d10f86f3ef5d6e10db206f</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0, int *standard_input=0, int *standard_output=0, int *standard_error=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga5d42ba801678215f3820382388df32b0</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga0c4e1708989b50fb34266504cc038ee6</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), Pid *child_pid=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gad4fbf31fdb5536b104f4f75bf58c60e1</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, const Glib::ArrayHandle&lt; std::string &gt; &amp;envp, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gacc157258907be90b58184baeebc9c740</anchor>
      <arglist>(const std::string &amp;working_directory, const Glib::ArrayHandle&lt; std::string &gt; &amp;argv, SpawnFlags flags=SpawnFlags(0), const sigc::slot&lt; void &gt; &amp;child_setup=sigc::slot&lt; void &gt;(), std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_async</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga648167a4af607f87763f1334fe5a472f</anchor>
      <arglist>(const std::string &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_command_line_sync</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>ga713bdb79396eda85ad186cb2db89564f</anchor>
      <arglist>(const std::string &amp;command_line, std::string *standard_output=0, std::string *standard_error=0, int *exit_status=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>spawn_close_pid</name>
      <anchorfile>group__Spawn.html</anchorfile>
      <anchor>gaaea8f41c7a08af3b2919ce64fd0c27e5</anchor>
      <arglist>(Pid pid)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Threads</name>
    <title>Threads</title>
    <filename>group__Threads.html</filename>
    <class kind="class">Glib::Threads::ThreadError</class>
    <class kind="class">Glib::Threads::Thread</class>
    <class kind="class">Glib::Threads::Thread::Exit</class>
    <class kind="class">Glib::Threads::Mutex</class>
    <class kind="class">Glib::Threads::Mutex::Lock</class>
    <class kind="class">Glib::Threads::RecMutex</class>
    <class kind="class">Glib::Threads::RWLock</class>
    <class kind="class">Glib::Threads::RWLock::ReaderLock</class>
    <class kind="class">Glib::Threads::RWLock::WriterLock</class>
    <class kind="class">Glib::Threads::Cond</class>
    <class kind="class">Glib::Threads::Private</class>
    <class kind="class">Glib::Dispatcher</class>
    <member kind="enumeration">
      <type></type>
      <name>NotLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga298a91d4f9bcfd13d3f9c342bcc8161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga298a91d4f9bcfd13d3f9c342bcc8161aa67a1c7fd98ae71afc32ad7c22bfb0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga298a91d4f9bcfd13d3f9c342bcc8161aa67a1c7fd98ae71afc32ad7c22bfb0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TryLock</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga58eba5840db7a5440b7c37bf17a5bb74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga58eba5840db7a5440b7c37bf17a5bb74aca992b53c9825f414b1b5b308228beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRY_LOCK</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gga58eba5840db7a5440b7c37bf17a5bb74aca992b53c9825f414b1b5b308228beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Mutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>ga474cb9d17afdc606a6afd0068ac061d3</anchor>
      <arglist>(GMutex *gobject)</arglist>
    </member>
    <member kind="function">
      <type>RecMutex *</type>
      <name>wrap</name>
      <anchorfile>group__Threads.html</anchorfile>
      <anchor>gad710cc5f6feaccfe6fe2c886b6cd1636</anchor>
      <arglist>(GRecMutex *gobject)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Unicode</name>
    <title>Unicode Manipulation</title>
    <filename>group__Unicode.html</filename>
    <namespace>Glib::Unicode</namespace>
    <namespace>Glib::Ascii</namespace>
  </compound>
  <compound kind="group">
    <name>UriUtils</name>
    <title>URI Utilities</title>
    <filename>group__UriUtils.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>uri_unescape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0c070cac984dc463fd60ccbdb4237e25</anchor>
      <arglist>(const std::string &amp;escaped_string, const std::string &amp;illegal_characters=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_parse_scheme</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>ga0cc4270d6796b2166964f08a5cb746b3</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>uri_escape_string</name>
      <anchorfile>group__UriUtils.html</anchorfile>
      <anchor>gad902095ab5049111caa9207770b0a437</anchor>
      <arglist>(const std::string &amp;unescaped, const std::string &amp;reserved_chars_allowed=std::string(), bool allow_utf8=true)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Variant</name>
    <title>Variant Data Types</title>
    <filename>group__Variant.html</filename>
    <class kind="class">Glib::VariantBase</class>
    <class kind="class">Glib::VariantStringBase</class>
    <class kind="class">Glib::VariantContainerBase</class>
    <class kind="class">Glib::Variant</class>
    <class kind="class">Glib::Variant&lt; VariantBase &gt;</class>
    <class kind="class">Glib::Variant&lt; Variant&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Variant&lt; std::string &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</class>
    <class kind="class">Glib::VariantType</class>
    <class kind="class">Glib::Variant&lt; bool &gt;</class>
    <class kind="class">Glib::Variant&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Variant&lt; gint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; double &gt;</class>
  </compound>
  <compound kind="group">
    <name>ContHandles</name>
    <title>Generic container converters</title>
    <filename>group__ContHandles.html</filename>
    <subgroup>ContHelpers</subgroup>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::SListHandle</class>
    <member kind="typedef">
      <type>ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>StringArrayHandle</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga8e243b697be740f5f7d4b578ae50db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OwnershipType</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga64c27560b41710ccf64a3679a3ba3f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_NONE</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a7d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_SHALLOW</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OWNERSHIP_DEEP</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a2a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OWNERSHIP_NONE</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a7d594cffcc2d2d6c4313ddb4d6613c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OWNERSHIP_SHALLOW</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a448c598cdc37e2de8a162e1020001715</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OWNERSHIP_DEEP</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>gga64c27560b41710ccf64a3679a3ba3f20a2a6d6bfadc36f9eda31af79d32928c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Sequence&lt; Iterator &gt;</type>
      <name>sequence</name>
      <anchorfile>group__ContHandles.html</anchorfile>
      <anchor>ga76f58aa143a15c1ba422846c3176fbdc</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ContHelpers</name>
    <title>Helper classes</title>
    <filename>group__ContHelpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
  </compound>
  <compound kind="group">
    <name>MainLoop</name>
    <title>The Main Event Loop</title>
    <filename>group__MainLoop.html</filename>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaadb206fcc112f086f9d47c016b1f2175</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga76792522d9680a05e232d3519a25f98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>gaf391654b755a32169d18be4835677376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga11ee7db80cc44ece02056a38bb049e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga043c5714afbad2745b27301dd58470a4</anchor>
      <arglist>(GMainContext *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>wrap</name>
      <anchorfile>group__MainLoop.html</anchorfile>
      <anchor>ga22ea72cda4ef327ca03fb72d6a3bea89</anchor>
      <arglist>(GMainLoop *gobject, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>MiscUtils</name>
    <title>Miscellaneous Utility Functions</title>
    <filename>group__MiscUtils.html</filename>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9c2f67828083d74925b23c59ab868698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_application_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga40e45835b7b461cba0f7a10fbb63c0d3</anchor>
      <arglist>(const Glib::ustring &amp;application_name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga391655dededb496010eee2e92d0f1fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prgname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7d5c429822c09048892c4dee9c8e08c1</anchor>
      <arglist>(const std::string &amp;prgname)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga5e186fdb08835342a5866b11fe787ebb</anchor>
      <arglist>(const std::string &amp;variable, bool &amp;found)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8e2c8f250aa7f059956737851ace08f6</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga862657f21e5a930541d048a920204f59</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;value, bool overwrite=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6fb89001630714ec9ee5244cab56343e</anchor>
      <arglist>(const std::string &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; std::string &gt;</type>
      <name>listenv</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga350a5f6f1ae631f748c89d8dbe7557df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga52964bfd712e8c9e688f668da51f3ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_real_name</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga30692e3263e66868878f535e0b7c9722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_home_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga9412ea70c7fea058c03211dac318f8e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_tmp_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gac42272146fd9320958132f1591d28991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_current_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga06d93c95572d6a382b8cc4e09dd5a339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_special_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gabc928a4e477df53f90e221a854cc73cb</anchor>
      <arglist>(GUserDirectory directory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_data_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga821b704b5ede1583e4057990976d394b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_config_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae517b931f4753abcd48adb2769a8fc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_data_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga3a957e23dc92b928045135d4a5c6aec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_system_config_dirs</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga7ac473ccb6ff59400b62b9396d1b72bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_user_cache_dir</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa68121f26e82df1c293c82b89c8998e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>path_is_absolute</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gad82525f39f7408f97f2c096c4f721b3b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_skip_root</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga306eee64abc3d28993895b826f4dd533</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_basename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga20ebf2917a7fce5d1901568017b95a35</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>path_get_dirname</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gae03457226c4239a74b83486739521434</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4a70bf050b3f318f87049ed30206a9a</anchor>
      <arglist>(const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gada06023cc39be3a44eb68e38d6cbea6c</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaf2be471b98cb5d47c9a30c084f87d9a7</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gab342ab4856f3de7a5bc69a36773d7fb3</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga95d2bc18e3b0974f909243aca9970476</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga8b726f15e39f873bb0174d26d8a636a6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaea9f342e6f620944625d48194622cdc6</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga4349eeddfaee3e22194bc511d1e92873</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_filename</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gafb17c98037af155ff8c46499bfbc5d2d</anchor>
      <arglist>(const std::string &amp;elem1, const std::string &amp;elem2, const std::string &amp;elem3, const std::string &amp;elem4, const std::string &amp;elem5, const std::string &amp;elem6, const std::string &amp;elem7, const std::string &amp;elem8, const std::string &amp;elem9)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>build_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>ga6afc89d45cc34f3cfce4a55f3f5e7afa</anchor>
      <arglist>(const std::string &amp;separator, const Glib::ArrayHandle&lt; std::string &gt; &amp;elements)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>find_program_in_path</name>
      <anchorfile>group__MiscUtils.html</anchorfile>
      <anchor>gaa4c4ecb9a3eb803ae6d9dee51e1e5b14</anchor>
      <arglist>(const std::string &amp;program)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>PatternMatching</name>
    <title>Glob-style Pattern Matching</title>
    <filename>group__PatternMatching.html</filename>
    <class kind="class">Glib::PatternSpec</class>
  </compound>
  <compound kind="group">
    <name>Random</name>
    <title>Random Numbers</title>
    <filename>group__Random.html</filename>
    <class kind="class">Glib::Rand</class>
  </compound>
  <compound kind="group">
    <name>StringUtils</name>
    <title>String Utility Functions</title>
    <filename>group__StringUtils.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>str_has_prefix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6b7e8354049756e92a97554a107618ac</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>str_has_suffix</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga5c4e380ffc6617ac61ca92e203e45630</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gaa44aba9faa6575d4881b1fe779464f6b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>strtod</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga6465a8320d790115c41a2c76d1d3233c</anchor>
      <arglist>(const std::string &amp;str, std::string::size_type &amp;end_index, std::string::size_type start_index=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>dtostr</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gac740e6c99bca5896ccbfc12b621491ac</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga35e288b5ce34cb15eeec907421d2b77c</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strescape</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>gad24f3547c8d6b3ec56d7f5805a11d6ab</anchor>
      <arglist>(const std::string &amp;source, const std::string &amp;exceptions)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>strcompress</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga85cd83bd40baf0119aac3ff0a9a5e7b2</anchor>
      <arglist>(const std::string &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strerror</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga1eb869894996c91c0f69dbff96714c71</anchor>
      <arglist>(int errnum)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>strsignal</name>
      <anchorfile>group__StringUtils.html</anchorfile>
      <anchor>ga44ce9f689aff8abe1e3073b209f360d3</anchor>
      <arglist>(int signum)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ThreadPools</name>
    <title>Thread Pools</title>
    <filename>group__ThreadPools.html</filename>
    <class kind="class">Glib::ThreadPool</class>
  </compound>
  <compound kind="group">
    <name>glibmmValue</name>
    <title>Generic Values</title>
    <filename>group__glibmmValue.html</filename>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
  </compound>
  <compound kind="group">
    <name>Streams</name>
    <title>Stream Classes</title>
    <filename>group__Streams.html</filename>
    <class kind="class">Gio::BufferedInputStream</class>
    <class kind="class">Gio::BufferedOutputStream</class>
    <class kind="class">Gio::DataInputStream</class>
    <class kind="class">Gio::DataOutputStream</class>
    <class kind="class">Gio::FileInputStream</class>
    <class kind="class">Gio::FileIOStream</class>
    <class kind="class">Gio::FileOutputStream</class>
    <class kind="class">Gio::FilterInputStream</class>
    <class kind="class">Gio::FilterOutputStream</class>
    <class kind="class">Gio::InputStream</class>
    <class kind="class">Gio::IOStream</class>
    <class kind="class">Gio::MemoryInputStream</class>
    <class kind="class">Gio::MemoryOutputStream</class>
    <class kind="class">Gio::Mount</class>
    <class kind="class">Gio::OutputStream</class>
    <class kind="class">Gio::Seekable</class>
    <class kind="class">Gio::UnixInputStream</class>
    <class kind="class">Gio::UnixOutputStream</class>
  </compound>
  <compound kind="group">
    <name>DBus</name>
    <title>D-Bus API</title>
    <filename>group__DBus.html</filename>
    <class kind="class">Gio::DBus::AuthObserver</class>
    <class kind="class">Gio::DBus::Connection</class>
    <class kind="class">Gio::DBus::InterfaceVTable</class>
    <class kind="class">Gio::DBus::AnnotationInfo</class>
    <class kind="class">Gio::DBus::ArgInfo</class>
    <class kind="class">Gio::DBus::MethodInfo</class>
    <class kind="class">Gio::DBus::SignalInfo</class>
    <class kind="class">Gio::DBus::PropertyInfo</class>
    <class kind="class">Gio::DBus::InterfaceInfo</class>
    <class kind="class">Gio::DBus::NodeInfo</class>
    <class kind="class">Gio::DBus::Message</class>
    <class kind="class">Gio::DBus::MethodInvocation</class>
    <class kind="class">Gio::DBus::Proxy</class>
    <class kind="class">Gio::DBus::Server</class>
    <class kind="class">Gio::DBus::SubtreeVTable</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotBusAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga92ddf71b4fad230b88f53f0bd51cf9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameAcquired</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa9752b9e34e82802372d543be19e835d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameLost</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga6191db7ad78e8398c1193b9e78b9a9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotNameAppeared</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga86bd32cfdf2b9f3ef20ed287c8fc58b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Gio::DBus::Connection &gt; &amp;, Glib::ustring &gt;</type>
      <name>SlotNameVanished</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gadb9a09c6a42e777238421f74c82a631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_address</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gab2c056ac3cce34b4a58df19166d48fae</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_supported</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f8d4a3d5bda1d3fcc4f4f3c8cc0c214</anchor>
      <arglist>(const std::string &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_stream</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2d53e540686789c834cef9a3ac447bf4</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga8fa5586dec918dfa553dab97f0f8e342</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_finish</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga7da9ac3910fa800a6a42b2667b1a0135</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga95b08ddb9dedf51b585fa7a5da4f4233</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaec661c3dff45b4a5626b9dc1bc586b3d</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_for_bus_sync</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga3acef7d113b30124fe11e88c2d2a60a4</anchor>
      <arglist>(BusType bus_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2b6d40f35340690128b06b289388d120</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga94461b5c18260b017f3404d82ad5321a</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>strip_remote_error</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2f38119e0765fd1654363fcdee6e4c76</anchor>
      <arglist>(Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>own_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga6e63011eb298f04364d38d44ae51d1e5</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotBusAcquired &amp;bus_acquired_slot=SlotBusAcquired(), const SlotNameAcquired &amp;name_acquired_slot=SlotNameAcquired(), const SlotNameLost &amp;name_lost_slot=SlotNameLost(), BusNameOwnerFlags flags=Gio::DBus::BUS_NAME_OWNER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>generate_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga1f11b499bbff8835c429c0fd534df4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_guid</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf95791c56c136194a67f3855a4416966</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga05c67dee67b2ccccdcb0c19714abd5e1</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unique_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga04c3f3efa55c252ce9299a934f3bc9ed</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_member_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>ga2383c7d151a59adc91e4fbfbd1e4652a</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_interface_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf8f12ce74f2521c357d814a0105359ea</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa202af27755f2ea8d0736f8ab3a75dba</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>watch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaf07c31497172ba813b9322dad4570927</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const SlotNameAppeared &amp;name_appeared_slot=SlotNameAppeared(), const SlotNameVanished &amp;name_vanished_slot=SlotNameVanished(), BusNameWatcherFlags flags=Gio::DBus::BUS_NAME_WATCHER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwatch_name</name>
      <anchorfile>group__DBus.html</anchorfile>
      <anchor>gaa5106315b09d6fc5ad019ecfcc8d5342</anchor>
      <arglist>(guint watcher_id)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>NetworkIO</name>
    <title>Portable Network I/O Functionality</title>
    <filename>group__NetworkIO.html</filename>
    <class kind="class">Gio::InetAddress</class>
    <class kind="class">Gio::InetSocketAddress</class>
    <class kind="class">Gio::NetworkAddress</class>
    <class kind="class">Gio::NetworkService</class>
    <class kind="class">Gio::Proxy</class>
    <class kind="class">Gio::ProxyAddress</class>
    <class kind="class">Gio::ProxyResolver</class>
    <class kind="class">Gio::Resolver</class>
    <class kind="class">Gio::Socket</class>
    <class kind="class">Gio::SocketAddress</class>
    <class kind="class">Gio::SocketAddressEnumerator</class>
    <class kind="class">Gio::SocketClient</class>
    <class kind="class">Gio::SocketConnectable</class>
    <class kind="class">Gio::SocketConnection</class>
    <class kind="class">Gio::SocketControlMessage</class>
    <class kind="class">Gio::SocketListener</class>
    <class kind="class">Gio::SocketService</class>
    <class kind="class">Gio::SrvTarget</class>
    <class kind="class">Gio::TcpConnection</class>
    <class kind="class">Gio::ThreadedSocketService</class>
    <class kind="class">Gio::UnixConnection</class>
    <class kind="class">Gio::UnixCredentialsMessage</class>
    <class kind="class">Gio::UnixFDList</class>
    <class kind="class">Gio::UnixFDMessage</class>
    <class kind="class">Gio::UnixSocketAddress</class>
  </compound>
  <compound kind="group">
    <name>glibmmEnums</name>
    <title>glibmm Enums and Flags</title>
    <filename>group__glibmmEnums.html</filename>
    <class kind="class">ChecksumType</class>
    <member kind="enumeration">
      <type></type>
      <name>Month</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9781abc52ad49766808898743e44031f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa3c180cbd1a72ac6c1193374f07478043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JANUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fadcae78391f0081dd887dbd5c62ce9e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FEBRUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fafbb90abf68464b8e14a764cef1ced1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MARCH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faaf1909bbb4cbf9a02db828ab35e52ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APRIL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa879774f2eee3f8807bbd8e3c25e3c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa9da639bcfe895324daded17f4600116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JUNE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faaab22ac997e15a34995118694f8cbd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JULY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fae6d2bfb5bd12aace37808b1f5fe53afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUGUST</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa846063b97ea9c5dd82cae8718bb75df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEPTEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faa7e563e8689c07fac8f60f9f68f6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OCTOBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa3c5a2a9a7bfcc9b7cbd57b89856c4989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOVEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fac21038623ac787c4c94010d2334f6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa2aed3776c7cb74418206e52677f394c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa3c180cbd1a72ac6c1193374f07478043</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JANUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fadcae78391f0081dd887dbd5c62ce9e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FEBRUARY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fafbb90abf68464b8e14a764cef1ced1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MARCH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faaf1909bbb4cbf9a02db828ab35e52ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APRIL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa879774f2eee3f8807bbd8e3c25e3c5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa9da639bcfe895324daded17f4600116b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JUNE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faaab22ac997e15a34995118694f8cbd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>JULY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fae6d2bfb5bd12aace37808b1f5fe53afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUGUST</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa846063b97ea9c5dd82cae8718bb75df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEPTEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031faa7e563e8689c07fac8f60f9f68f6cebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OCTOBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa3c5a2a9a7bfcc9b7cbd57b89856c4989</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOVEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fac21038623ac787c4c94010d2334f6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DECEMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9781abc52ad49766808898743e44031fa2aed3776c7cb74418206e52677f394c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Weekday</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga073c9f49a289b2036eb226bcdf16a2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_WEEKDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1a0b852cafa7e3b36f3b87c8acd796be89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac75c38cdbe0d1a25346de7d5a1919f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TUESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1a3f573dae7a781f9f380b0adecdc068fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WEDNESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ab91831a000325a1ad3dd881f0db708e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THURSDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac2be9a407f81cac5ef82ec308aa23cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRIDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ad86f5fb6fa5f0f99e8f6980d5d78ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SATURDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1aa8703e1dd1d78272012d603e8ded6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUNDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac0ae61753cd0be03a4cee4ff0b209fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_WEEKDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1a0b852cafa7e3b36f3b87c8acd796be89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac75c38cdbe0d1a25346de7d5a1919f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TUESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1a3f573dae7a781f9f380b0adecdc068fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEDNESDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ab91831a000325a1ad3dd881f0db708e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THURSDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac2be9a407f81cac5ef82ec308aa23cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FRIDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ad86f5fb6fa5f0f99e8f6980d5d78ceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SATURDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1aa8703e1dd1d78272012d603e8ded6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUNDAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga073c9f49a289b2036eb226bcdf16a2f1ac0ae61753cd0be03a4cee4ff0b209fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DMY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac803072d86bbc2ce1f7d558c94f41ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a340ad04532a2d66518f8eefdf1ac1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a9da8611c47d68fe95d9026cf162bb350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>YEAR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a8eec7a614a99a9640e578862c13b5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DAY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a340ad04532a2d66518f8eefdf1ac1b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MONTH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a9da8611c47d68fe95d9026cf162bb350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>YEAR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggac803072d86bbc2ce1f7d558c94f41ae1a8eec7a614a99a9640e578862c13b5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileTest</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga33c24ccefbd130021f06708763e16ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_REGULAR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a3181e2e655e765b00dfdb1e1ea443f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a86cda9ff0bf25358070a9bc8b4a186d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_DIR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2ad3679641c18e5e4d4578c2122492cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2ad9ab64f07fd4fc2105b53b7379265535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TEST_EXISTS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a37c8f223bda6b6ce2875490351989ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TEST_IS_REGULAR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a3181e2e655e765b00dfdb1e1ea443f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TEST_IS_SYMLINK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a86cda9ff0bf25358070a9bc8b4a186d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TEST_IS_DIR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2ad3679641c18e5e4d4578c2122492cea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TEST_IS_EXECUTABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2ad9ab64f07fd4fc2105b53b7379265535</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TEST_EXISTS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga33c24ccefbd130021f06708763e16ef2a37c8f223bda6b6ce2875490351989ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SeekType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa3767731311bdba4ef42dc99215e5cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_CUR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaa48f0a394042c3a8e117b2ae64af33960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_SET</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaa1e0d3b4a03e5dd32f135acc89982889f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEEK_TYPE_END</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaafa5ff5cdf7e6623866c717fe49cfbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEEK_TYPE_CUR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaa48f0a394042c3a8e117b2ae64af33960</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEEK_TYPE_SET</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaa1e0d3b4a03e5dd32f135acc89982889f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEEK_TYPE_END</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa3767731311bdba4ef42dc99215e5cdaafa5ff5cdf7e6623866c717fe49cfbaec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStatus</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga23fb251e48485b62a9c2677bb1f87d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_ERROR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ea121996c81c45593110cd714bb81bc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_NORMAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5eaf249c5b8e984c37db0847258aeeae86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_EOF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ead42ae91b402716ab4faaec9b0f3823fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STATUS_AGAIN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ea5a33609d7ff07e1d711185c0765cf5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STATUS_ERROR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ea121996c81c45593110cd714bb81bc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STATUS_NORMAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5eaf249c5b8e984c37db0847258aeeae86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STATUS_EOF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ead42ae91b402716ab4faaec9b0f3823fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STATUS_AGAIN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga23fb251e48485b62a9c2677bb1f87d5ea5a33609d7ff07e1d711185c0765cf5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaee093e5db5bc1ea5738771ba0d1af3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_APPEND</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a121e65986f06397730c4c36d09fb4dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_NONBLOCK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a3724a778574d25ba0bd83139a80b2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_READABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a162bfe5ccb18465d0f11e954cc4a89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7af9738e0234ae1d1f15c4512d6edb16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_WRITABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a277477e570817af9089c3db5003f2948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7ac1373a306084710994199b3de0137cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a290937753007a9d182326eb334438a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_GET_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a9431cd6fcef2a716b7d313bd9cde85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_FLAG_SET_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a1d4db9b335a96f503cd491973b162105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_APPEND</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a121e65986f06397730c4c36d09fb4dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_NONBLOCK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a3724a778574d25ba0bd83139a80b2c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_IS_READABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a162bfe5ccb18465d0f11e954cc4a89d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_IS_WRITEABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7af9738e0234ae1d1f15c4512d6edb16db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_IS_WRITABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a277477e570817af9089c3db5003f2948</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_IS_SEEKABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7ac1373a306084710994199b3de0137cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a290937753007a9d182326eb334438a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_GET_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a9431cd6fcef2a716b7d313bd9cde85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_FLAG_SET_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaee093e5db5bc1ea5738771ba0d1af3b7a1d4db9b335a96f503cd491973b162105</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOCondition</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabd96381793b70d4ae32c725926990918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_IN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918af244f3e8c1c9525762f3630befd76336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_OUT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a60f61c8f26f2bb61afd3ad8afd673099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_PRI</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a36bb5411dda1131e5c23e17a8619c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a2e402c9fd5879c49ef5359fa4189acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_HUP</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918ab5dcc0e24c236c027b041d362dcff35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_NVAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918ad37b5d6ba6a0c1ad98510f352ac2f885</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_IN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918af244f3e8c1c9525762f3630befd76336</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_OUT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a60f61c8f26f2bb61afd3ad8afd673099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_PRI</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a36bb5411dda1131e5c23e17a8619c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918a2e402c9fd5879c49ef5359fa4189acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_HUP</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918ab5dcc0e24c236c027b041d362dcff35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_NVAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggabd96381793b70d4ae32c725926990918ad37b5d6ba6a0c1ad98510f352ac2f885</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KeyFileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5866be36312563d91e5a7be27348459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_NONE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba06a606cb7b5f244a0f3ad4f5e67b30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba00058fa3d8e271d9ff5e1469dc39dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba7ff723c84c930b978dccd6732eebe985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_FILE_NONE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba06a606cb7b5f244a0f3ad4f5e67b30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_FILE_KEEP_COMMENTS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba00058fa3d8e271d9ff5e1469dc39dc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_FILE_KEEP_TRANSLATIONS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga5866be36312563d91e5a7be27348459ba7ff723c84c930b978dccd6732eebe985</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaa4fcaf917b6eb2aa085817e83b0a4108</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a3f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TREAT_CDATA_AS_TEXT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a7da76e9b36f7599e3791e9cc87a2ff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PREFIX_ERROR_POSITION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a4bd16878d9226c7ce4c5fbf023a67e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DO_NOT_USE_THIS_UNSUPPORTED_FLAG</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a3f48cb56dd56d529c9379ae244441e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TREAT_CDATA_AS_TEXT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a7da76e9b36f7599e3791e9cc87a2ff72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PREFIX_ERROR_POSITION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaa4fcaf917b6eb2aa085817e83b0a4108a4bd16878d9226c7ce4c5fbf023a67e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ModuleFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga502283ffbe523adf38c69905ec8640f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LAZY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3acd94d05ef9ba97ceb6f3904b87f5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_LOCAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3a8e5768a91ee8dbf459785dee8b664b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODULE_BIND_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3a9cbf95b359863e9296457cbb0f193169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULE_BIND_LAZY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3acd94d05ef9ba97ceb6f3904b87f5bbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULE_BIND_LOCAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3a8e5768a91ee8dbf459785dee8b664b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MODULE_BIND_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga502283ffbe523adf38c69905ec8640f3a9cbf95b359863e9296457cbb0f193169</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TraverseType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae3a70fa1e451da068323419e8c98e9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_IN_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9aa7f260b474a886df2bf1aefcfc0f14b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_PRE_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9abed8efe71581ccb087323f38b6807661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_POST_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a0af70e322b94dfbbfc98b100d21cef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEVEL_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a16cd819f4ab8175453f6287aeefad870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_IN_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9aa7f260b474a886df2bf1aefcfc0f14b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_PRE_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9abed8efe71581ccb087323f38b6807661</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_POST_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a0af70e322b94dfbbfc98b100d21cef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_LEVEL_ORDER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggae3a70fa1e451da068323419e8c98e9a9a16cd819f4ab8175453f6287aeefad870</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TraverseFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad11179d39a4991e5b09f145d594a450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea7da8793fdd0c433870a5e6c2e3152898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_NON_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6473ae1f054172ae349d01003fabf37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea1be75d605b0c93ca7932110467536670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRAVERSE_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6832c7b45443db4eed6f4cfbd3c04b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea7da8793fdd0c433870a5e6c2e3152898</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_NON_LEAVES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6473ae1f054172ae349d01003fabf37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea1be75d605b0c93ca7932110467536670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRAVERSE_MASK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggad11179d39a4991e5b09f145d594a450ea6832c7b45443db4eed6f4cfbd3c04b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexCompileFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaaedee3e1374af9f1d66ccd34252a68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_CASELESS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da0f604aee4eae77ce7bca901c8b3de37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MULTILINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daee58700869ae67ad0823d10a7c51cb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOTALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da7ec3013d10b6360c921d67f23ff585fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_EXTENDED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da4ef80551354a8a16bcefaf9b35f55a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_ANCHORED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da67404d06bba595dec28fb4e6e05da427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DOLLAR_ENDONLY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da0d7cf52858b215b55ff10ccae9732dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_UNGREEDY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daf9c564d8191b7220f0f072b3b694f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_RAW</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da3acb6bdd173741b57cf267be3a3c7f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NO_AUTO_CAPTURE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dac6ccf906840973453a55625b2edf2f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_OPTIMIZE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da581257f414998f8ea0e0f55adf0844f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_FIRSTLINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da9eaf57cc833de98892af2f7d4ba54de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_DUPNAMES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da895a8a3fb7141b91a1890ee0bdb1a6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da3cab374f897aaac10d71c5437f9d77f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_LF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dabbbc306156a05aa67fde8d86d6d3b3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_CRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da8a419c54023c5dbedbd8960c9367d68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_NEWLINE_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daf310ce2e93c24b03fb0a87608821d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_BSR_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dae9090144fee1c710ab7159b6325809a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_JAVASCRIPT_COMPAT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da6e2a4e9d180de8a53787330aad59c550</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_CASELESS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da0f604aee4eae77ce7bca901c8b3de37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MULTILINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daee58700869ae67ad0823d10a7c51cb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_DOTALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da7ec3013d10b6360c921d67f23ff585fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_EXTENDED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da4ef80551354a8a16bcefaf9b35f55a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_ANCHORED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da67404d06bba595dec28fb4e6e05da427</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_DOLLAR_ENDONLY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da0d7cf52858b215b55ff10ccae9732dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_UNGREEDY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daf9c564d8191b7220f0f072b3b694f8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_RAW</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da3acb6bdd173741b57cf267be3a3c7f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_NO_AUTO_CAPTURE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dac6ccf906840973453a55625b2edf2f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_OPTIMIZE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da581257f414998f8ea0e0f55adf0844f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_FIRSTLINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da9eaf57cc833de98892af2f7d4ba54de7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_DUPNAMES</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da895a8a3fb7141b91a1890ee0bdb1a6b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_NEWLINE_CR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da3cab374f897aaac10d71c5437f9d77f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_NEWLINE_LF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dabbbc306156a05aa67fde8d86d6d3b3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_NEWLINE_CRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da8a419c54023c5dbedbd8960c9367d68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_NEWLINE_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68daf310ce2e93c24b03fb0a87608821d40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_BSR_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68dae9090144fee1c710ab7159b6325809a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_JAVASCRIPT_COMPAT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggaaaedee3e1374af9f1d66ccd34252a68da6e2a4e9d180de8a53787330aad59c550</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RegexMatchFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8375c7f6797efc96929e8be89435c746</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_ANCHORED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ac387b5b0e77b1726553e5d77e77191d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746afcdffce16a01e99f25f52bfe3deafd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a70b70be752f4874a262c15b99b3ee75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a58bc907f6f6e19c30456c895d18ea655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746aaa4d21e1c7f7ab1df117d433cafc5ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746aed663630c5623dc65f0ea23a04cf2979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_LF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746af5656ccd40cd632e00bc71b08834386e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_CRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a4b76b13cfd30f891108f491a58dbb2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ac76fe84aa6df3f8e6af74504ff5e7ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NEWLINE_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a69df30c4731b528dc5c33a0c097c25d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a7eca3aec1a64b9dc9ed5b60ccf55290f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_BSR_ANY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a2649183b2734e4b1f94e604734a2aadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_SOFT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a77418ae259e38e43f40dbe1691986d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_PARTIAL_HARD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ab3a9a2300e5ca553601c9c245868b1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REGEX_MATCH_NOTEMPTY_ATSTART</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a3a78490927087ef502b6ed4582fbd2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_ANCHORED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ac387b5b0e77b1726553e5d77e77191d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NOTBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746afcdffce16a01e99f25f52bfe3deafd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NOTEOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a70b70be752f4874a262c15b99b3ee75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NOTEMPTY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a58bc907f6f6e19c30456c895d18ea655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_PARTIAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746aaa4d21e1c7f7ab1df117d433cafc5ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NEWLINE_CR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746aed663630c5623dc65f0ea23a04cf2979</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NEWLINE_LF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746af5656ccd40cd632e00bc71b08834386e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NEWLINE_CRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a4b76b13cfd30f891108f491a58dbb2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NEWLINE_ANY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ac76fe84aa6df3f8e6af74504ff5e7ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NEWLINE_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a69df30c4731b528dc5c33a0c097c25d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_BSR_ANYCRLF</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a7eca3aec1a64b9dc9ed5b60ccf55290f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_BSR_ANY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a2649183b2734e4b1f94e604734a2aadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_PARTIAL_SOFT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a77418ae259e38e43f40dbe1691986d19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_PARTIAL_HARD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746ab3a9a2300e5ca553601c9c245868b1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REGEX_MATCH_NOTEMPTY_ATSTART</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga8375c7f6797efc96929e8be89435c746a3a78490927087ef502b6ed4582fbd2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SpawnFlags</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga075918988c271e7fb63f1a1d083e26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26ddaa2a457be3bdc07bbd0d32e1a63264d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda0ad30b49d46750083ddd1e0643635e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda341e5cb2803eb06a0f2f0431d6305e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda450919630c2ce753374d1d05760bb205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda5ae7fa0d4f6a0bdfc37adeb578634491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda9fb3c6cfddb2ef201f7b11829da8b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda55dc12133953441059847e8633227a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SEARCH_PATH_FROM_ENVP</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda15d9d32452c58ecbd878a14bea50ea39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_LEAVE_DESCRIPTORS_OPEN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26ddaa2a457be3bdc07bbd0d32e1a63264d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_DO_NOT_REAP_CHILD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda0ad30b49d46750083ddd1e0643635e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_SEARCH_PATH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda341e5cb2803eb06a0f2f0431d6305e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_STDOUT_TO_DEV_NULL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda450919630c2ce753374d1d05760bb205</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_STDERR_TO_DEV_NULL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda5ae7fa0d4f6a0bdfc37adeb578634491</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_CHILD_INHERITS_STDIN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda9fb3c6cfddb2ef201f7b11829da8b5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_FILE_AND_ARGV_ZERO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda55dc12133953441059847e8633227a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_SEARCH_PATH_FROM_ENVP</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga075918988c271e7fb63f1a1d083e26dda15d9d32452c58ecbd878a14bea50ea39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ThreadPriority</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9b87dca6496b6ad53baec9ca01318448</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_LOW</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a6216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_HIGH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448aef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>THREAD_PRIORITY_URGENT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a5b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THREAD_PRIORITY_LOW</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a035a7bdc6a5b5eae6f644ed2605e8a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THREAD_PRIORITY_NORMAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a6216bb25baaaca32642841ade911a92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THREAD_PRIORITY_HIGH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448aef77081535e90116b203ce3b3b0fe523</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>THREAD_PRIORITY_URGENT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga9b87dca6496b6ad53baec9ca01318448a5b79355bbd59c508995af57e0ed39a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TimeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga56a2fdf6fb8599b99302868a176aac43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_STANDARD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43abc1bd20639cf635b6b77debb8db20af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_DAYLIGHT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43a1f14fdd3f299e269e6e10c23de3b18e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIME_TYPE_UNIVERSAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43a8b88d03871bc3e73201ddf473eee311f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIME_TYPE_STANDARD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43abc1bd20639cf635b6b77debb8db20af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIME_TYPE_DAYLIGHT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43a1f14fdd3f299e269e6e10c23de3b18e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIME_TYPE_UNIVERSAL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga56a2fdf6fb8599b99302868a176aac43a8b88d03871bc3e73201ddf473eee311f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gadfbb414be3a4d127146fdca66dc7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONTROL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eac280382585f1014b43ed228760e7c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FORMAT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eaaedc3e279c1c7e01f1bec907bbe313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UNASSIGNED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eafc32abac3afbe8380d54790f178fd3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PRIVATE_USE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5ca14907043380b1e9d725671bc71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SURROGATE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea0b99b4f93ef273ea4c49fb82970f5e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eadb83c3e23724b6ef15888c6527a063bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eae6e48ddd5b4eacb4cbf67fa902743458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea57ced328464824fe23113e7b98a4ae61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab72e09c06a5aeffccdd94d5695dfcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea8f344db3f8e39ed99bc2c9665ab96c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea97a31543e68e4bdc4d02a58e77f70cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea4508b84626068a2dbf23a69b96475e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea857864a5d1c145cc3ff8ccba54834f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eae75e5f353bc068ec3d8bf2555c540995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LETTER_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea19811baedb3dbc8afddde43d00eb3cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea45a259cec90b0ada120fe7116be422b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea649c83b23fb3d9bd7bf1803858cc5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eaa1169c4e20b3a47f597005f84f9fa7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea1ffaf2aac92ca1e818cf3e26b8301b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab549f212a3f340bd660a962b298409ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab247e5e7480ecbf382b2128c600b8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5c9416f9219bf9282c49b7ca831f0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea806e11a7f8d1a0b0688a0237ad1fa190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea40b40c2bb5d39acee2b81327e2efb905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5b693a82d2e497a2b13cae8d5668097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_MATH_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea28100e9fa5a262bbd32b973303746490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea298582645a73c91d191b7e1dc61d214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ead7650a40ddf3741e87a1039eba56b1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5b3c71c265af11b331d0ec4240af1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eac2eafb967dc62399aeb5ff27c8896b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_CONTROL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eac280382585f1014b43ed228760e7c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_FORMAT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eaaedc3e279c1c7e01f1bec907bbe313ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_UNASSIGNED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eafc32abac3afbe8380d54790f178fd3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_PRIVATE_USE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5ca14907043380b1e9d725671bc71a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_SURROGATE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea0b99b4f93ef273ea4c49fb82970f5e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_LOWERCASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eadb83c3e23724b6ef15888c6527a063bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_MODIFIER_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eae6e48ddd5b4eacb4cbf67fa902743458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_OTHER_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea57ced328464824fe23113e7b98a4ae61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_TITLECASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab72e09c06a5aeffccdd94d5695dfcbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_UPPERCASE_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea8f344db3f8e39ed99bc2c9665ab96c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_SPACING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea97a31543e68e4bdc4d02a58e77f70cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_ENCLOSING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea4508b84626068a2dbf23a69b96475e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_NON_SPACING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea857864a5d1c145cc3ff8ccba54834f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_DECIMAL_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eae75e5f353bc068ec3d8bf2555c540995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_LETTER_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea19811baedb3dbc8afddde43d00eb3cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_OTHER_NUMBER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea45a259cec90b0ada120fe7116be422b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_CONNECT_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea649c83b23fb3d9bd7bf1803858cc5afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_DASH_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eaa1169c4e20b3a47f597005f84f9fa7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_CLOSE_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea1ffaf2aac92ca1e818cf3e26b8301b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_FINAL_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab549f212a3f340bd660a962b298409ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_INITIAL_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eab247e5e7480ecbf382b2128c600b8720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_OTHER_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5c9416f9219bf9282c49b7ca831f0c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_OPEN_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea806e11a7f8d1a0b0688a0237ad1fa190</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_CURRENCY_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea40b40c2bb5d39acee2b81327e2efb905</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_MODIFIER_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5b693a82d2e497a2b13cae8d5668097c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_MATH_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea28100e9fa5a262bbd32b973303746490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_OTHER_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea298582645a73c91d191b7e1dc61d214f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_LINE_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ead7650a40ddf3741e87a1039eba56b1a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_PARAGRAPH_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46ea5b3c71c265af11b331d0ec4240af1c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_SPACE_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ggadfbb414be3a4d127146fdca66dc7a46eac2eafb967dc62399aeb5ff27c8896b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeBreakType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1af1a717c84d71aa4aabc9fc77b4d0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa37c762c3c7b080f5795ed6f828231923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa6b7c9d7a0ac78d14cf06b18bfeb2ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7839936b879938c5056bdb55eb0b6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa014f326eb07effe48f1b771459caa7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa032b712c48700209c7cc414ca88cda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaadb5ff8a11c4e596677d161903c732c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa38f51c8283586493a3ebd45fa3b0113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa47784c7e2cd80f6ac179de7f7a3f54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaae80d6fef8acf765da47c8235e39f4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab37a6597dbf2e248b610769be7e5cb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AFTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaada4027a9bfc5ffdf90e3be612adad7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab1efcdcd3d6ecb55dff58a2e2ee1b9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaafce05d8590e1b40ec427f8f78cf15ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7e6dd69fc00fdc42ab091a2916426dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaabe412d94a1f7d9e92cc5a20f0b549626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa52ebd39d1b02dfd368992a2ef8e7fa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaad1284afc0511ab69aa18554b8306fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa8fe57a799eacc3299fd256285dd1246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaf628849c1e5b531c022e12695c1f6f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa22047a88734e9fe1e9e0fef994cfb20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa50a61c3c53da7558d08c1fcbcfc3b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa07f3d0d76db141033eff38ee7577ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaafc02ec4862f016b6c2da35592f6cd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaea27a8970e74f93f485d45f6a1684586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_PREFIX</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa580794ffc9992e65666adce0611eecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7ca3941d5dea03a5c824ae55212db01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa3a96b8e59ba5815700d33c1f6006a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaae79244811e61b30eb68ee02dc45f1c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaeb94f98b2233fae0afb38bf115b4b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7ffad3080f483a6b97680db786836ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa9a74e7d947f75ef93d4e3aacebdb898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_L_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab3449fb99a5694c3f6debd9d1a887a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_V_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa156946aa6aec4f4e0f8e69d352f31f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_T_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa37082de3ccd45cca392c6dee935d7cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LV_SYLLABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7a11c61184436fe2fb6e74d0ea916f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HANGUL_LVT_SYLLABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa44dec475bcc1d26dc3ad905c302efc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CLOSE_PARANTHESIS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa20f85af7007649a47524cb20ff43b2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa147db9c675857326a416910bec27a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNICODE_BREAK_HEBREW_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaad9d4c110e6a0eb4ee1f879f2012196e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_MANDATORY</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa37c762c3c7b080f5795ed6f828231923</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_CARRIAGE_RETURN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa6b7c9d7a0ac78d14cf06b18bfeb2ccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_LINE_FEED</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7839936b879938c5056bdb55eb0b6b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_COMBINING_MARK</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa014f326eb07effe48f1b771459caa7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_SURROGATE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa032b712c48700209c7cc414ca88cda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_ZERO_WIDTH_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaadb5ff8a11c4e596677d161903c732c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_INSEPARABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa38f51c8283586493a3ebd45fa3b0113e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_NON_BREAKING_GLUE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa47784c7e2cd80f6ac179de7f7a3f54e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_CONTINGENT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaae80d6fef8acf765da47c8235e39f4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab37a6597dbf2e248b610769be7e5cb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_AFTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaada4027a9bfc5ffdf90e3be612adad7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_BEFORE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab1efcdcd3d6ecb55dff58a2e2ee1b9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_BEFORE_AND_AFTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaafce05d8590e1b40ec427f8f78cf15ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HYPHEN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7e6dd69fc00fdc42ab091a2916426dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_NON_STARTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaabe412d94a1f7d9e92cc5a20f0b549626</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_OPEN_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa52ebd39d1b02dfd368992a2ef8e7fa7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_CLOSE_PUNCTUATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaad1284afc0511ab69aa18554b8306fbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_QUOTATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa8fe57a799eacc3299fd256285dd1246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_EXCLAMATION</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaf628849c1e5b531c022e12695c1f6f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_IDEOGRAPHIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa22047a88734e9fe1e9e0fef994cfb20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_NUMERIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa50a61c3c53da7558d08c1fcbcfc3b138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_INFIX_SEPARATOR</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa07f3d0d76db141033eff38ee7577ffd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_SYMBOL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaafc02ec4862f016b6c2da35592f6cd62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_ALPHABETIC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaea27a8970e74f93f485d45f6a1684586</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_PREFIX</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa580794ffc9992e65666adce0611eecb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_POSTFIX</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7ca3941d5dea03a5c824ae55212db01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_COMPLEX_CONTEXT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa3a96b8e59ba5815700d33c1f6006a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_AMBIGUOUS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaae79244811e61b30eb68ee02dc45f1c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_UNKNOWN</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaaeb94f98b2233fae0afb38bf115b4b42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_NEXT_LINE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7ffad3080f483a6b97680db786836ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_WORD_JOINER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa9a74e7d947f75ef93d4e3aacebdb898b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HANGUL_L_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaab3449fb99a5694c3f6debd9d1a887a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HANGUL_V_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa156946aa6aec4f4e0f8e69d352f31f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HANGUL_T_JAMO</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa37082de3ccd45cca392c6dee935d7cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HANGUL_LV_SYLLABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa7a11c61184436fe2fb6e74d0ea916f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HANGUL_LVT_SYLLABLE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa44dec475bcc1d26dc3ad905c302efc87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_CLOSE_PARANTHESIS</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa20f85af7007649a47524cb20ff43b2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaa147db9c675857326a416910bec27a6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_BREAK_HEBREW_LETTER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga1af1a717c84d71aa4aabc9fc77b4d0eaad9d4c110e6a0eb4ee1f879f2012196e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AsciiType</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2e5a690ed07dfaa6f9ad9f1c57acd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALNUM</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787af7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_ALPHA</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ac87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_CNTRL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_DIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_GRAPH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_LOWER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PRINT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_PUNCT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a7d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_UPPER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a5ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII_XDIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_ALNUM</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787af7d63a99479102b5391b44f631b5f009</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_ALPHA</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ac87947c729ac3c3f9f58b0ca28460152</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_CNTRL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2e19c57ce5a6eac38d911a86cc44a2fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_DIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9acd9a82d0670a3eb0377db782f48853</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_GRAPH</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a2ecdbe5137af423fce73ff2bbb34d625</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_LOWER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a875d3cb7494e1548db0d37ab44d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_PRINT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a9b1775043a8043d994c0c0ab890e86c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_PUNCT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad3416d8662560db626259013ff72c58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_SPACE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a7d7a68814efba3cf3d294475123413ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_UPPER</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787a5ae30681069b2ab88eed13e358c08090</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASCII_XDIGIT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga2e5a690ed07dfaa6f9ad9f1c57acd787ad78490a35d65839f2f06449e7e472337</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NormalizeMode</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga18199b64f406e397627a4e7fc799f848</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848acbaee513b23e0066962df2e540cd4c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a169a0ae0910535038d8d403f874f0b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848ad9fb4be6b95958030771b4e8cba4144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a20e4b8b42b12a7972ca4f6c84030978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848aa1cf5911572000f5273dc46fe2c5b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a995775ef324bbd76a91a74c7f2686867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a7c98a2300648a33ca0ebc87fed999ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMALIZE_NFKC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848aa7f62ac84c5ed8a8868cbb49a889dd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_DEFAULT</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848acbaee513b23e0066962df2e540cd4c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_NFD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a169a0ae0910535038d8d403f874f0b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_DEFAULT_COMPOSE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848ad9fb4be6b95958030771b4e8cba4144c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_NFC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a20e4b8b42b12a7972ca4f6c84030978d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_ALL</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848aa1cf5911572000f5273dc46fe2c5b270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_NFKD</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a995775ef324bbd76a91a74c7f2686867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_ALL_COMPOSE</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848a7c98a2300648a33ca0ebc87fed999ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NORMALIZE_NFKC</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gga18199b64f406e397627a4e7fc799f848aa7f62ac84c5ed8a8868cbb49a889dd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e018d8609ba17b0f6955505a8363bf7</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae652f47e7b61603b9a6b86b7251d5526</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6c089f23d6bfd92e083edc75519db75e</anchor>
      <arglist>(FileTest lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga948edadd8ee7442b83d37dc3c325f890</anchor>
      <arglist>(FileTest flags)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga9a6f5470f667596e897f5bfbd1068283</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga112ada474a7aad83af2bd49403abf41e</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileTest &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2219c78993a5196ca2a435a18e0fc3a7</anchor>
      <arglist>(FileTest &amp;lhs, FileTest rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga0dd0a8800b6311ee8f3867eb27a72ae5</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga7662618e73d046d4df5eb7cce3e487f8</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad61c57b0678c703e8a14230d18bacff7</anchor>
      <arglist>(IOFlags lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga548c1cb09208fef57e5d0b3c992d71b9</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac3539f6df5e0c0658726f4f0573146f9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae84d9361a6154e6b0e8d099705ad6cad</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2180a5c566ced37bbeb37050d9632da9</anchor>
      <arglist>(IOFlags &amp;lhs, IOFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab5937e9164f36f75ba87fd67903348d5</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga12928ddba0f38406f19d55547bac552b</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6416bbf923045261beb85241fff8ef0d</anchor>
      <arglist>(IOCondition lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga85461947d24f306cefd2fe17999deb97</anchor>
      <arglist>(IOCondition flags)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8269a01826f8737d98ab0d345a0004f4</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga11f46ad6051058eeeb34d5963a4f7c44</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga995d6d5d01db67af62661bcd5dfd1ad6</anchor>
      <arglist>(IOCondition &amp;lhs, IOCondition rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabac5e1493392116b118e4d1048e3fef0</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1827ef58fe5e85d65ff8166e51b33556</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacc28b21831114895abfdbae6c1908114</anchor>
      <arglist>(KeyFileFlags lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab99ff1d7c6d96da2ddfcfd1c4954e9b6</anchor>
      <arglist>(KeyFileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga7096a34594825c90d7b6257935a62eb1</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga80dd56fcaea8bc3f0a5f21b9d3049877</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>KeyFileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac90869f74a743e2f99f55708c28a585d</anchor>
      <arglist>(KeyFileFlags &amp;lhs, KeyFileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga330303c9d78eb78547012d549d4bb018</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga421021254296cdba48ec178a54fe93d9</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab059cb7acda2b29eb2066958fc71951a</anchor>
      <arglist>(ParseFlags lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1fb97b62ae844c056b400e2813a21ee2</anchor>
      <arglist>(ParseFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga6b24d718f166cb352be94ee6e4090296</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2a7b1137fa0d9495cdb5f46ec564a2ba</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ParseFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf59b9479390c508dff23dba221177bcc</anchor>
      <arglist>(ParseFlags &amp;lhs, ParseFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gade862759d091b90329ba8f85aa2fd010</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaacd06c8457fa8f31c1483f96c4933ddf</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga333d93ef372c08c322d27ac05bda0e18</anchor>
      <arglist>(ModuleFlags lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaaa723a5b4d33e54167f7adbb18746004</anchor>
      <arglist>(ModuleFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae9df767ea1ec74b0d9d9acce426a07a8</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab903aa5397125ce37c66a259c4b1a5f5</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ModuleFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8e73a634c6441630eddf8805b22dd163</anchor>
      <arglist>(ModuleFlags &amp;lhs, ModuleFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5c44b3a4eee7eefbb1f2d1d8f22642ca</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga4ae748a01d312275d2ca4e15c5df5826</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69068f48bbea92cdd3cc7d69fdc017e1</anchor>
      <arglist>(RegexCompileFlags lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gacb650222b1a3f6a44e72df95d815a7f8</anchor>
      <arglist>(RegexCompileFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gae6fd65d5a674d2e2e453793d86fa64cd</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaeefcf05c20e07dde23268b83a1ff1c45</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga1425051a4ffed939a1bff1e0543c9498</anchor>
      <arglist>(RegexCompileFlags &amp;lhs, RegexCompileFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gab63da3a959cbd5f00f4fa535e35eda08</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga29b80a6c4482fae8e19f9328ec0c3147</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga06c395f619dffca3f0fc483fab302122</anchor>
      <arglist>(RegexMatchFlags lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaf192ce556cbd7ddb416e8078bdb09523</anchor>
      <arglist>(RegexMatchFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8f30deab298559a873d7beca40279ead</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga283a3e82cd9d3da8746edbe13a6f616a</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga402d81f594d95305aa6e275aa74126ae</anchor>
      <arglist>(RegexMatchFlags &amp;lhs, RegexMatchFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gaba6cac919da111ebf69667bf9f8006ff</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga2d10b36fdc1ceb9fea2ffcd58406f3e2</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga84449a9a461b381f88f65435ef8389ec</anchor>
      <arglist>(SpawnFlags lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga065f45ca68d1397febf331293e4cc4de</anchor>
      <arglist>(SpawnFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gabbe289c910b34a158f8dc22bb0b0095f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga93f15ab009ea244c1d8b069e27ec193f</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SpawnFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga40166fcca8eb8ec5b148c82444553927</anchor>
      <arglist>(SpawnFlags &amp;lhs, SpawnFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator|</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga5bc1518eb5547dbb8af77b944ccaa048</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator&amp;</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga4c340e00aeb13a9124081f383283eed0</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator^</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga682a545ca2e86b3e162305e4f14fa8d5</anchor>
      <arglist>(AsciiType lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType</type>
      <name>operator~</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gad7ea47582094c6d092a8f485e1e709c6</anchor>
      <arglist>(AsciiType flags)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga69bba23f4c9a83c268d0599f241b8ebe</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>ga8f4b46bf548b21ef21a568ecc18a5871</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
    <member kind="function">
      <type>AsciiType &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__glibmmEnums.html</anchorfile>
      <anchor>gac1b0239e539cf250333fe0adc04dbb41</anchor>
      <arglist>(AsciiType &amp;lhs, AsciiType rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>giommEnums</name>
    <title>giomm Enums and Flags</title>
    <filename>group__giommEnums.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AppInfoCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae39c1e25f40a070e1720470758a55344</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344af71f654bb54f7e68263da28fc5eccacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_NEEDS_TERMINAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344a01421973a2522b9e2ac7672c03468e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_URIS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344aef4faf5deef3c2e3eec96cefd9feeafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344aaa40bd96592a90dffd60f0f969604ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APP_INFO_CREATE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344af71f654bb54f7e68263da28fc5eccacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APP_INFO_CREATE_NEEDS_TERMINAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344a01421973a2522b9e2ac7672c03468e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APP_INFO_CREATE_SUPPORTS_URIS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344aef4faf5deef3c2e3eec96cefd9feeafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae39c1e25f40a070e1720470758a55344aaa40bd96592a90dffd60f0f969604ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ApplicationFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga493d914cf0a466cc9c6b18a44c5d345e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea62458d175fa8f9e1d969102c03c61850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_SERVICE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea1afffd7d804d12cd26360099d9bee92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_IS_LAUNCHER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ead0efd28e44e8844197f452898d63d89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_OPEN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea74f4ae91117b62d7e086000c1c3ce4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_HANDLES_COMMAND_LINE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea37db0c685dc092f0bee9ef8ca63bfa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_SEND_ENVIRONMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea7293060d9cc62543a100d4065a45e699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>APPLICATION_NON_UNIQUE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345eac553f7fd683cc1f05fef6494474738c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea62458d175fa8f9e1d969102c03c61850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_IS_SERVICE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea1afffd7d804d12cd26360099d9bee92d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_IS_LAUNCHER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ead0efd28e44e8844197f452898d63d89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_HANDLES_OPEN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea74f4ae91117b62d7e086000c1c3ce4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_HANDLES_COMMAND_LINE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea37db0c685dc092f0bee9ef8ca63bfa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_SEND_ENVIRONMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345ea7293060d9cc62543a100d4065a45e699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>APPLICATION_NON_UNIQUE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga493d914cf0a466cc9c6b18a44c5d345eac553f7fd683cc1f05fef6494474738c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa0a2aaee2c908b38261e17b4cb851b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fa7bb88e391cd0ef3e846c12b3d4a59c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_CONVERTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fa3f0cca33e839cbb63a5648169cd3b1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FINISHED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fab017a4144426b7c0760f1db0cbeccb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSHED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fad96b068e8defbe27675b7b23797ee001</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fa7bb88e391cd0ef3e846c12b3d4a59c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_CONVERTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fa3f0cca33e839cbb63a5648169cd3b1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_FINISHED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fab017a4144426b7c0760f1db0cbeccb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_FLUSHED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa0a2aaee2c908b38261e17b4cb851b5fad96b068e8defbe27675b7b23797ee001</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConverterFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab07e5ab152ffbc542e6e5c007809f17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_NO_FLAGS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca94b593a038496cf9019285e6b523ade0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_INPUT_AT_END</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca8cb1de79a5b9fa89c21c8a203c85ef58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONVERTER_FLUSH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca18d4de224eb97b71c11a5e459d38f7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_NO_FLAGS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca94b593a038496cf9019285e6b523ade0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_INPUT_AT_END</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca8cb1de79a5b9fa89c21c8a203c85ef58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONVERTER_FLUSH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab07e5ab152ffbc542e6e5c007809f17ca18d4de224eb97b71c11a5e459d38f7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CredentialsType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae498b021f21459dc83201f010ddf8dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddeab7616d5b52056cc29a2ef7bf3fb80353</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_LINUX_UCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddea8e05457bf2bf4d7c5e59bf36b66fc54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_FREEBSD_CMSGCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddeaed40e68e3fd14be8ed83203f8c1a0f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddea82149fd690bd5d8866d60e4c45e851d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CREDENTIALS_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddeab7616d5b52056cc29a2ef7bf3fb80353</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CREDENTIALS_TYPE_LINUX_UCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddea8e05457bf2bf4d7c5e59bf36b66fc54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CREDENTIALS_TYPE_FREEBSD_CMSGCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddeaed40e68e3fd14be8ed83203f8c1a0f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae498b021f21459dc83201f010ddf8ddea82149fd690bd5d8866d60e4c45e851d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa00806111608557f425bf09bdf4b0087</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_STARTER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a7349a7ac5515e50a6f9abc8ec87f7a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a7ff13331f8effb30f166b10f9dda2541</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SYSTEM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087acc6699889f9c3889b1cea4122df8cfae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_TYPE_SESSION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a6e8a761bb2b99a79a394eb6248fc10a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_TYPE_STARTER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a7349a7ac5515e50a6f9abc8ec87f7a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_TYPE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a7ff13331f8effb30f166b10f9dda2541</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_TYPE_SYSTEM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087acc6699889f9c3889b1cea4122df8cfae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_TYPE_SESSION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa00806111608557f425bf09bdf4b0087a6e8a761bb2b99a79a394eb6248fc10a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CallFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa2aaa37e1bbc56a65746a9ebc3a5a4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa2aaa37e1bbc56a65746a9ebc3a5a4dba58a6f5ca4cfbfa37e2616476b19e66ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CALL_FLAGS_NO_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa2aaa37e1bbc56a65746a9ebc3a5a4dba5ab35f352564666dc4d9b6088b739fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CALL_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa2aaa37e1bbc56a65746a9ebc3a5a4dba58a6f5ca4cfbfa37e2616476b19e66ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CALL_FLAGS_NO_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa2aaa37e1bbc56a65746a9ebc3a5a4dba5ab35f352564666dc4d9b6088b739fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ConnectionFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa395bc4535e698ee8615a929c947187d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da0fe8b0a8eab2acb06e7ab0d1743a65fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_CLIENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da53001bbbad27665f413669fc6d4961fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_SERVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da633cad351284559bfa8fcb33be247d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187dab2db7a7f413d4f89b57b474d39835493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da08874b28502fd4a6fcb272b113f0a73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187dab43440732aade6b74c6480186bcced1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da0fe8b0a8eab2acb06e7ab0d1743a65fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_AUTHENTICATION_CLIENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da53001bbbad27665f413669fc6d4961fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_AUTHENTICATION_SERVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da633cad351284559bfa8fcb33be247d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187dab2db7a7f413d4f89b57b474d39835493</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187da08874b28502fd4a6fcb272b113f0a73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa395bc4535e698ee8615a929c947187dab43440732aade6b74c6480186bcced1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SendMessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab2b457af9dfcf8a106e4b8495d22af2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab2b457af9dfcf8a106e4b8495d22af2baf93fed1a472ab0c7eb4f51fa35b93577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SEND_MESSAGE_FLAGS_PRESERVE_SERIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab2b457af9dfcf8a106e4b8495d22af2baa438996b2b25c2ddfc7bb610b067ce37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_MESSAGE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab2b457af9dfcf8a106e4b8495d22af2baf93fed1a472ab0c7eb4f51fa35b93577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SEND_MESSAGE_FLAGS_PRESERVE_SERIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab2b457af9dfcf8a106e4b8495d22af2baa438996b2b25c2ddfc7bb610b067ce37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SignalFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5978f448a9187eca418eac34799144fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5978f448a9187eca418eac34799144faa08f72890c46ff66ff5df6ea3bbc2d526</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNAL_FLAGS_NO_MATCH_RULE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5978f448a9187eca418eac34799144faa6fd031eb644deb1e41047be3972b2501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIGNAL_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5978f448a9187eca418eac34799144faa08f72890c46ff66ff5df6ea3bbc2d526</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SIGNAL_FLAGS_NO_MATCH_RULE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5978f448a9187eca418eac34799144faa6fd031eb644deb1e41047be3972b2501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SubtreeFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga57ca559dd8d3b93c96c4828cb457b975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga57ca559dd8d3b93c96c4828cb457b975aa8559c8d4072f25d7aeaa9b08bc93c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga57ca559dd8d3b93c96c4828cb457b975a0765ee03c950bcaf808a9c178261ec53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUBTREE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga57ca559dd8d3b93c96c4828cb457b975aa8559c8d4072f25d7aeaa9b08bc93c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga57ca559dd8d3b93c96c4828cb457b975a0765ee03c950bcaf808a9c178261ec53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PropertyInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga54150c0a362b8266949aa773ddeae53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53ba7495060dbafcef981bd1ac569b57c360</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_READABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53ba3085f89aac2f031375736da857474f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROPERTY_INFO_FLAGS_WRITABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53bac3284fda1938605ef97cd475fccc73ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROPERTY_INFO_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53ba7495060dbafcef981bd1ac569b57c360</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROPERTY_INFO_FLAGS_READABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53ba3085f89aac2f031375736da857474f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROPERTY_INFO_FLAGS_WRITABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga54150c0a362b8266949aa773ddeae53bac3284fda1938605ef97cd475fccc73ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd9b3057ea07b6bb75a7c033678a07b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a2ab0776278e2de206b735ba755ba069f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_CALL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6ad2a0f596a63382bb0069acd5bd6fb41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_METHOD_RETURN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a0d9c73c1f74b6eca4681cb9ad77af53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a1becddbbe6e5655f0493b95505e7457d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_TYPE_SIGNAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a3afd3c78ee86c4df23f354ce7f1bf457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a2ab0776278e2de206b735ba755ba069f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_TYPE_METHOD_CALL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6ad2a0f596a63382bb0069acd5bd6fb41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_TYPE_METHOD_RETURN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a0d9c73c1f74b6eca4681cb9ad77af53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_TYPE_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a1becddbbe6e5655f0493b95505e7457d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_TYPE_SIGNAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadd9b3057ea07b6bb75a7c033678a07b6a3afd3c78ee86c4df23f354ce7f1bf457</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf22c46c040ba585ee936319b7e414784</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784a00af2c1b94b99cfd3cb08b21a6bf7554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_REPLY_EXPECTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784af691cc94a859f49a3a139e47c3f121ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_FLAGS_NO_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784a9d100dc24374eef5d5d2849612e3064e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784a00af2c1b94b99cfd3cb08b21a6bf7554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_FLAGS_NO_REPLY_EXPECTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784af691cc94a859f49a3a139e47c3f121ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_FLAGS_NO_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf22c46c040ba585ee936319b7e414784a9d100dc24374eef5d5d2849612e3064e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageHeaderField</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6cfd9fb2c0212aea31cecd5fd923a0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a9eef0557ee6c24e3d666910027e5a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_PATH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a53f544533eae59b1e52c40f16f9bc314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_INTERFACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0ad2cf0584b4cf2692ae6e47a0a4d346fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_MEMBER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0aa8742b1bb909e93a5c96ace60499b585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_ERROR_NAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0aebecd24cf3e1c8fab2cbf8b45f3fc8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_REPLY_SERIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a26ed6a22a6a42fe4b662e14e764d2d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_DESTINATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0ad09470b870b682b87b060d97ef6f0f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SENDER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a78bc7e85b0593201d58189a4a7d399be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_SIGNATURE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a185c28c23a549118d1a78e3b6f13409e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MESSAGE_HEADER_FIELD_NUM_UNIX_FDS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a59fa01ade01590696f11cae262bac0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a9eef0557ee6c24e3d666910027e5a96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_PATH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a53f544533eae59b1e52c40f16f9bc314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_INTERFACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0ad2cf0584b4cf2692ae6e47a0a4d346fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_MEMBER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0aa8742b1bb909e93a5c96ace60499b585</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_ERROR_NAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0aebecd24cf3e1c8fab2cbf8b45f3fc8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_REPLY_SERIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a26ed6a22a6a42fe4b662e14e764d2d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_DESTINATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0ad09470b870b682b87b060d97ef6f0f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_SENDER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a78bc7e85b0593201d58189a4a7d399be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_SIGNATURE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a185c28c23a549118d1a78e3b6f13409e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MESSAGE_HEADER_FIELD_NUM_UNIX_FDS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga6cfd9fb2c0212aea31cecd5fd923a0f0a59fa01ade01590696f11cae262bac0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CapabilityFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadc652797a964763619fdb48a89b42f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadc652797a964763619fdb48a89b42f93a7bb413812fb2e49851d6dc3d9f90fb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAPABILITY_FLAGS_UNIX_FD_PASSING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadc652797a964763619fdb48a89b42f93a3ece79e604db16e362c11102624514ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CAPABILITY_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadc652797a964763619fdb48a89b42f93a7bb413812fb2e49851d6dc3d9f90fb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CAPABILITY_FLAGS_UNIX_FD_PASSING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggadc652797a964763619fdb48a89b42f93a3ece79e604db16e362c11102624514ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameOwnerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga90e13b67fdf97528695baa4a6a18b051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051a6f6a351717c214f7504c32d91bb1ce8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051ac35f459d321c52977e12b1cfb97e7a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_OWNER_FLAGS_REPLACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051aac4ada47441dcb1ac4e24fc78155c7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_NAME_OWNER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051a6f6a351717c214f7504c32d91bb1ce8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051ac35f459d321c52977e12b1cfb97e7a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_NAME_OWNER_FLAGS_REPLACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga90e13b67fdf97528695baa4a6a18b051aac4ada47441dcb1ac4e24fc78155c7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ProxyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac7e5173c0b0042ec1dfca220d6761c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fab313f3231abf4febe2ee834bbb960b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9faf4d742724f7aef2d771296d0e02f864f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fa8550cc29e4b9577ae47eb660ba457b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_DO_NOT_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fabc434784856986c2f075f31073a14f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FLAGS_GET_INVALIDATED_PROPERTIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fa18676193f2719bc0dc13a1dbc6104079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fab313f3231abf4febe2ee834bbb960b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9faf4d742724f7aef2d771296d0e02f864f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fa8550cc29e4b9577ae47eb660ba457b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FLAGS_DO_NOT_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fabc434784856986c2f075f31073a14f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FLAGS_GET_INVALIDATED_PROPERTIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac7e5173c0b0042ec1dfca220d6761c9fa18676193f2719bc0dc13a1dbc6104079</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ServerFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3fbaae392de9b7cb4e91ba94476a82b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2a1d24cb87d72d1b797969a1fc79e5c63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_RUN_IN_THREAD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2af3c035d0b0b0384922a2816d940c1476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2a95064fa64fd40d716c1a5f84f384d1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2a1d24cb87d72d1b797969a1fc79e5c63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVER_FLAGS_RUN_IN_THREAD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2af3c035d0b0b0384922a2816d940c1476</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga3fbaae392de9b7cb4e91ba94476a82b2a95064fa64fd40d716c1a5f84f384d1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BusNameWatcherFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga724a510e53ed4df47411bcdbaf680c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga724a510e53ed4df47411bcdbaf680c85a01d4229ebcfb078416d859d7f242504a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUS_NAME_WATCHER_FLAGS_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga724a510e53ed4df47411bcdbaf680c85a08efa890043aa8a8930a0c7b79b9872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_NAME_WATCHER_FLAGS_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga724a510e53ed4df47411bcdbaf680c85a01d4229ebcfb078416d859d7f242504a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUS_NAME_WATCHER_FLAGS_AUTO_START</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga724a510e53ed4df47411bcdbaf680c85a08efa890043aa8a8930a0c7b79b9872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab628e70b1d028b3bc9b02b0d3b8acf2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab628e70b1d028b3bc9b02b0d3b8acf2da6a46299fc0a721de0bed46063ba484de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab628e70b1d028b3bc9b02b0d3b8acf2da6a46299fc0a721de0bed46063ba484de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DriveStartStopType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga148d2356238c5c8f809dcbd58341cc2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da01961d00b61f87fb25ba3001a042db5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_SHUTDOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da59acd7106146af052b9bc164ac85d1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_NETWORK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da24f499a4eee0fb59870d42089fc8cc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_MULTIDISK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da7f6a48659447fa2b3b0c1c9d0520e2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DRIVE_START_STOP_TYPE_PASSWORD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2daf1a4c886e6d77d3a1f3d8b864a536da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_STOP_TYPE_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da01961d00b61f87fb25ba3001a042db5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_STOP_TYPE_SHUTDOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da59acd7106146af052b9bc164ac85d1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_STOP_TYPE_NETWORK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da24f499a4eee0fb59870d42089fc8cc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_STOP_TYPE_MULTIDISK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2da7f6a48659447fa2b3b0c1c9d0520e2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DRIVE_START_STOP_TYPE_PASSWORD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga148d2356238c5c8f809dcbd58341cc2daf1a4c886e6d77d3a1f3d8b864a536da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EmblemOrigin</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f2c8f757fdeb91ca48c0bc8184f9270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a8f8b573b5755138f1da852121c33027d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_DEVICE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a6bcc4f7fda6aee37062db66a6abe66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_LIVEMETADATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a746b49f22653188190760d6724f00c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMBLEM_ORIGIN_TAG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a8ca854f52478785f462472c706aefa2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMBLEM_ORIGIN_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a8f8b573b5755138f1da852121c33027d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMBLEM_ORIGIN_DEVICE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a6bcc4f7fda6aee37062db66a6abe66c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMBLEM_ORIGIN_LIVEMETADATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a746b49f22653188190760d6724f00c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMBLEM_ORIGIN_TAG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7f2c8f757fdeb91ca48c0bc8184f9270a8ca854f52478785f462472c706aefa2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamByteOrder</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga87dea9b56fed9c0bca0f8426fb57781e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ea18117d3d82013605e0200837278b61ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ead7d652c4c3be181175e6b3ce0b8a6b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_BYTE_ORDER_HOST_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ea4ee0fe7768cdcaa1bfe30a866e597fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ea18117d3d82013605e0200837278b61ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ead7d652c4c3be181175e6b3ce0b8a6b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_BYTE_ORDER_HOST_ENDIAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga87dea9b56fed9c0bca0f8426fb57781ea4ee0fe7768cdcaa1bfe30a866e597fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataStreamNewlineType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2de111fe308aff763fb98a39bc507267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_LF</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a2984664a935bd2803f9f8efb525ab1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a684a76a8c6470952cf17935c0e6d4c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_CR_LF</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a668ad4c9993ae7201cad988ccb9f9265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA_STREAM_NEWLINE_TYPE_ANY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a07aa934ff2e202ae347600466895d634</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_NEWLINE_TYPE_LF</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a2984664a935bd2803f9f8efb525ab1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_NEWLINE_TYPE_CR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a684a76a8c6470952cf17935c0e6d4c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_NEWLINE_TYPE_CR_LF</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a668ad4c9993ae7201cad988ccb9f9265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_STREAM_NEWLINE_TYPE_ANY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2de111fe308aff763fb98a39bc507267a07aa934ff2e202ae347600466895d634</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ErrorEnum</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0f8fdeead92e74b78d209cb3c3e9f0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a5e3b0eb6eb38bf1342ce5a4c9606f356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a928085256c8f4171f89c16467cef09f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_EXISTS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa76f98ee8236387105561eb4bf77beb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_IS_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a9f7cd5a8fb4aa6345053f9961b874038</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa5fec148678564e2023df7b53d50c9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_EMPTY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9afbfba1b09e13581bcd0402252db52d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_REGULAR_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a2c1396217736a060abb061c3dc269e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SYMBOLIC_LINK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a34b4e6152da510f8d684794b18eafe7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTABLE_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac173a4d0b093d7a300c174cb0cf13c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FILENAME_TOO_LONG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac5d65526b0857236121cbec59987c86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_FILENAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a4ca1e7e635d440502c0813f25e6084be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_LINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ab0c0ce6f8e921736cdb65a779c0768c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NO_SPACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a86f5827b1ae1b261cbddf00f71454915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_ARGUMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a1c3061f60b6a9727c6a3744c88958bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PERMISSION_DENIED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a8019a704e0a9fabe3e8b44ee69191d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a477f0f000a133a1feedf1e5416a6f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_MOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a56686b9f8e5a7eedc20a89972e3777ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ALREADY_MOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a626ed5c0dce8ef6a18c833ae9db71fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CLOSED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae7313313612066105fb25db853b1e42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANCELLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a46652c381d5526249d2dda56e2a17ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PENDING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9affc2cbf1f51937113b30913b9cb6c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_READ_ONLY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae352afac4e302313322790c1e29b81ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CANT_CREATE_BACKUP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ab8d384a4fad05264115d8fadf0547301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WRONG_ETAG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ad657aea40b074288e9c900e7e69437d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TIMED_OUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9af787888ef318260a585a0f5c5972216e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_RECURSE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac7ca279bc1d661c99e06f261524cf7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_BUSY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac1415b61e1ca7fcaaf4c19e70e8122ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_BLOCK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a27e322ccabb17c587cf8864726ea6e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a1581f86c5ace871883be4de888430e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_WAS_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae0f97278ba9282b38b4de0a05bc5d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_WOULD_MERGE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9adca3fdecf1ced0a415524bb4cfb3d795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_FAILED_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9afb689dce93dde45d46c904264b573066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_TOO_MANY_OPEN_FILES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a3980c7e0a1a8455014d5458b9ecb3908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NOT_INITIALIZED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a6060d3a6486bbdfc990a9d170eb455b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_ADDRESS_IN_USE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a095f4a7afc3730ba98087653c017359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PARTIAL_INPUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a13b0991e7f680cb26000503fbef5e276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_INVALID_DATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a9231020ca5c55492068f63509f97a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_DBUS_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a407272633f88d5a6c6d1417cc14ded33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_HOST_UNREACHABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aececd4b9ba395f5e84783b06ef4a0897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_NETWORK_UNREACHABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aef5c677bff929885bc324078616ed25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_CONNECTION_REFUSED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a40e0e50a16d26bb7f56faf1b59fe72fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a8dde753c2fd93d88b8db1fa106e15810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_AUTH_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a4acba8699323c5e37b00680d19bdd09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NEED_AUTH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a78f18ddd783a9677eaa2bb8ab2c91098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR_PROXY_NOT_ALLOWED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa7f67d3a26397d742fbd2e607fded969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a5e3b0eb6eb38bf1342ce5a4c9606f356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a928085256c8f4171f89c16467cef09f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_EXISTS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa76f98ee8236387105561eb4bf77beb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_IS_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a9f7cd5a8fb4aa6345053f9961b874038</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa5fec148678564e2023df7b53d50c9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_EMPTY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9afbfba1b09e13581bcd0402252db52d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_REGULAR_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a2c1396217736a060abb061c3dc269e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_SYMBOLIC_LINK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a34b4e6152da510f8d684794b18eafe7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_MOUNTABLE_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac173a4d0b093d7a300c174cb0cf13c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_FILENAME_TOO_LONG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac5d65526b0857236121cbec59987c86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_INVALID_FILENAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a4ca1e7e635d440502c0813f25e6084be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_TOO_MANY_LINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ab0c0ce6f8e921736cdb65a779c0768c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NO_SPACE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a86f5827b1ae1b261cbddf00f71454915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_INVALID_ARGUMENT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a1c3061f60b6a9727c6a3744c88958bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PERMISSION_DENIED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a8019a704e0a9fabe3e8b44ee69191d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a477f0f000a133a1feedf1e5416a6f5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_MOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a56686b9f8e5a7eedc20a89972e3777ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_ALREADY_MOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a626ed5c0dce8ef6a18c833ae9db71fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_CLOSED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae7313313612066105fb25db853b1e42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_CANCELLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a46652c381d5526249d2dda56e2a17ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PENDING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9affc2cbf1f51937113b30913b9cb6c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_READ_ONLY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae352afac4e302313322790c1e29b81ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_CANT_CREATE_BACKUP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ab8d384a4fad05264115d8fadf0547301</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_WRONG_ETAG</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ad657aea40b074288e9c900e7e69437d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_TIMED_OUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9af787888ef318260a585a0f5c5972216e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_WOULD_RECURSE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac7ca279bc1d661c99e06f261524cf7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_BUSY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ac1415b61e1ca7fcaaf4c19e70e8122ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_WOULD_BLOCK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a27e322ccabb17c587cf8864726ea6e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_HOST_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a1581f86c5ace871883be4de888430e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_HOST_WAS_NOT_FOUND</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9ae0f97278ba9282b38b4de0a05bc5d02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_WOULD_MERGE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9adca3fdecf1ced0a415524bb4cfb3d795</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_FAILED_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9afb689dce93dde45d46c904264b573066</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_TOO_MANY_OPEN_FILES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a3980c7e0a1a8455014d5458b9ecb3908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NOT_INITIALIZED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a6060d3a6486bbdfc990a9d170eb455b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_ADDRESS_IN_USE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a095f4a7afc3730ba98087653c017359b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PARTIAL_INPUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a13b0991e7f680cb26000503fbef5e276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_INVALID_DATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a9231020ca5c55492068f63509f97a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_DBUS_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a407272633f88d5a6c6d1417cc14ded33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_HOST_UNREACHABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aececd4b9ba395f5e84783b06ef4a0897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_NETWORK_UNREACHABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aef5c677bff929885bc324078616ed25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_CONNECTION_REFUSED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a40e0e50a16d26bb7f56faf1b59fe72fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PROXY_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a8dde753c2fd93d88b8db1fa106e15810</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PROXY_AUTH_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a4acba8699323c5e37b00680d19bdd09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PROXY_NEED_AUTH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9a78f18ddd783a9677eaa2bb8ab2c91098</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR_PROXY_NOT_ALLOWED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0f8fdeead92e74b78d209cb3c3e9f0e9aa7f67d3a26397d742fbd2e607fded969</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketFamily</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0ba69e14ad979bf9b2073ad122e38d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a287dfaac297cc0158f78d7d62949ccaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_UNIX</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a853383527365f9b02a474b76b96e2bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV4</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48aa4f0f6d511f5e4969c7fa77b7780c91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_FAMILY_IPV6</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a8077081b5558ee5a35497749c4f4901c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_FAMILY_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a287dfaac297cc0158f78d7d62949ccaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_FAMILY_UNIX</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a853383527365f9b02a474b76b96e2bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_FAMILY_IPV4</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48aa4f0f6d511f5e4969c7fa77b7780c91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_FAMILY_IPV6</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0ba69e14ad979bf9b2073ad122e38d48a8077081b5558ee5a35497749c4f4901c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsAuthenticationMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga202fd408b6a0f198ae5aaf0f0c6a69b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1ae3a709f72bff4ca0adbc36d49d6e2891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUESTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1aaf03c67ce13f8d905572f97e781764c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_AUTHENTICATION_REQUIRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1abfc5b144439cddd1fadb93c066b99e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_AUTHENTICATION_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1ae3a709f72bff4ca0adbc36d49d6e2891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_AUTHENTICATION_REQUESTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1aaf03c67ce13f8d905572f97e781764c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_AUTHENTICATION_REQUIRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga202fd408b6a0f198ae5aaf0f0c6a69b1abfc5b144439cddd1fadb93c066b99e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsCertificateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac96df88bc70e763045de6aa47e87039a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_UNKNOWN_CA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa98a385c8a2cf058bc5182b0a8c07858f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_BAD_IDENTITY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa983c138ae99bc87ea58f1840769f1cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_NOT_ACTIVATED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa8744ccf77d19a9d2c5af7f966dc38af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_EXPIRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa5e034499825279b27efccd0dddd826ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_REVOKED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa26bbf49d7bc44f6c35f6a30d3aa30e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_INSECURE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aaf9f40312c3e17ce74f64a50f4f5579a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_GENERIC_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aab53070585e278156a017731e68e535d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_CERTIFICATE_VALIDATE_ALL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aabbde1fd6573ffd3c1a233e95f7a9401f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_UNKNOWN_CA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa98a385c8a2cf058bc5182b0a8c07858f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_BAD_IDENTITY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa983c138ae99bc87ea58f1840769f1cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_NOT_ACTIVATED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa8744ccf77d19a9d2c5af7f966dc38af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_EXPIRED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa5e034499825279b27efccd0dddd826ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_REVOKED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aa26bbf49d7bc44f6c35f6a30d3aa30e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_INSECURE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aaf9f40312c3e17ce74f64a50f4f5579a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_GENERIC_ERROR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aab53070585e278156a017731e68e535d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_CERTIFICATE_VALIDATE_ALL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac96df88bc70e763045de6aa47e87039aabbde1fd6573ffd3c1a233e95f7a9401f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileQueryInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2cb7bdea61353f0999607785abd032c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2cb7bdea61353f0999607785abd032c0a25937649b891bc6e25fd3b102e961fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2cb7bdea61353f0999607785abd032c0a111136a309875440d7b9a065e9d413fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_QUERY_INFO_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2cb7bdea61353f0999607785abd032c0a25937649b891bc6e25fd3b102e961fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_QUERY_INFO_NOFOLLOW_SYMLINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2cb7bdea61353f0999607785abd032c0a111136a309875440d7b9a065e9d413fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCreateFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga500a44e123fd4c578f8af9ddef2f7601</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601aa91626c845b45a4432c5c5be9f62db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_PRIVATE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601a561d151d8be5524e68d0316baa6b3346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_CREATE_REPLACE_DESTINATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601aa1edf0c05c6e4c84340200dcb4b981bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_CREATE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601aa91626c845b45a4432c5c5be9f62db63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_CREATE_PRIVATE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601a561d151d8be5524e68d0316baa6b3346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_CREATE_REPLACE_DESTINATION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga500a44e123fd4c578f8af9ddef2f7601aa1edf0c05c6e4c84340200dcb4b981bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileCopyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga08edc09a45449b136b27493647d4ecbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea2de95276b80f5261e9de761e98987273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_OVERWRITE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbeaa739f5a86205d73bc68ef06e59943b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_BACKUP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbeae4bdca31f92ed16bc4fbdcfed03f51d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NOFOLLOW_SYMLINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea28d4e03c13c33cc8ee846dd74720b8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_ALL_METADATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea1a0416eaa1df264399127dcfc8787cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_NO_FALLBACK_FOR_MOVE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea8ba81fce89dc9733ef050a366cbc36ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_COPY_TARGET_DEFAULT_PERMS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea7c03196a0667919cbbbb692058351d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea2de95276b80f5261e9de761e98987273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_OVERWRITE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbeaa739f5a86205d73bc68ef06e59943b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_BACKUP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbeae4bdca31f92ed16bc4fbdcfed03f51d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_NOFOLLOW_SYMLINKS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea28d4e03c13c33cc8ee846dd74720b8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_ALL_METADATA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea1a0416eaa1df264399127dcfc8787cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_NO_FALLBACK_FOR_MOVE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea8ba81fce89dc9733ef050a366cbc36ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_COPY_TARGET_DEFAULT_PERMS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga08edc09a45449b136b27493647d4ecbea7c03196a0667919cbbbb692058351d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga469f795e9a4dddb2421c0e5568be6649</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649ab14b94920f9dd257f04b8d2089ee7f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_WATCH_MOUNTS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649a125f456ecc2055488ae714ae03cafb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_SEND_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649a4c5d097f39bf10d159e87432e41e0051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649ab14b94920f9dd257f04b8d2089ee7f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_WATCH_MOUNTS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649a125f456ecc2055488ae714ae03cafb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_SEND_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga469f795e9a4dddb2421c0e5568be6649a4c5d097f39bf10d159e87432e41e0051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5e79fa284e14b18d180741cd1c03d0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a8e0404fb81075c7cb1947d391710df6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a42aaefaf1350bc75f0c59232f5427a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BYTE_STRING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a1b5ce4388a50031998a766297c6809b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_BOOLEAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a4ee1a4a4232372cc3ee901c60b04252b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT32</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a1e05d09eec38684188623c5d66c80adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT32</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a8610920b627048811f8c83ff68815726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_UINT64</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a6146f4603d261931c170501119ecdf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_INT64</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a4420e14e2d76c78878480484b4824178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_OBJECT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2abf2a03fdfe8fab868b52e7e2e31681cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_TYPE_STRINGV</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a137ca5ab57718ba53c1425d8adb529ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a8e0404fb81075c7cb1947d391710df6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_STRING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a42aaefaf1350bc75f0c59232f5427a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_BYTE_STRING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a1b5ce4388a50031998a766297c6809b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_BOOLEAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a4ee1a4a4232372cc3ee901c60b04252b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_UINT32</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a1e05d09eec38684188623c5d66c80adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_INT32</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a8610920b627048811f8c83ff68815726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_UINT64</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a6146f4603d261931c170501119ecdf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_INT64</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a4420e14e2d76c78878480484b4824178</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_OBJECT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2abf2a03fdfe8fab868b52e7e2e31681cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_TYPE_STRINGV</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5e79fa284e14b18d180741cd1c03d0e2a137ca5ab57718ba53c1425d8adb529ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeInfoFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8687b5c14230bb3e46a1df7341941f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a4cfd632fc68ef8907454ebf50e25ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WITH_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a1f079dce29168aefc78ffb19913a2f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a31dfc4cee76aa4982b2f0b59df32d8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_INFO_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a4cfd632fc68ef8907454ebf50e25ddea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_INFO_COPY_WITH_FILE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a1f079dce29168aefc78ffb19913a2f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8687b5c14230bb3e46a1df7341941f16a31dfc4cee76aa4982b2f0b59df32d8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileAttributeStatus</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae926022c51a79fd117e4bfd100c25b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_UNSET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a7d19f425a83dab27da6d3ad11622a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_SET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a163950d9d163bc80175e3fa34e917c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_ATTRIBUTE_STATUS_ERROR_SETTING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a146c1891a87c49ee9be95e76a92c3e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_STATUS_UNSET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a7d19f425a83dab27da6d3ad11622a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_STATUS_SET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a163950d9d163bc80175e3fa34e917c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_ATTRIBUTE_STATUS_ERROR_SETTING</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggae926022c51a79fd117e4bfd100c25b29a146c1891a87c49ee9be95e76a92c3e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dcba95023d74c47bba3fd0a07f8824c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_NOT_KNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cac879cd353f56a22f65c3267801953e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_REGULAR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cac07760305b8906edfcf52dbd6f7910d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca681e4e1f442347d50c9b0cd8ca03bb2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SYMBOLIC_LINK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca08dca91a6a47ea3a139b0c6afb0954c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SPECIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca5fad9f1f4585f8114f830eedea41e7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_SHORTCUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cab853c5774004a86eab09106b60046106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TYPE_MOUNTABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824caa7c0c584a463721afb2f2bb57b27c2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_NOT_KNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cac879cd353f56a22f65c3267801953e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_REGULAR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cac07760305b8906edfcf52dbd6f7910d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_DIRECTORY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca681e4e1f442347d50c9b0cd8ca03bb2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_SYMBOLIC_LINK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca08dca91a6a47ea3a139b0c6afb0954c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_SPECIAL</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824ca5fad9f1f4585f8114f830eedea41e7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_SHORTCUT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824cab853c5774004a86eab09106b60046106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TYPE_MOUNTABLE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7dcba95023d74c47bba3fd0a07f8824caa7c0c584a463721afb2f2bb57b27c2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileMonitorEvent</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabd42cf9877b5b6556bb18b7fd6b6dd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a2fa81d8cdfbb69372e2167267cc6bde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CHANGES_DONE_HINT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81af04e689b125341be3cc8425bed360fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_DELETED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81aa99e4d03a648a9b43d43885b76b4db82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_CREATED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a946dcf9aeeb8d22fb9631a912aeac751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a0b265fec915bf4d5ce4547c8645d4b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_PRE_UNMOUNT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a9a904f978d9e725f84e12cc276faddae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_UNMOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a4e75e84f300f88c83e4a1b301e146a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_MONITOR_EVENT_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a0466268ddfa83be0291871084ddfb31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_CHANGED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a2fa81d8cdfbb69372e2167267cc6bde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_CHANGES_DONE_HINT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81af04e689b125341be3cc8425bed360fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_DELETED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81aa99e4d03a648a9b43d43885b76b4db82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_CREATED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a946dcf9aeeb8d22fb9631a912aeac751</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a0b265fec915bf4d5ce4547c8645d4b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_PRE_UNMOUNT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a9a904f978d9e725f84e12cc276faddae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_UNMOUNTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a4e75e84f300f88c83e4a1b301e146a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_MONITOR_EVENT_MOVED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggabd42cf9877b5b6556bb18b7fd6b6dd81a0466268ddfa83be0291871084ddfb31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IOStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga753fc539949f2db7d1114d7ebd5b45b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a7b1a45311a56b0c11fdff4b0df695e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM1</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a22914455cb2534a75a853e5564eba76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_CLOSE_STREAM2</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a00bf8969ca2d582d6913536f35d8ab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_STREAM_SPLICE_WAIT_FOR_BOTH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a7f402c3e269984b27fc10df6e35bc6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STREAM_SPLICE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a7b1a45311a56b0c11fdff4b0df695e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STREAM_SPLICE_CLOSE_STREAM1</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a22914455cb2534a75a853e5564eba76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STREAM_SPLICE_CLOSE_STREAM2</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a00bf8969ca2d582d6913536f35d8ab73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_STREAM_SPLICE_WAIT_FOR_BOTH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga753fc539949f2db7d1114d7ebd5b45b7a7f402c3e269984b27fc10df6e35bc6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountUnmountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fa1b6a8eabf8f88e4cf6d611a4cff44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9fa1b6a8eabf8f88e4cf6d611a4cff44a30cece3099822da07d5d74cc97fa4ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_UNMOUNT_FORCE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9fa1b6a8eabf8f88e4cf6d611a4cff44af26cca6f4bb36f76811bfe7d057459b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_UNMOUNT_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9fa1b6a8eabf8f88e4cf6d611a4cff44a30cece3099822da07d5d74cc97fa4ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_UNMOUNT_FORCE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9fa1b6a8eabf8f88e4cf6d611a4cff44af26cca6f4bb36f76811bfe7d057459b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountMountFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5484bace25c932fd4c7354259e138814</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_MOUNT_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5484bace25c932fd4c7354259e138814a4fa5bb6630552f216d543dc14bdce93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_MOUNT_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga5484bace25c932fd4c7354259e138814a4fa5bb6630552f216d543dc14bdce93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AskPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac807da73d3b89a6dc16dad028244e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_PASSWORD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecad72247e662c964b1f34673a2a9dac864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_USERNAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6eca9176d669bd3832b47af7938ef2ab97da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_NEED_DOMAIN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecaae4ff232f33015b669577b05c275ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_SAVING_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecad9bf425560cd436e897cbdd1a7326673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASK_PASSWORD_ANONYMOUS_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecab54fea4ff83c960b28733ed9576b9ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASK_PASSWORD_NEED_PASSWORD</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecad72247e662c964b1f34673a2a9dac864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASK_PASSWORD_NEED_USERNAME</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6eca9176d669bd3832b47af7938ef2ab97da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASK_PASSWORD_NEED_DOMAIN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecaae4ff232f33015b669577b05c275ac64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASK_PASSWORD_SAVING_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecad9bf425560cd436e897cbdd1a7326673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASK_PASSWORD_ANONYMOUS_SUPPORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac807da73d3b89a6dc16dad028244e6ecab54fea4ff83c960b28733ed9576b9ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PasswordSave</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafec517575c8f8d6f48433c86da52448f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_NEVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fae6580664da5e48500434f40e24bcd77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_FOR_SESSION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fa9d5e5d263f2bfcdce02dfb8f25efb411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PASSWORD_SAVE_PERMANENTLY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fa9f15426c23241e58661b559b12276323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PASSWORD_SAVE_NEVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fae6580664da5e48500434f40e24bcd77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PASSWORD_SAVE_FOR_SESSION</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fa9d5e5d263f2bfcdce02dfb8f25efb411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PASSWORD_SAVE_PERMANENTLY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggafec517575c8f8d6f48433c86da52448fa9f15426c23241e58661b559b12276323</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MountOperationResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac479310f8df4ad5909d717caec261076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076ad8feb3f3ff8deb01bb211593ea0c4f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_ABORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076ab5edd0f1001b94ee66b725fb6425e7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MOUNT_OPERATION_UNHANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076a2c4507658069f86a1ef208a0967c9aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_OPERATION_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076ad8feb3f3ff8deb01bb211593ea0c4f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_OPERATION_ABORTED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076ab5edd0f1001b94ee66b725fb6425e7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOUNT_OPERATION_UNHANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggac479310f8df4ad5909d717caec261076a2c4507658069f86a1ef208a0967c9aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OutputStreamSpliceFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7c30d67e5f60d33fdcd3053123feea74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74a876a19654c7cb1019edd78cffe3afe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_SOURCE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74abd49ddb3a5960d177ae417c5d12271e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTPUT_STREAM_SPLICE_CLOSE_TARGET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74a9db82f2020730fac9daa9acb5e7b57ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OUTPUT_STREAM_SPLICE_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74a876a19654c7cb1019edd78cffe3afe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OUTPUT_STREAM_SPLICE_CLOSE_SOURCE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74abd49ddb3a5960d177ae417c5d12271e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OUTPUT_STREAM_SPLICE_CLOSE_TARGET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7c30d67e5f60d33fdcd3053123feea74a9db82f2020730fac9daa9acb5e7b57ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResolverRecordType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7305dc7c78903a65491f3a505f55e966</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SRV</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966aa0afd7bfc16a7c111ba3b0a6b88391de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_MX</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a21572cdd12f1a919508651a947c3aa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_TXT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a19ccdd603d3c373f3d8fba9e1344b546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_SOA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a5db9e277fde116ff3fff9888c05fe1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESOLVER_RECORD_NS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a59cb691a20f2b6f5b3a72a6f4cfe0193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESOLVER_RECORD_SRV</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966aa0afd7bfc16a7c111ba3b0a6b88391de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESOLVER_RECORD_MX</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a21572cdd12f1a919508651a947c3aa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESOLVER_RECORD_TXT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a19ccdd603d3c373f3d8fba9e1344b546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESOLVER_RECORD_SOA</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a5db9e277fde116ff3fff9888c05fe1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RESOLVER_RECORD_NS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga7305dc7c78903a65491f3a505f55e966a59cb691a20f2b6f5b3a72a6f4cfe0193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SettingsBindFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab41e4379084ff04d75104143d99ecf61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_DEFAULT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a41372eebf93040ac104d262c6a3b8c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a484abc3c0c33806a268658ce29bebf0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_SET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a6172535d7b8251c2d9a71349009c7c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_NO_SENSITIVITY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a6c4e629d64904ff9d28b2759dfa4c5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_GET_NO_CHANGES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a382cd16f79bcbb69f07fdefe495fda3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SETTINGS_BIND_INVERT_BOOLEAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61abc19c1dfe8b0580fa94f1d9953281dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_DEFAULT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a41372eebf93040ac104d262c6a3b8c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_GET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a484abc3c0c33806a268658ce29bebf0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_SET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a6172535d7b8251c2d9a71349009c7c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_NO_SENSITIVITY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a6c4e629d64904ff9d28b2759dfa4c5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_GET_NO_CHANGES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61a382cd16f79bcbb69f07fdefe495fda3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SETTINGS_BIND_INVERT_BOOLEAN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab41e4379084ff04d75104143d99ecf61abc19c1dfe8b0580fa94f1d9953281dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2302a45e052658e343729e0be2fd3310</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310af00948af66fed3af5d79f488132ec25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_STREAM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a449568cb50c6f759abbbccb633bbb266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_DATAGRAM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a7993070a3b3641e7da05c984ee08c8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_TYPE_SEQPACKET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a0395a0a66018835d7b4e07d68c731002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_TYPE_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310af00948af66fed3af5d79f488132ec25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_TYPE_STREAM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a449568cb50c6f759abbbccb633bbb266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_TYPE_DATAGRAM</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a7993070a3b3641e7da05c984ee08c8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_TYPE_SEQPACKET</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga2302a45e052658e343729e0be2fd3310a0395a0a66018835d7b4e07d68c731002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketProtocol</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4e8932017a600fffa5e8e6b5f6ea5b16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a91f25c6679ad3343806e22be00be76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_DEFAULT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a1d6e5ce50037a49690304ba884287172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_TCP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a369c33c8920f267e70d3e3a52022267e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_UDP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a5b2d9d1efcdedddf53020cc15646b82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_PROTOCOL_SCTP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16ae91b17d6dc2e813157474586fd2cc697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_PROTOCOL_UNKNOWN</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a91f25c6679ad3343806e22be00be76d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_PROTOCOL_DEFAULT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a1d6e5ce50037a49690304ba884287172</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_PROTOCOL_TCP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a369c33c8920f267e70d3e3a52022267e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_PROTOCOL_UDP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16a5b2d9d1efcdedddf53020cc15646b82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_PROTOCOL_SCTP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga4e8932017a600fffa5e8e6b5f6ea5b16ae91b17d6dc2e813157474586fd2cc697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SocketMsgFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11f5e6b2ba2903428e93d947c82fa04e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04ea42d10ab5264669fd457d89aec658534b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_OOB</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04eadabfe2785d08635e7a452b5ed9a0ad90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_PEEK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04eafc3b9cd1274817ab778671fef134998e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SOCKET_MSG_DONTROUTE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04ea19c8b9aa25981e200a297b25bf7d8e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_MSG_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04ea42d10ab5264669fd457d89aec658534b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_MSG_OOB</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04eadabfe2785d08635e7a452b5ed9a0ad90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_MSG_PEEK</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04eafc3b9cd1274817ab778671fef134998e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SOCKET_MSG_DONTROUTE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga11f5e6b2ba2903428e93d947c82fa04ea19c8b9aa25981e200a297b25bf7d8e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsRehandshakeMode</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9730680b829b7745e4f36c1540761f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_NEVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fa9af9f2d06ca5f6cd91be8bc4a2fa8b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_SAFELY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fac2866c377fe1f249c41e8c26b85b02be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_REHANDSHAKE_UNSAFELY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fa20f623db6a65ddb60e5aa968367ca82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_REHANDSHAKE_NEVER</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fa9af9f2d06ca5f6cd91be8bc4a2fa8b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_REHANDSHAKE_SAFELY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fac2866c377fe1f249c41e8c26b85b02be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_REHANDSHAKE_UNSAFELY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga9730680b829b7745e4f36c1540761f3fa20f623db6a65ddb60e5aa968367ca82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseVerifyFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa46a3fc37c1e5566af625d7db3123a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_VERIFY_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa46a3fc37c1e5566af625d7db3123a4ba5ac8f0f41536388e47b926e757b90bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_DATABASE_VERIFY_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaa46a3fc37c1e5566af625d7db3123a4ba5ac8f0f41536388e47b926e757b90bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsDatabaseLookupFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0de6ee7362d49df4f068b6214b93a076</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0de6ee7362d49df4f068b6214b93a076a7144d28525ff1b4600a6d8870637f875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_DATABASE_LOOKUP_KEYPAIR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0de6ee7362d49df4f068b6214b93a076a142bd0ed95f5a5c87a86a5198493146e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_DATABASE_LOOKUP_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0de6ee7362d49df4f068b6214b93a076a7144d28525ff1b4600a6d8870637f875</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_DATABASE_LOOKUP_KEYPAIR</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga0de6ee7362d49df4f068b6214b93a076a142bd0ed95f5a5c87a86a5198493146e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsInteractionResult</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga13ffba1819a4d780593c50266d7a9484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_UNHANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a8ef2a62abf7126dc678cf029272a531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a47de6094d31048c163dc40b075c1a9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_INTERACTION_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a940ea76b90b8004b0ef78fdb73b73a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_INTERACTION_UNHANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a8ef2a62abf7126dc678cf029272a531d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_INTERACTION_HANDLED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a47de6094d31048c163dc40b075c1a9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_INTERACTION_FAILED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga13ffba1819a4d780593c50266d7a9484a940ea76b90b8004b0ef78fdb73b73a68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TlsPasswordFlags</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8ac18330be9383471445ba62336a929a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aab8563a91318eace3564eacfee2727a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_RETRY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaa3099aa3d6f510147d6a491e7775df05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_MANY_TRIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaf692bd740394fe3932c94154239af3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TLS_PASSWORD_FINAL_TRY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaf520c0da4b759313c561f7c301153997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_PASSWORD_NONE</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aab8563a91318eace3564eacfee2727a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_PASSWORD_RETRY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaa3099aa3d6f510147d6a491e7775df05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_PASSWORD_MANY_TRIES</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaf692bd740394fe3932c94154239af3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TLS_PASSWORD_FINAL_TRY</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gga8ac18330be9383471445ba62336a929aaf520c0da4b759313c561f7c301153997</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ZlibCompressorFormat</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab247c6072c566753c8b9762f66e84c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_ZLIB</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02a181feace4b1bd5491d1da53010e0d971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_GZIP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02aa85aa6f87d9dc3d49b7e34da80beb617</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZLIB_COMPRESSOR_FORMAT_RAW</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02a75f4d83d040e9d836caac026fd6dcce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZLIB_COMPRESSOR_FORMAT_ZLIB</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02a181feace4b1bd5491d1da53010e0d971</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZLIB_COMPRESSOR_FORMAT_GZIP</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02aa85aa6f87d9dc3d49b7e34da80beb617</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZLIB_COMPRESSOR_FORMAT_RAW</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggab247c6072c566753c8b9762f66e84c02a75f4d83d040e9d836caac026fd6dcce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnixSocketAddressType</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf842f4597d522154407164deb4906c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eacbcb34974d31c9e26d07fb9db9b3f99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2ea573889cd547518c11ef89e1fc21e777c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_PATH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eaea6d57abf5ccd825dbe0c65d9e7507bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eac0167eefe10e133890b05cb89f5c074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2ea9923f24ac5011397a78fa23c2367dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_SOCKET_ADDRESS_INVALID</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eacbcb34974d31c9e26d07fb9db9b3f99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_SOCKET_ADDRESS_ANONYMOUS</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2ea573889cd547518c11ef89e1fc21e777c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_SOCKET_ADDRESS_PATH</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eaea6d57abf5ccd825dbe0c65d9e7507bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2eac0167eefe10e133890b05cb89f5c074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ggaf842f4597d522154407164deb4906c2ea9923f24ac5011397a78fa23c2367dcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac2ae439cef63de06f97ed8454b67ec32</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1f0f1235c25f5552c8a1467697bd66d3</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f582e5773b615c406ceb28b695b7015</anchor>
      <arglist>(AppInfoCreateFlags lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga302df8457f421e75eaea25a67cb63c19</anchor>
      <arglist>(AppInfoCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaccda1b3df9583689a62a3add6715f640</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga179d7c2a3d709c7a8e4a0796a8b5e833</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AppInfoCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5dac484830e37250c0942325fb4b85a3</anchor>
      <arglist>(AppInfoCreateFlags &amp;lhs, AppInfoCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga44ea3f3bc13b4f365f8b2423a9ac6697</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69ea1b280906db58e7da69dfa8e967f4</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf78c94e5bddf6119131fc2925e25e4db</anchor>
      <arglist>(ApplicationFlags lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabfccee773f2311c38a00aa0d1ecbe3ac</anchor>
      <arglist>(ApplicationFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f8cf604f276081f162dfe2e78e5e76a</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga786d1f08e7b472c5474df9bf6ebe1a1b</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58651ff4ec0b8e4ca0fd0e868e8f09cf</anchor>
      <arglist>(ApplicationFlags &amp;lhs, ApplicationFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9f956fe651a1375f27fc596f1ade2ab6</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaed01900163c4efb6fc8b072ace92a4ff</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24dddaf6719113c40e5c8ec9694cf05</anchor>
      <arglist>(ConverterFlags lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1ca85527dd594724362f3a6e8d1ad466</anchor>
      <arglist>(ConverterFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga006555992fbb516f1cea93b762566516</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga09dd687bd08618a59a4a0128521f12ca</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConverterFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga65a84e2cc906ff5924d3eb0af66b56b2</anchor>
      <arglist>(ConverterFlags &amp;lhs, ConverterFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaf256ad4e34a802125934a3602918182</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga47883a2d57f11392fdd1a6ef43f89e68</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2f5d5bbe79d36aeb8946a9d1985ba5d4</anchor>
      <arglist>(CallFlags lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab7d0c01e24d4734b302439ac13db5c01</anchor>
      <arglist>(CallFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf7f8b92419edde75f68a2e9fe3f6b207</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4d35c282233dc1001a6bee144e8927cf</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CallFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45397d95ea49e8d13e45968ec55056f0</anchor>
      <arglist>(CallFlags &amp;lhs, CallFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabf0261e49d127ddbb20121314bd691e5</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaaf4fb4e9f9f05db8aef1d7dd7b74e683</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeceb9495694a6f85d0aa34cd76593f4</anchor>
      <arglist>(ConnectionFlags lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9cd54aecd4fcf0476f3908ced65ea3da</anchor>
      <arglist>(ConnectionFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga531539a51f6fa26100e00cf79b3ef074</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga252e252c236c2cd7d5a34accd1dc35b2</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ConnectionFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3e32a633be5fab9f1e2ea91e4c203b2</anchor>
      <arglist>(ConnectionFlags &amp;lhs, ConnectionFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga517437c24b21c9390d68d06252c38ee0</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae80621518706162a86658592b7254795</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacb730118932c2c089205040b6f99bb5e</anchor>
      <arglist>(SendMessageFlags lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2a7223d208f91d9a6d618b24bcd120ad</anchor>
      <arglist>(SendMessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2c8dbd2f0ee82cc71309daaa7708fac2</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0742f8360fae7f654c500754b638940b</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SendMessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga47c0490b33800886410984ebc8ade747</anchor>
      <arglist>(SendMessageFlags &amp;lhs, SendMessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa71251f9666e33b79ca3a35b14c56b75</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga61dba33469f7b98cbdcbf4a70a3587f5</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab061e0a24b6b7d57c6eb05bb8a311f9b</anchor>
      <arglist>(SignalFlags lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8a995c39db7f285301ce89935348568b</anchor>
      <arglist>(SignalFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga92a022e06267a8e614e64124f3ac27ae</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab844f8ad8ade34198b73813de9388fdc</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SignalFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga67e999a4414637b197248e62958c6528</anchor>
      <arglist>(SignalFlags &amp;lhs, SignalFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae3a3d5e31e4ddea76624f7681614397c</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga229d4d6025379fde0b915a35249bd64a</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga515f8f33ea2499547311998d503cbdf1</anchor>
      <arglist>(SubtreeFlags lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa24aa533cfbe9d4988c40466d5105272</anchor>
      <arglist>(SubtreeFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga48af5a57b27520a781794b0d491b2c18</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga341722664bb6d009b4260f25e1a076f8</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SubtreeFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa9e879e08b368bda95e12b464c246461</anchor>
      <arglist>(SubtreeFlags &amp;lhs, SubtreeFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3162179be3acb867fc1b7d66a9e2d27c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga65cedd2790b1b312c81429f5799f279f</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga36f6ee825d38230e4fb1d264550f385c</anchor>
      <arglist>(PropertyInfoFlags lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac36330aaaa3f5436abef2c04ddd76edb</anchor>
      <arglist>(PropertyInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9d77c45a262381a023550c672f4aad30</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadb34a8bfac33bb32b93ea41c9799be2b</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>PropertyInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga332bf3aa8cd16de4a9d563ac60aa34c6</anchor>
      <arglist>(PropertyInfoFlags &amp;lhs, PropertyInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7dab85256a6961f9edbd479b8641a840</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae7a5b60247b0d28c0c53b5be0781dcb4</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaedaa6d5aed08b463298ef9a29abf6611</anchor>
      <arglist>(MessageFlags lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga45fb183fd7a0d4e6c9c741e4f3544449</anchor>
      <arglist>(MessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa7c77f89fbc6749eeb2580b0708385ef</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4c1e428d82aca56d2e425af99965db45</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf94c469e7db6e0c1e018f472976c0e6b</anchor>
      <arglist>(MessageFlags &amp;lhs, MessageFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa381c473b1bd9ba61f55980bdfbd64a7</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga167ba2e96e38e978775fdac3bd4671c4</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf407a0b027a0f5ac46690ccf96a1d16b</anchor>
      <arglist>(CapabilityFlags lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaac055f4785da200653bdbc7d228d158d</anchor>
      <arglist>(CapabilityFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffb83150531f7af44949645e6d7bd632</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba92d42345a5ba2677e740657f36a804</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf6b4bae2281097b7020ebd2c78460a88</anchor>
      <arglist>(CapabilityFlags &amp;lhs, CapabilityFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6ee165e164ee5ac76fcae97d149b0096</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae95dbcb5c39a041199a14ef692ff190e</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga66e5ff30c50eda68a6e9c9856ff24929</anchor>
      <arglist>(BusNameOwnerFlags lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76ae3c19edb95730bbf26a8bd2fe41fc</anchor>
      <arglist>(BusNameOwnerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1082185ea5b919ef8e797f5a4a2cbd84</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8e3b00479dfbf4a7ead540cf77612f13</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameOwnerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8256822b508991b36784f8633f5a2a41</anchor>
      <arglist>(BusNameOwnerFlags &amp;lhs, BusNameOwnerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa322b87fce3af1fdea7133a127088be1</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabc62c83be1688dcba26adbf8142f0e9c</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga86dfb1bb4f81af398e3d9e46c7bcfdd6</anchor>
      <arglist>(ProxyFlags lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3ea4f184a1f3477087c578f74b88fbf2</anchor>
      <arglist>(ProxyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace0563138240e17842fa5110f70e6c38</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8f874bf89ca3dc93aabc8b99c9a24c76</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga996098077862478d47a82bae84847f4e</anchor>
      <arglist>(ProxyFlags &amp;lhs, ProxyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7955ba627de857db9a98ba002092c825</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad22f2b21e846e019f1287d912029522b</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11ec0042ba646a016c058c8ead2cd18d</anchor>
      <arglist>(ServerFlags lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5ab28f60229aa0c887d0c1ec05ec286f</anchor>
      <arglist>(ServerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac1a3b9ca9c65cb38a478ac3df387983a</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabefa22f57f50d6504dbd41d325552293</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>ServerFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3104ed754362062701f00c4aa9ee2bec</anchor>
      <arglist>(ServerFlags &amp;lhs, ServerFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga11d69d7cecb05e6a1ab2e29802001c0d</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4e9cd27579fc08b486bf6963e0e48828</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3c6767c920f33ef0acf5273d87d44191</anchor>
      <arglist>(BusNameWatcherFlags lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7f09a804dfb04f4a256cfb22cac05378</anchor>
      <arglist>(BusNameWatcherFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3cde961e2c29d55871ad3cb2b4d0f7b1</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8a9b2721d1528e637f826498f93486be</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>BusNameWatcherFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga606fa2da2a5a44a01e084c959fd1cca2</anchor>
      <arglist>(BusNameWatcherFlags &amp;lhs, BusNameWatcherFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga38b31de13d1949c2acb9255bdc858767</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7c4f37b1ef92224ac50016d49c95bf00</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae75239258d148626dc4b0048b55a4c44</anchor>
      <arglist>(DriveStartFlags lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf625621abb6c686d449c3f3c43aee02c</anchor>
      <arglist>(DriveStartFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga994648faf5be7fd03bc1929554044dac</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga77b3f8597aac448c2dd860f204e32b8f</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>DriveStartFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1c0e50bc08aaf61dc1fbbe786c5e6b33</anchor>
      <arglist>(DriveStartFlags &amp;lhs, DriveStartFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga22c0194e634b597f4dcec67551a7ca9b</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1380174558e94de7c9c8b36b56332550</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9fd8470137571e8eef6bc1af201a5867</anchor>
      <arglist>(TlsCertificateFlags lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8fd13816125414ef8f52696da2c1e0ca</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69a2edc59567e8ddc43d718a01ca11a3</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9b25fecd6c1e006bac8f384156bfe80a</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7960cd8bde85baaf03372bf57015d123</anchor>
      <arglist>(TlsCertificateFlags &amp;lhs, TlsCertificateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaba7574ea0b336541af125d4eb9423088</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafd57fe410ba970bb3cb78eb1c9942aeb</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacae77e10133f304081534efa76be4a52</anchor>
      <arglist>(FileQueryInfoFlags lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42422c40ea08ec4f0ad74c8e2a657eb5</anchor>
      <arglist>(FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac59d6f3b6a2adca24d2763ba2af99a02</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga203c5d02679e3aa4c78080fb9269b1f9</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileQueryInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga55adc6ecb3a15cb850b30bafb7eb9248</anchor>
      <arglist>(FileQueryInfoFlags &amp;lhs, FileQueryInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga431f17ab67ccea562ea556c10df6bd27</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4a52dbf7b71137a0d00ef49c0eb163a6</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab4d3e010c78b9f5ca2673210269b999d</anchor>
      <arglist>(FileCreateFlags lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga703109997bbde3b6a686dd36ec9d35ad</anchor>
      <arglist>(FileCreateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4f6ed1c3e6f2a3a7d394b62f3166df7a</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga43d71b19c0e673331de89e1b1d84679b</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCreateFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga045123aaa65f69e2a76a488d1024e34d</anchor>
      <arglist>(FileCreateFlags &amp;lhs, FileCreateFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0b841b27ceceb381f08e1bc5cf929eb1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabb1d7757198076b221ba038b1d3ae841</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga29b016e93e7a6dfdebc4f9f6e4fbf1c1</anchor>
      <arglist>(FileCopyFlags lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70312f36423a73fbf663c64824631dc8</anchor>
      <arglist>(FileCopyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabb9c03e9bbf1ef698696dc08b0d36371</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad2f22009032ff6f0975c5a5701ca061d</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileCopyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga514b3929469585c9cfc222ef2daf4fea</anchor>
      <arglist>(FileCopyFlags &amp;lhs, FileCopyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3fab04e51aeff08aaf235f038e50d72</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf801bc2b57ef5136eba961cdcd68e2e6</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga81b5df359bd6a61df867af8274d182ae</anchor>
      <arglist>(FileMonitorFlags lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga501c69e3e5101b66d2e5fb8181229b2c</anchor>
      <arglist>(FileMonitorFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8af51d7b4e7b78d3f0153090674470aa</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae45bc889f678f9f87ff04596b0de7d1a</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileMonitorFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaffa032f65b2c0270e12fe6bafa5c36bf</anchor>
      <arglist>(FileMonitorFlags &amp;lhs, FileMonitorFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3779f0623bf9380fb656028b9bc88323</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga31f3ea9c0f0f3b94b829cff51a483da3</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gade49ce26dfa73eb2eb9fc56534ac1319</anchor>
      <arglist>(FileAttributeInfoFlags lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9150f4358ab779fd1267151c4ee84a46</anchor>
      <arglist>(FileAttributeInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadebdfefd85c32a1b626bce9ae251138b</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4d263feb91a513421902169e234bb8c3</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf8c86d142fcb81426bc429d51da4f7d9</anchor>
      <arglist>(FileAttributeInfoFlags &amp;lhs, FileAttributeInfoFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadd33991052b8c7b6d70b6afd4c4b3850</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gac4e194f1ff1b6337b2001528aad67bc9</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga798437d9bba38467f6bf1eb02935f618</anchor>
      <arglist>(IOStreamSpliceFlags lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga69033ae6dd34521e4951f4a5ca14dfff</anchor>
      <arglist>(IOStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gadeb0ed62d112c12255260042ff0205dd</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab782a172a6c7d8b540c720f86fd5ad44</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>IOStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad48e0449d3be29a9e01e27982d62fad6</anchor>
      <arglist>(IOStreamSpliceFlags &amp;lhs, IOStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga42e2925c2e192eb3e9b71b727e676644</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9ab823e8ba96b485774da1e93c7e576f</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga76909c76363248e860a94b20dad18ad9</anchor>
      <arglist>(MountUnmountFlags lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gace7018ee540582a709530dce1dd9191a</anchor>
      <arglist>(MountUnmountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga2d1ab6ef14833802a3615e54b8115aa8</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae1e6af7ffa613a35d110daedd6671389</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountUnmountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga6a939c0dc5f5b25dbad5cdb7a1848184</anchor>
      <arglist>(MountUnmountFlags &amp;lhs, MountUnmountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1248f40d35ae4fb70d74c5df295cb4ae</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa459981a578b6e5ee443681687f9a777</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga02952bdc6c064b144e6667e326618c2d</anchor>
      <arglist>(MountMountFlags lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga74223d1de9c9db1c53429a6d23671d4f</anchor>
      <arglist>(MountMountFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab40e5b0bc75d3308e8cb78606c4eb18</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga24a69ca68eff0e99a80c1c73f32c304e</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>MountMountFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad941eb418369c3f95f0b5c046e7d868d</anchor>
      <arglist>(MountMountFlags &amp;lhs, MountMountFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab444ed2fbe1877464f469a64d9107e36</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8a45caccd402223c595e5a160f15f030</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf0b37f457e38844832549486982ed1d8</anchor>
      <arglist>(AskPasswordFlags lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga993dba04647b8f34ad72e86cbc88ba34</anchor>
      <arglist>(AskPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01e87fab2e1906ac5eafa153747ceae9</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga90dc37e16010e611eed712a21ee0a787</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>AskPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8e3411a2fa7d7f016953b5f84dbad4c1</anchor>
      <arglist>(AskPasswordFlags &amp;lhs, AskPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaef500d088ea9d123dc514f71c4c67b1d</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga39f9583f05c94f16ce6228b52663e4e4</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga14a79b6dee4f711a22b52bf259539e34</anchor>
      <arglist>(OutputStreamSpliceFlags lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafcded381df7535fe7c41bb8f8c21c169</anchor>
      <arglist>(OutputStreamSpliceFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga5602d53794a62a9e823005e6f9aed428</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab363845e9d7769f38c78dc7cc55d9db6</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>OutputStreamSpliceFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga01f192f0f1b9f66047d603780c458e6e</anchor>
      <arglist>(OutputStreamSpliceFlags &amp;lhs, OutputStreamSpliceFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8cd5ffb873f77345b515bf4ec2522ad7</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf9c3bdce8aa4209b368419a8a4f374a7</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gabe81d29f028b8bfb85c189c2471a290d</anchor>
      <arglist>(SettingsBindFlags lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3faf22f64ae075a5465b7827001101d2</anchor>
      <arglist>(SettingsBindFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga0299f50197606d69c0f306224760fcdb</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga93c66617507b97c4ce9d5e7b99bd0c04</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SettingsBindFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga3f4f0e3823c4d8ce3470b656913fb4e0</anchor>
      <arglist>(SettingsBindFlags &amp;lhs, SettingsBindFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaa085ca077592487a87d8339ce3324166</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga7483601181aa5da2467e986408d0136a</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaadfaf5e3a456218e23ca0ee13ac3db3d</anchor>
      <arglist>(SocketMsgFlags lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf31952f93c501b25194ad46df8994752</anchor>
      <arglist>(SocketMsgFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga62b41279cd63908c0736e96f868e832e</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga43e4984d2489a21f44a4ab961bf98541</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>SocketMsgFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab892045d6e9cf73dc96593ead692145b</anchor>
      <arglist>(SocketMsgFlags &amp;lhs, SocketMsgFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga39e0d92d55656c2a2632f98636265306</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga36f857562dfaa5bedb2f11bdcb713be2</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8368dd487149972f892a91422e9bd33b</anchor>
      <arglist>(TlsDatabaseVerifyFlags lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaf2f0b0b2463b3e547db1a4b85603bd36</anchor>
      <arglist>(TlsDatabaseVerifyFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga23b4f358bf1da65d761823c0c14601a3</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad2d6cac92ff624db2f477f5563ebe73b</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseVerifyFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gacf39fa96fbecf1a1eb1c265794b79c03</anchor>
      <arglist>(TlsDatabaseVerifyFlags &amp;lhs, TlsDatabaseVerifyFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga17032c82d6f99398b325773ecfbb8864</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga8801450685cbe42b72c590b4deaa0f47</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gaab103c2de8ca0e1abc5afb44a06ab7c7</anchor>
      <arglist>(TlsDatabaseLookupFlags lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gae83d0705d3e1b6a1c1214802fd0413a7</anchor>
      <arglist>(TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga70adec8becf6acbe4d1f3a7d32512647</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4c1f3085e84fdd58ee013b45e624da10</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsDatabaseLookupFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gad91ca8afd55f164582fc2182414a567d</anchor>
      <arglist>(TlsDatabaseLookupFlags &amp;lhs, TlsDatabaseLookupFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator|</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gafbbaf640a1d770dc0bd46380763952e8</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator&amp;</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga58b2a4408d61617ba6bf6322aec97b3f</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator^</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga18b59057b4efe6dfb55345e198c2dd4a</anchor>
      <arglist>(TlsPasswordFlags lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>operator~</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga9c6566499acc6dbfb73ad14225ebaff4</anchor>
      <arglist>(TlsPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>gab3d9e43f9d3f79660d3eba8402cc3c7d</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga4b9578c71d74bf9ba422b1b906c766cf</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags &amp;</type>
      <name>operator^=</name>
      <anchorfile>group__giommEnums.html</anchorfile>
      <anchor>ga1bf68c82d083fab33b612fe7756b7d56</anchor>
      <arglist>(TlsPasswordFlags &amp;lhs, TlsPasswordFlags rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ChecksumType</name>
    <filename>classChecksumType.html</filename>
  </compound>
  <compound kind="class">
    <name>throw_allocator_base</name>
    <filename>classthrow__allocator__base.html</filename>
  </compound>
  <compound kind="class">
    <name>types_traits</name>
    <filename>classtypes__traits.html</filename>
  </compound>
  <compound kind="class">
    <name>adaptor_type</name>
    <filename>classadaptor__type.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Gio</name>
    <filename>namespaceGio.html</filename>
    <namespace>Gio::DBus</namespace>
    <class kind="class">Gio::Action</class>
    <class kind="class">Gio::ActionGroup</class>
    <class kind="class">Gio::ActionMap</class>
    <class kind="class">Gio::AppLaunchContext</class>
    <class kind="class">Gio::AppInfo</class>
    <class kind="class">Gio::Application</class>
    <class kind="class">Gio::ApplicationCommandLine</class>
    <class kind="class">Gio::AsyncInitable</class>
    <class kind="class">Gio::AsyncResult</class>
    <class kind="class">Gio::BufferedInputStream</class>
    <class kind="class">Gio::BufferedOutputStream</class>
    <class kind="class">Gio::Cancellable</class>
    <class kind="class">Gio::CharsetConverter</class>
    <class kind="class">Gio::Converter</class>
    <class kind="class">Gio::ConverterInputStream</class>
    <class kind="class">Gio::ConverterOutputStream</class>
    <class kind="class">Gio::Credentials</class>
    <class kind="class">Gio::DataInputStream</class>
    <class kind="class">Gio::DataOutputStream</class>
    <class kind="class">Gio::Drive</class>
    <class kind="class">Gio::Emblem</class>
    <class kind="class">Gio::EmblemedIcon</class>
    <class kind="class">Gio::Error</class>
    <class kind="class">Gio::ResolverError</class>
    <class kind="class">Gio::File</class>
    <class kind="class">Gio::FileAttributeInfo</class>
    <class kind="class">Gio::FileAttributeInfoList</class>
    <class kind="class">Gio::FileEnumerator</class>
    <class kind="class">Gio::FileIcon</class>
    <class kind="class">Gio::FileAttributeMatcher</class>
    <class kind="class">Gio::FileInfo</class>
    <class kind="class">Gio::FileInputStream</class>
    <class kind="class">Gio::FileIOStream</class>
    <class kind="class">Gio::FileMonitor</class>
    <class kind="class">Gio::FilenameCompleter</class>
    <class kind="class">Gio::FileOutputStream</class>
    <class kind="class">Gio::FilterInputStream</class>
    <class kind="class">Gio::FilterOutputStream</class>
    <class kind="class">Gio::Icon</class>
    <class kind="class">Gio::InetAddress</class>
    <class kind="class">Gio::InetSocketAddress</class>
    <class kind="class">Gio::Initable</class>
    <class kind="class">Gio::InputStream</class>
    <class kind="class">Gio::IOStream</class>
    <class kind="class">Gio::LoadableIcon</class>
    <class kind="class">Gio::MemoryInputStream</class>
    <class kind="class">Gio::MemoryOutputStream</class>
    <class kind="class">Gio::MenuAttributeIter</class>
    <class kind="class">Gio::MenuLinkIter</class>
    <class kind="class">Gio::Menu</class>
    <class kind="class">Gio::MenuItem</class>
    <class kind="class">Gio::MenuModel</class>
    <class kind="class">Gio::Mount</class>
    <class kind="class">Gio::MountOperation</class>
    <class kind="class">Gio::NetworkAddress</class>
    <class kind="class">Gio::NetworkService</class>
    <class kind="class">Gio::OutputStream</class>
    <class kind="class">Gio::PollableInputStream</class>
    <class kind="class">Gio::PollableOutputStream</class>
    <class kind="class">Gio::Proxy</class>
    <class kind="class">Gio::ProxyAddress</class>
    <class kind="class">Gio::ProxyResolver</class>
    <class kind="class">Gio::RemoteActionGroup</class>
    <class kind="class">Gio::Resolver</class>
    <class kind="class">Gio::ResourceError</class>
    <class kind="class">Gio::Seekable</class>
    <class kind="class">Gio::Settings</class>
    <class kind="class">Gio::SimpleAction</class>
    <class kind="class">Gio::SimpleActionGroup</class>
    <class kind="class">Gio::Socket</class>
    <class kind="class">Gio::SocketAddress</class>
    <class kind="class">Gio::SocketAddressEnumerator</class>
    <class kind="class">Gio::SocketClient</class>
    <class kind="class">Gio::SocketConnectable</class>
    <class kind="class">Gio::SocketConnection</class>
    <class kind="class">Gio::SocketControlMessage</class>
    <class kind="class">Gio::SocketListener</class>
    <class kind="class">Gio::SocketService</class>
    <class kind="class">Gio::SrvTarget</class>
    <class kind="class">Gio::TcpConnection</class>
    <class kind="class">Gio::ThreadedSocketService</class>
    <class kind="class">Gio::ThemedIcon</class>
    <class kind="class">Gio::TlsCertificate</class>
    <class kind="class">Gio::TlsClientConnection</class>
    <class kind="class">Gio::TlsConnection</class>
    <class kind="class">Gio::TlsDatabase</class>
    <class kind="class">Gio::TlsFileDatabase</class>
    <class kind="class">Gio::TlsInteraction</class>
    <class kind="class">Gio::TlsPassword</class>
    <class kind="class">Gio::TlsServerConnection</class>
    <class kind="class">Gio::Volume</class>
    <class kind="class">Gio::VolumeMonitor</class>
    <class kind="class">Gio::ZlibDecompressor</class>
    <class kind="class">Gio::ZlibCompressor</class>
    <class kind="class">Gio::DesktopAppInfo</class>
    <class kind="class">Gio::UnixConnection</class>
    <class kind="class">Gio::UnixCredentialsMessage</class>
    <class kind="class">Gio::UnixFDList</class>
    <class kind="class">Gio::UnixFDMessage</class>
    <class kind="class">Gio::UnixInputStream</class>
    <class kind="class">Gio::UnixOutputStream</class>
    <class kind="class">Gio::UnixSocketAddress</class>
    <member kind="typedef">
      <type>sigc::slot&lt; void, Glib::RefPtr&lt; AsyncResult &gt; &amp; &gt;</type>
      <name>SlotAsyncReady</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>aecaa02709f9ab83fa2b36d2571665cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ListHandle&lt; Gio::SrvTarget, SrvTargetListTraits &gt;</type>
      <name>ListHandle_SrvTarget</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a1b4ed5afd24e359d3ba6bde02c9e90be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MenuAttribute</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_ACTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa86f1a371d32e9fab99744d963e04f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_LABEL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa4ae64afc7fe6c6660c51c6f486c040cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_ATTRIBUTE_TARGET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa58117bdf3a42e57648845407823a3219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MENU_ATTRIBUTE_ACTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa86f1a371d32e9fab99744d963e04f5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MENU_ATTRIBUTE_LABEL</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa4ae64afc7fe6c6660c51c6f486c040cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MENU_ATTRIBUTE_TARGET</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7df84578d37eccbf86072c8fc85b217aa58117bdf3a42e57648845407823a3219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MenuLink</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_LINK_SECTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2aa6356ca52c0aeb0abea871c903fa2b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MENU_LINK_SUBMENU</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2a58cf137e0477ed185f5ff32ae84dcedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MENU_LINK_SECTION</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2aa6356ca52c0aeb0abea871c903fa2b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MENU_LINK_SUBMENU</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a4febebe134c8e141020c6c253711e0d2a58cf137e0477ed185f5ff32ae84dcedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>hostname_to_ascii</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a77e0b4b95d9ab0d2c2b21e79117ec77a</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>hostname_to_unicode</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a80496bf6a136c6b3a4d995849d0665af</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_non_ascii</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a0d47bc4dc47f82a829ee5e00e13987f3</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_ascii_encoded</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a58e3cc92152717d75a9f5cf4d260815d</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hostname_is_ip_address</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a19e270aea166c888515b97d0623f4309</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_equals</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a496c304f10ea79f1a20137bf614466e8</anchor>
      <arglist>(const Glib::ustring &amp;type1, const Glib::ustring &amp;type2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_a</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a278fca288c7c2e9995ebb64ce43a6ffd</anchor>
      <arglist>(const Glib::ustring &amp;type, const Glib::ustring &amp;supertype)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_is_unknown</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>aee153086e7cd9f1ab0509cbf81ec06e9</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_description</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ac065cb89d7abb5935cfa225e3d41a732</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_get_mime_type</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a92f379d45658e14f3ec1bec3da71d908</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_icon</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7972eb82466bf972bbbf5b58f6344e84</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>content_type_get_symbolic_icon</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ab55b0d4ac98b1aa0edab98afa66a8b6c</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>content_type_can_be_executable</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ae5107c4e00134d7d9df3b755a74f9494</anchor>
      <arglist>(const Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_from_mime_type</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ad5432d8f8c8ba74f8157af9d49930b4c</anchor>
      <arglist>(const Glib::ustring &amp;mime_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a48e8afbb7f1724efcdebd7c028da5560</anchor>
      <arglist>(const std::string &amp;filename, const guchar *data, gsize data_size, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>content_type_guess</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>ae46acc46aa5c33a8d1feda6a675fefa9</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;data, bool &amp;result_uncertain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>content_type_guess_for_tree</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a7e82e215c402edca50219020e43d08ec</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::ustring &gt;</type>
      <name>content_types_get_registered</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>aeae6cd7ee77a7b1c52443116f346b476</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGio.html</anchorfile>
      <anchor>a28171d5c1584ce2516ba05b13cee04ec</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Action</name>
    <filename>classGio_1_1Action.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Action</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a4d9e7b20f048a9687645febc90ba77ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad7cd56bdda4c3128f15a65b125838bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a1d93ffed2823714491005f8ef26cd1a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a1347f184c1699d4ca11a646adc8915e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_parameter_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aa2b2004f825c07e971d8c19f5d73ea93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_state_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a2f8889d7aebdf63b5b660602dd5e6bd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_state_hint</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ac4d13c6c0c73b6b89110d1fb77a1aaa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enabled</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad18df46509b43cc647c7af5b1436c644</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a0ce64d4b90bc15d363b48fe4b1ee4d9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a8337a39d2a7546831f4a567670614886</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a37d9b6b05160bfb4044659330287f9b2</anchor>
      <arglist>(const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a066748f4a413caab2013b92cee2a31de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_name</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a12abd796b38f0888f0782d88401da938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_parameter_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aea8077cd9896726dc3d1f7deac1197dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ad7abdb4e5a6a3eb8941756eac836af27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_state_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>aec9a1d46db1c239804cc8acc7923aeb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_name_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a49381270fc99336ba74f07fdaff4a60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_parameter_type_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a1c1cf8c9a1411886b8200876655dd58a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_state_type_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a9a108c6228ba75165fd284bc438d519e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_state_hint_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a6a002bf97328fb5e59f100f8628b076d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_enabled_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a8308a5e9e7f62af0c910c55ca2272119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_state_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a34e7a455d18b8aa71525b217cedfbcf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_state_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a8d838854ab0998b8efdd3bb810d4429f</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_vfunc</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a7e8062660469df51e34198ce39d63d59</anchor>
      <arglist>(const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>ae05bf6a4ce0f0992c2ad01429d13f9f7</anchor>
      <arglist>(const Glib::Interface_Class &amp;interface_class)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a00253b22a76f751f1627865451cbc404</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a8e12a7a3e0281e28798326ad65e3560c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a969e9396f75132a9577428f4fa932d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Interface.html</anchorfile>
      <anchor>a70a443071a69d3372c2cdd7128a91ed1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>aab599d3eec4b4a9ddc95ccdc6100053d</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property_value</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a5e30750441b92f0246c9d4ece95fc8a0</anchor>
      <arglist>(const Glib::ustring &amp;property_name, Glib::ValueBase &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ad37844f7ea2c0091a22d011e04c48820</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const PropertyType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_property</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a5f894c9c36ad391fdc85552af67a8530</anchor>
      <arglist>(const Glib::ustring &amp;property_name, PropertyType &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_property_changed</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>adc6c1e8f094275114d6e2c3ef3a33f98</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_property_changed_with_return</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a896d7773c00bd2dcd310c861282ee8d1</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeze_notify</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a6e9e13b75f116c20212d318204ce8ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thaw_notify</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a1bd8ea7bd8c4084ade6b3c27dddf06a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a896a8a5db20043ea82956e3ef4b9c4ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a3234b8ffb2a35b927e2978c8f3bfbfe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a4c6efc18be8cb9c56e58fc0bd20fafbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a778a94181132976bbfb0519793f3b32e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a9b2a5eb93102f1849e5419016e22a15f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>ada7d2f0ad7524c3addb5f8bc3956f005</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a508f2dd4565bcc8afdbf92835a8e668d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a6dab71d4d3af45977f0931e7ebf9fddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Action &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Action.html</anchorfile>
      <anchor>a51714129b90228d8921685cd2783f62f</anchor>
      <arglist>(GAction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ActionGroup</name>
    <filename>classGio_1_1ActionGroup.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionGroup</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a1ab7a30ac8bd8c5a6ce58bfb9665c14e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>affe86c6498361e348fe33be39be04ab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a5ca7db192b98be14cd12002918c43acd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a84d4936c728e51217ad7c018aff9735a</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_actions</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>afa8e5b5751cdd43ace13ce529bbe3d5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a19e7a3c5f3e49adbf92cac1e2b6966a7</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a28aa7ffebc5e1880cfb57f5fb0ff1d3f</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a896c0f50d6c4fd4cc17b22d363b7ad81</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acfc61788cb9bc2b4b923763f0483b51e</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantType &amp;parameter_type, Glib::VariantBase &amp;state_hint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a788c4e56d0077bd8662968ccdd86e2b6</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>af4678fc74b915ecd70a36fa911276105</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantType &amp;state_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abdc51e18b1a5cb871db9194d636ea055</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint, Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a6cd39881204a98dcf766f65d630c6e02</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool &amp;enabled, Glib::VariantBase &amp;state_hint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_action_enabled</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ae37272d155dd39689ff9fbf14e88a5d2</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_action_parameter_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>adeff709d2c6545425dccdc1cb8db970d</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>get_action_state_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aae87a5a748cfcf9d49a0e998364f44c3</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>get_action_state_hint</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a00076dd913902d8bb2059f304cb75bfd</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_action_state</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a94819b439c950b7d295d5bd30e565d94</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_action_state</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a4488ac862cf56001be245ccf4638d85c</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_action</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acb1430eed8062a856c32b8e48f41ebe6</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a81e3d3f5123763a1a65e920deb7e1677</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ae4fb6c4dca623abffd51178fc87cc8b2</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a9c9d5b01a16210ee40d2ee078c589253</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a5a303e38b81629b094e7290f366a40ac</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::ustring &amp; &gt;</type>
      <name>signal_action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a17c569a317549b9b5ad43e5bd1fb08d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, const Glib::ustring &amp;, bool &gt;</type>
      <name>signal_action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a7377172c504f5c1cc77ef470e7ad6203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::ustring &amp; &gt;</type>
      <name>signal_action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a8d6545755151ee7148aee898cf3bc126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, const Glib::ustring &amp;, const Glib::VariantBase &amp; &gt;</type>
      <name>signal_action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ab712b9c47e43ef1b2769793e39a108ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>has_action_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aa879afef3b8fa9935bf685384cad6c37</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::ustring &gt;</type>
      <name>list_actions_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aaefd0ffc294ccc020e18706d4f6b8506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>get_action_enabled_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a3c4555915ba58b36770a081414706be7</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_action_parameter_type_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a52f73cf9371ca92259812700cbbbcb54</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantType</type>
      <name>get_action_state_type_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ada28868b0d1ca45f035125098a3feb66</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_action_state_hint_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>adefc14fee2bbda347daa09bc2539f987</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::VariantBase</type>
      <name>get_action_state_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a0d0c03e41f072ff8277b072d61a110e8</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_action_state_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>aa621807bd6c8ce09466a03f4b4d7cf04</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_action_vfunc</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a0dca67391676bf10e3e4bd167dfeba62</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantBase &amp;parameter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a19d09dd80a81909b8927ebe631de486a</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abb04677c5e63eb413f111339ea385568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>ab609e11f0c2f1fc50b7a1fa44a28e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_added</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a1f2650b664d5147b80e90648cd765267</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_enabled_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a9a7e4f8b6320487ef072937f1c617f29</anchor>
      <arglist>(const Glib::ustring &amp;action_name, bool enabled)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_removed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>abfd41d6c32940285f651aaa09aede3d9</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_action_state_changed</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>acb99c786b38bc8b55d3b9d82df6a9853</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ActionGroup.html</anchorfile>
      <anchor>a428112d0fff62242c0d4e3f31f076f8c</anchor>
      <arglist>(GActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ActionMap</name>
    <filename>classGio_1_1ActionMap.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionMap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ab2258a99d2e74bad302b62eb28be685c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GActionMap *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a7733b9ec4c8ad7f36887661e1c5118d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GActionMap *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>abc5e2ebd8c4d3470fb1ad863fe5833e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>aca337f535c1db1d435bbf79d9e7d3c0e</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Action &gt;</type>
      <name>lookup_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a6d57243d90ce36096deddb26bb6ef5e4</anchor>
      <arglist>(const Glib::ustring &amp;action_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a3cd54f21b2f817b279c6e47154610852</anchor>
      <arglist>(const Glib::RefPtr&lt; Action &gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_action</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>afd8bcc4209fae2afbb0aba3f90c8bb0d</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a73863b440e8a07406dbd6c00812a4921</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a79a05019f8c79a4a6b9ab9e1837f8488</anchor>
      <arglist>(Glib::RefPtr&lt; Action &gt; action) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove_action_vfunc</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>af9666b169b2fc68093950d8aacf1cf28</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a6e390dc3b7c4bb4422fbfafbb3190173</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a24704a273680f1947ea09b72a6268146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionMap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>ad507af7d6d501b3e3e23f7838fd093e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ActionMap &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ActionMap.html</anchorfile>
      <anchor>a58108146b22f328cb2153f3bcbd0c07b</anchor>
      <arglist>(GActionMap *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AppLaunchContext</name>
    <filename>classGio_1_1AppLaunchContext.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppLaunchContext</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a11fe8b5d8eb6de7c6d1a19d77d366c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GAppLaunchContext *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a41ed3abab4ad83b765974dfa6cb66067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAppLaunchContext *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>aa05603f4fe010e75df7ca950183b9224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GAppLaunchContext *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ac14e1569a0a5a81f846c0e11e7109011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setenv</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ab96bed2c0a5ad1ab135a54585da697c4</anchor>
      <arglist>(const Glib::ustring &amp;variable, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetenv</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a36b7dbc0301cebdf9d3dcf5ec589db04</anchor>
      <arglist>(const Glib::ustring &amp;variable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_environment</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>afe35a0f3b2a6b29c82ba9fbb9ec9a421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>acb9df3c4d0856cf54725a0ec1baf29cb</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;info, const Glib::ListHandle&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_startup_notify_id</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>ac76a58054fccd2cfc6f3554e1d4b012a</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;info, const Glib::ListHandle&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launch_failed</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>aeb5fe002776ad4f040b6be49fa25b46a</anchor>
      <arglist>(const std::string &amp;startup_notify_id)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a0e6581bcbcc6197cca07df24bb91c492</anchor>
      <arglist>(const QueryQuark &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>afff7a375a862f3f899daaa99710122fa</anchor>
      <arglist>(const Quark &amp;key, void *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a1febe3bae2dd71756e98e523cd33c1b4</anchor>
      <arglist>(const Quark &amp;key, void *data, DestroyNotify notify)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>aada5b50844bda7ee02bed0ae2a715c00</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>steal_data</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ab454f71bd74403b0cc46d3cbbedd6b0e</anchor>
      <arglist>(const QueryQuark &amp;quark)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>accc93a5b33f2f4b4609796c8f4db94c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppLaunchContext &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a9e0b952987932c15f4f8ac7ae6d2e046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AppLaunchContext</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a04c6b83e39f16c6ae04ad10c387e2cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ad43f7c5ad0336e1eb3af622392a112eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a6d72588496bd7ac03f72420021fb94a5</anchor>
      <arglist>(const Glib::ConstructParams &amp;construct_params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a6f490eeaeb71db673c36799a0f729be5</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a5ae4319439a3a03d8f803fb5a27f12df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a27d3451d9ca28d6a2f00838d7c56d545</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>ad4ef18214894c6874579313ab21d1018</anchor>
      <arglist>(const char *custom_type_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a3d59b4d85b0ee72a727e6b2e1b31a2ff</anchor>
      <arglist>(const std::type_info &amp;custom_type_info)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual</type>
      <name>~ObjectBase</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a42ac047a06c36c2d9c75f7cffc537dc4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classGlib_1_1ObjectBase.html</anchorfile>
      <anchor>a3faafb14c4f0ca60fbf0f5f5c4d549d0</anchor>
      <arglist>(GObject *castitem)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AppLaunchContext &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AppLaunchContext.html</anchorfile>
      <anchor>a3cda3d0a285e3ad87f1c94142b04a688</anchor>
      <arglist>(GAppLaunchContext *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>ae4dea9a8dc611d6e4400a5b6a3cb4e7f</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>DestroyNotify</name>
      <anchorfile>classGlib_1_1Object.html</anchorfile>
      <anchor>a1d8d9f3c19b59eda96c40beca8d520e0</anchor>
      <arglist>)(gpointer data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AppInfo</name>
    <filename>classGio_1_1AppInfo.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppInfo</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acf86d510216c430be4735d1f7b13113e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ab31e9bca0208159f0be42227397b8a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a5e52c62432a61c5380bd5dc553898251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>create_duplicate</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a62a10631b3b06b42fc5cf7620938af41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a1803e87dccb051f4fe69cb10277c6c2e</anchor>
      <arglist>(const Glib::RefPtr&lt; AppInfo &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_id</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a3d929d82e4d7ae91f4d8904f91e7a1c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a450c7e5a59919a66f73133749c318987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display_name</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aa600e49454d101fb69e5de5d9a1dd9c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_description</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>af7d89372dcf32cc6c25a9545a4ccffa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_executable</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a06a665d4d812adb2eeb5c05d4c91c266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_commandline</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ad389c830c25f58b5ec99d247a3517939</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a35a0c2c10ee787cc5d1d4ac7773bab0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a16fe789da6c7f5c8c023255b2faff226</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a17b0e327594d813e1e89ff477e2afb7b</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a1e86424b7f3b683618431f26b734dae6</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a546f6d9bbb65765e8f6b7fffb767048d</anchor>
      <arglist>(const std::vector&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a564a73066abb31e967b47996bfcb7ae1</anchor>
      <arglist>(const std::vector&lt; Glib::RefPtr&lt; Gio::File &gt; &gt; &amp;files)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a8bb534c3834b17ff80edb046ba78250e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_files</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a6ba8d06c3f3d99f907ae1aadbd8b24da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a23a6ee89635a2b24468c73f137ad8de4</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris, GAppLaunchContext *launch_context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a9ca37403c57e21962961e57d532f0528</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uris</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>abd6088290069f9a94ced5e4c6ef4291e</anchor>
      <arglist>(const Glib::ListHandle&lt; std::string &gt; &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0d9b5ad79a7f8d567d6eb04181da0e8e</anchor>
      <arglist>(const std::string &amp;uris, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>launch_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a7fe4ef78cda00dbdb7a1f9c6f7038e2b</anchor>
      <arglist>(const std::string &amp;uris)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>should_show</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a7b374a9120926615fc7454afab6452e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_delete</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ae9c4b3e178815a1fbbd60abe69d9e0f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>do_delete</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a634d024dee3e412df7dc794a280a438e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_default_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a59cefa47ef35940d5c0b74a396728808</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_default_for_extension</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a33b6e19f73a30f1dde7913282aa20aeb</anchor>
      <arglist>(const std::string &amp;extension)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0dedbcba19457176114948c80efdfbe4</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_remove_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a150146aaba23bfa208d5c7100d986ee9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove_supports_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aa1e9856c39e12c5ad1770299e391b6c0</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_supported_types</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>aa1e950d1367b398f55f40e3f5bed5d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_as_last_used_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a0a4ac1c4cec460b52eb18ac3029dd851</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a12bbf2ad90f8915f46c3a49b6354e8ec</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>acd648d51cd85afa83a57c71e0679cbcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>create_from_commandline</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ac77db461b3142c9459c8c1a211672bf9</anchor>
      <arglist>(const std::string &amp;commandline, const std::string &amp;application_name, AppInfoCreateFlags flags)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ListHandle&lt; Glib::RefPtr&lt; AppInfo &gt; &gt;</type>
      <name>get_all</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a21c3fa9bf0f708f3cf52ec38eb837c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ListHandle&lt; Glib::RefPtr&lt; AppInfo &gt; &gt;</type>
      <name>get_all_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a05bb9f05067d8469f2de981794a31302</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>get_default_for_type</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a42907d07abfa7e35e2f220436d3fcb72</anchor>
      <arglist>(const std::string &amp;content_type, bool must_support_uris=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>get_default_for_uri_scheme</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>ac278c0e445faed4288c6a719e059e0da</anchor>
      <arglist>(const std::string &amp;uri_scheme)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reset_type_associations</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a01913be6448947643c9de26bddd0659c</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>launch_default_for_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a53a8e7c214d9c6a11cb22bb5e6b447e6</anchor>
      <arglist>(const std::string &amp;uri, const Glib::RefPtr&lt; AppLaunchContext &gt; &amp;launch_context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>launch_default_for_uri</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a164a90bd2c00e9c4acb1194c475dd5d5</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AppInfo</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>affdc34dc0642b5a17cb53aadd8e02806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AppInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AppInfo.html</anchorfile>
      <anchor>a074ab0526fd01e5ee2daf2c81c17f552</anchor>
      <arglist>(GAppInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Application</name>
    <filename>classGio_1_1Application.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::ActionMap</base>
    <member kind="typedef">
      <type>std::vector&lt; Glib::RefPtr&lt; File &gt; &gt;</type>
      <name>type_vec_files</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a49e9c2644440be5859747d350bb0643c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a01c45143f595a603c38f0e6706b0145a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GApplication *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a5bf7165c776bb2979a15da499b67b906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GApplication *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ad024d1c363f8e850b52cfea2726a1b52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GApplication *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a554fe8f0fbd560c6ab28fc7c49ac3ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a0850af24ee016a9dd6087a3d4fc78d4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a4a33387fd6130b5305ca410c95d2ef96</anchor>
      <arglist>(const Glib::ustring &amp;application_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; DBus::Connection &gt;</type>
      <name>get_dbus_connection</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a1b7f24a60afc884e40ab49461790a0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const DBus::Connection &gt;</type>
      <name>get_dbus_connection</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a365ad29c4c9643a79afb05e1734bc0ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_dbus_object_path</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aee8695d2cc323db74899e4cbb7a73f4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aab3c1d90e69da18356130b989060e9f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a19eebde1f77194f294e7f00f773ba1b7</anchor>
      <arglist>(guint inactivity_timeout)</arglist>
    </member>
    <member kind="function">
      <type>ApplicationFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a4d2f0f2c7b58a8183bb18a4dbaffbede</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aefe6afbad1f139beafeada33a9e72db4</anchor>
      <arglist>(ApplicationFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_group</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a9bf1e6006b6eac3e7ccefc1e6bfc92c4</anchor>
      <arglist>(const Glib::RefPtr&lt; ActionGroup &gt; &amp;action_group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_registered</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a986b5738f908ae89486fef16d37e0581</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a6510145fd5dce7b73b137174ffab918d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>register_application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>adc6e597f2d27521f3658c6b8b48d9ae0</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>register_application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8964856be3086656cc1f933381754d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hold</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae20746f00a9ae5a98b21f469c079bc65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a8d279ffaf0b8ea548ac5ae1db0ebe0a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a933c7e0d462692cf7389ab3b08b6e883</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a41a766989330ceba997254c31d322e5f</anchor>
      <arglist>(const type_vec_files &amp;files, const Glib::ustring &amp;hint=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a5f72e3bf2d0826d69067e6138a97d47b</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::File &gt; &amp;file, const Glib::ustring &amp;hint=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>add3bdf8c89411777cb44d6ce5aa26f9b</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a0420530131f4303251091dac443b1961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_WriteOnly&lt; Glib::RefPtr&lt; ActionGroup &gt; &gt;</type>
      <name>property_action_group</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>abc3c0d24a55249fca479302d97a21217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_application_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae7aa0fb864de6c4c61f62c9bad6b2c8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_application_id</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aa6aed2688366db4c40a92cf024ffdc89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; ApplicationFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab478a16ab3e8a5d2819c5abe2590b88b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ApplicationFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a44db85a2c702c2e36e72d93e710936a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a037c44160c6fb4f305ad3ce0c098c9b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_inactivity_timeout</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a5175cca6b3e13306f9746589d962919d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_registered</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a99a8d9641b9b767782523c52dd602a42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_remote</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3cb12b781da84b280b39929419c032eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_startup</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a6b1a3f8cacdedb1b1e33d4f2801a3a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a94eaa9b797229fa29ef4efb1d24a0205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, const type_vec_files &amp;, const Glib::ustring &amp; &gt;</type>
      <name>signal_open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ae4d42ebea7a6738f2513e964ff2fb247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; int, const Glib::RefPtr&lt; ApplicationCommandLine &gt; &amp; &gt;</type>
      <name>signal_command_line</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a9a89ad8ffc84ebfe802f0fdcd11bd296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a63cc5cae8c93f4cb344cbeab0cdfcef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Application &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a49723f8caca339ff409c077d49425327</anchor>
      <arglist>(const Glib::ustring &amp;application_id=Glib::ustring(), ApplicationFlags flags=APPLICATION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>id_is_valid</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ad9d589ea6286e7518017494117f465a2</anchor>
      <arglist>(const Glib::ustring &amp;application_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a13e52a81fba2eca92dc7e2e582dc409d</anchor>
      <arglist>(const Glib::RefPtr&lt; Application &gt; &amp;application)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unset_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>aaff99f1512e9dde8fd3c182d71c82cc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Application &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a00e9413f162dffe7b7c6dbc09fa83bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Application</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>ab36332457ba478951f7743ed48324c6b</anchor>
      <arglist>(const Glib::ustring &amp;application_id=Glib::ustring(), ApplicationFlags flags=APPLICATION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_open</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a11939a724e0ab8ddfa3989a950dce5ed</anchor>
      <arglist>(const type_vec_files &amp;files, const Glib::ustring &amp;hint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>local_command_line_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a83d78cc068e04862a3d0fdab1afa48f8</anchor>
      <arglist>(char **&amp;arguments, int &amp;exit_status)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>before_emit_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a32ff64453c75b262ec3c39f584d860d3</anchor>
      <arglist>(const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>after_emit_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a24a45fbd57b7863e073d0bf120adb52e</anchor>
      <arglist>(const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>quit_mainloop_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a2071fdc29b98017584d0a5ad6ca25236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>run_mainloop_vfunc</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>acec64d0bcee724c3cb83bf124159e5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_startup</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a1f101517a3cfad44c71f5b147893cccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_activate</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>af764ec32aee390fc888a4236ef7f4b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>on_command_line</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a3a061412c26150b96c69a0595325b707</anchor>
      <arglist>(const Glib::RefPtr&lt; ApplicationCommandLine &gt; &amp;command_line)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Application &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Application.html</anchorfile>
      <anchor>a49c378c598e06036b2ed954dd6405706</anchor>
      <arglist>(GApplication *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ApplicationCommandLine</name>
    <filename>classGio_1_1ApplicationCommandLine.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ApplicationCommandLine</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a65a2b021f9fb69492687aa7637b64c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GApplicationCommandLine *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a4164115e133faeba88f120179790e870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GApplicationCommandLine *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a8eb7bb228c0b6b1afe845e20cedc5a09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GApplicationCommandLine *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a2110250bf429a7d01670420fd06e3c96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char **</type>
      <name>get_arguments</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>adcba9055d6fa3c5aba9b3bd21eed3d06</anchor>
      <arglist>(int &amp;argc) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_cwd</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a650d6bf04520000fbafbed570f7b6c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_environ</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a3769c3fbf95d98bc420d43f425790c8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getenv</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a84ac92d5ee56674368dfba142e23416f</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_remote</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>aa42eeaa482f72abd31d8ad820d20c809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::Variant&lt; std::map&lt; Glib::ustring, Glib::VariantBase &gt; &gt;</type>
      <name>get_platform_data</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>aff7413d781c99b550ecf04cda13832ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exit_status</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a1f4ae1a2fc62b6a3cbe48f1751f7c886</anchor>
      <arglist>(int exit_status)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_exit_status</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a529a64dc4dbdcf341e05fcbd0ead42c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a7b09db106ab8473149c9585bef47024b</anchor>
      <arglist>(const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printerr</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>aebab1a57ff18a18a651c95ae0b1d0146</anchor>
      <arglist>(const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a9180788048a1d94d59593c4feaa46d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ApplicationCommandLine</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a33112e7fdeb3f82a7c08f50d35710d64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ApplicationCommandLine &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ApplicationCommandLine.html</anchorfile>
      <anchor>a4888027a1e5b3562c802965418b8b740</anchor>
      <arglist>(GApplicationCommandLine *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AsyncInitable</name>
    <filename>classGio_1_1AsyncInitable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncInitable</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a48e4bd3e0a9033d24afa3a4e30d8508d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GAsyncInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a17b715d899d7ff40a10e98cbc04fb950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAsyncInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a470b482fc15de1b5ca307a9ba9c18649</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ac9d58b099c38f8957f8780b459cd68dd</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ad13b8625eb70ea9c8af3fd5c3b9d2460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AsyncInitable</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>aec93b083db2e2e8609ef916bf5f11e32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_async</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>ae1439e78cf813af329c36239c838b0ab</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init_async</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a05377786e1a1edd01541fd5768db65fa</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>init_finish</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a07df2b8ecba0a06d7ff26d08ba86e9df</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a9545cbf4fe23c6217d32efd2f75b489d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init_async_vfunc</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>affca6d14e16c2841101528edf768f9cc</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>init_finish_vfunc</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a14689b76b1fe02c25bf88ce0eec9f1d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AsyncInitable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AsyncInitable.html</anchorfile>
      <anchor>a631d18f9a5459cbb3848b2098738e6d6</anchor>
      <arglist>(GAsyncInitable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::AsyncResult</name>
    <filename>classGio_1_1AsyncResult.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AsyncResult</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a9dae859748e44341d2c14a2777ca4fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GAsyncResult *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>ad7ebc2ac808bd8eff4f4cd4f94c1c70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GAsyncResult *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a134862761e05a548d2817505480140be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>get_source_object</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a3b89bee3ed3ff402ff58f836e1d2398e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::Object &gt;</type>
      <name>get_source_object</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>adcb9d80c42cf04098629a8153d51b32c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_source_object_base</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a65a9e867d84321b270e2b7be7b36e631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Glib::ObjectBase &gt;</type>
      <name>get_source_object_base</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>abd7320c43aed6281325c6ddfdb7db10e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_source_object_vfunc</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a305c556281152983343a2353e28ca05b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a27a2e7a0488f8a3db08fa9547c791c6a</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a2f0dc50fadce2a220280f885e3af1d88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AsyncResult</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>ad50735bd35c6bcd1d037ea4fb39eeac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::AsyncResult &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1AsyncResult.html</anchorfile>
      <anchor>a08e7667c305f6c361345c9a8e261d73a</anchor>
      <arglist>(GAsyncResult *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::BufferedInputStream</name>
    <filename>classGio_1_1BufferedInputStream.html</filename>
    <base>Gio::FilterInputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a6d961bb2ebe9c213c1e4c49572bae6ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GBufferedInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aa9d0c1e643650b9a45831865f06e21be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBufferedInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>ad6b09565f69b4c1cf1f0ca05ee53709e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GBufferedInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a47dc5f78b1faed25cdaaafe42b526d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a46384a96dc052e9d25e1a88281d69e40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>af5f861a5b30aadc48e21fb10a46afaa7</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_available</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a436e3c852afdc67e8ba70d32e39ce6b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>peek</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a17a6489d7ab0b72268264c9f0a30e879</anchor>
      <arglist>(void *buffer, gsize offset, gsize count) const </arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>peek_buffer</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a27838d9374fa86ae513bc27d939ede24</anchor>
      <arglist>(gsize &amp;count) const </arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a197687762599fb7c5b60141b55120cde</anchor>
      <arglist>(gssize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a271eab4876136b4960d37350738bfdfe</anchor>
      <arglist>(gssize count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_async</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0a41790e04e9ba500eb18d1ce8371d34</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, gssize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_async</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aadb9c1b367e36c20c91e16ea840b6ef0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, gssize count, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>fill_finish</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a13c665ccc722a2544539086846137277</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a85477f09b58dfb83e5a1ef62f119457a</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a8741ffb62c82425f54bc5e005c2a238f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a10be713afc0912c4a5fe89a2c40d943e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a8d77671c76ea9170c32c294d28403378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterInputStream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a5d3ea75436d7681061f6c320225d7848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFilterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6db43589745dcd172f4ca4082bc5d914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>ac8fbd2cc879bfab4854d952b27ce271c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFilterInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a55ef3320e423245cc69066c90785328e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>aa0e6304d8ea21a17b3e6a0127e3e7530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a41af6a4af682c043ac9c91ed13608705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a1a78226f76528f61c87ebe5a31b0f133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a82e03517a6841b170c7e13fcf2f66920</anchor>
      <arglist>(bool close_base=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InputStream &gt; &gt;</type>
      <name>property_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>aee46182be8452b2b308e62b1fe932233</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a6667a12cd90f09d79252e0f76c5f9c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a88a93a90feb440a6b3a38794e7e10609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InputStream</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>afff624e3125add13c88e8a99907ba903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a2ed1120b3d03a12086e7f0ed3946aba1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1b0ef82ab81b3ded607584c7029fe1e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a28a9394b07e9183c0c79798ea344c65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a49a1f4219f96c7fafdcf1ed12eb443e2</anchor>
      <arglist>(void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a42ab2486116d40f6ef828277befb508a</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_all</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1dc8a2babf32f93a0a5dccc0c39e0959</anchor>
      <arglist>(void *buffer, gsize count, gsize &amp;bytes_read, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_all</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a6da0fc57d1a5df7107370c67e84aa496</anchor>
      <arglist>(void *buffer, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>read_bytes</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af59e44aed65ee329e01d6ca6179e97b9</anchor>
      <arglist>(gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_bytes_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a9653d83a56cef6201286ff5f4b709050</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_bytes_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af70a7c9073f6a494c8fac975530130c9</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>read_bytes_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a0b38e525397cddd9ae4b2ebb395ba3b3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a17ea65f35c15043156db90af831a44a3</anchor>
      <arglist>(gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1ea9146d612c666168886734b79a5d65</anchor>
      <arglist>(gsize count)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1b76b2503e607475f63731a886456e09</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a7a3202cf7014bcfb2c0a7f301448ae50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a5b7762ee3f3c571fbc59a0c9af6e879e</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a05bea76fa9ac3c098a167d2b377e36a6</anchor>
      <arglist>(void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ac089ab220e671ba0af2dd97f2405c0c5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1bf7a4a30005813b0a46e069215907a2</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skip_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a111e86dad4548394edcff16d7735d2d5</anchor>
      <arglist>(gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>skip_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a1522468bd203ab3082ab54e9eba68b03</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>af66159778ee2d577e9df52063ced53bf</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ab5160982124f34ed6e475776acd126d2</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gboolean</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>ae5a0d2c3ccf27661e374f151117a8fb7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>aa08a6604e27f04c95fa7ed60838fff02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>afc33c31f5c437df14d385d3aa9d1a37b</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedInputStream &gt;</type>
      <name>create_sized</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0ecd42e418c250abc04bfa03f09b252c</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>ad5357b46433b56fa6ad18ccd5063e71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>a0c4d454f8b892bcfc951740ddaa6f4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>a0a81d8bea742203e775f796f73f46ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedInputStream</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>afdadf0f95e646cdeede70af551f7fa85</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::BufferedInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1BufferedInputStream.html</anchorfile>
      <anchor>adfe9bf4339f83095d6e96dda7b747575</anchor>
      <arglist>(GBufferedInputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilterInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilterInputStream.html</anchorfile>
      <anchor>a5f5a6b8c088b86f8671d9dfaed24ac70</anchor>
      <arglist>(GFilterInputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InputStream.html</anchorfile>
      <anchor>aec580b0fc1e0807d7ccba6cbb7e302db</anchor>
      <arglist>(GInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::BufferedOutputStream</name>
    <filename>classGio_1_1BufferedOutputStream.html</filename>
    <base>Gio::FilterOutputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ab2cf992f28ebf871b0025e5060356f40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GBufferedOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a6dfd09a0501267ef81030e3cf8e9ae47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBufferedOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a4a906daf7be02fd1c1548253f5f0e95c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GBufferedOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a890c12d13d9f87332b00b785e32e4424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a18ba1d42def3606fe3da3912046b1c11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a8044f48728b7020ba86e7364421b21fb</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a5c308a93b5538db6c614b67e015474c5</anchor>
      <arglist>(bool auto_grow=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a53501edadccf17be8908fae896d34dcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a4198c7a760017e659eb2b509c3dc5974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_buffer_size</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>addaaa89d2c3b76c7fdd815854f0b8527</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a0cf7d27482a3c64bf2078d9ed8dfef58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_auto_grow</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>af9b8ebe41658a0cd58033d6f509a71f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterOutputStream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a65d7d0e8645a11065c74706d65e18fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFilterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a7cf09c946f16c1597e7ce038fd64f9ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a4497fb9f0cb87f953bbc8fa5bb218a0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFilterOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ae0701328a1b8b2e71ba15dcdb83422b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; OutputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a135f41e0b5e9ad029d17efdce11e3fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const OutputStream &gt;</type>
      <name>get_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a983b98a5bca8404c6ac515ff8048b61e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a5b9f78803d5860833114852fdbbf2d7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ad02373553035aa1b1c3bb2bd578a24f6</anchor>
      <arglist>(bool close_base=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InputStream &gt; &gt;</type>
      <name>property_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>a080f2c7b32bcd1c05c04a437c5586afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_base_stream</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ae6708607574bc12ce4357a1e8df6cb15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputStream</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ae03f14924981183936d800fcde857fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac5a71a1f432f8ac2a53de2c66eb81d9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac29e6ad7ccffde24201a1da608f25ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ad9128985ea683716db40d7831cb7075c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a0a714bc357db90c5e34f1d001446fe29</anchor>
      <arglist>(const void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a5037c7a24ba87c7e8f1992f7586f032c</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aee589585890960b4c26c86865fe3f0b4</anchor>
      <arglist>(const std::string &amp;buffer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>afa3cf9f1b7006b1f79d8e452616f3324</anchor>
      <arglist>(const std::string &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac9ff8d59409bfdfdfd95643f3ee4c98d</anchor>
      <arglist>(const void *buffer, gsize count, gsize &amp;bytes_written, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aca15317cfd772d712b44147d378788b8</anchor>
      <arglist>(const void *buffer, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac10263d00bf17a158d4aad207fbb2d64</anchor>
      <arglist>(const std::string &amp;buffer, gsize &amp;bytes_written, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write_all</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a9171833c0c7c88103afd3fc12efbcf17</anchor>
      <arglist>(const std::string &amp;buffer, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aaf334df7e398b30fe3b2ac081f31ae61</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4c44e35b548088bbaa949fe3fb93e3e5</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_bytes_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a7dffae36ab85aef1d2c69a1c60a7f1e1</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_bytes_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a6d0a0fb359543cfbca7495b39d6dcd29</anchor>
      <arglist>(const Glib::RefPtr&lt; const Glib::Bytes &gt; &amp;bytes, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_bytes_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a052f5bd01513a4c1c94e52d1174545ce</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a080bff3f1f2017b4d4ff8343a5bfbf15</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aaca5a5891175c7c66cb77e476bae1843</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a413a349600ecd6013d15f563d6c6fd85</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a6bb81a11ef79dc8ffa9f5a275d2d6e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4fefad6d6b244924b4fe51c105d3805c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac3e92678425dd530b22eaab97852ca23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a947eefdb85b9081348a1c0cc04be2eaa</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aae0f58d27908beb35f24a88b6254107a</anchor>
      <arglist>(const void *buffer, gsize count, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac61dbaa1f910c14bf3beaadc0498065f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a4bfe08685268b2236362bce84ba1cc77</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a85e95838d577180e11831b0f149e8f5c</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;source, const SlotAsyncReady &amp;slot, OutputStreamSpliceFlags flags=OUTPUT_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>splice_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a29461238b7b3cf9c2d6dde85b4a6a6ea</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>ac76478281be9559cb0a924bcc4ead263</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>aa82f241b6c72fef632eaf51b279b25ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>af2e8a3c48152c2fdc744a50016911a3a</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a47fb0dbd7f88c9167dacd577dcd8c6c7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a92f6a9cc67bfa6a2356a031fb3f691c0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a8db5ee9e7a3a0c091eeebe960550e6f5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>af984ae9ac1c9ab19d9c72b23467018b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ad5cfe5126450ce9236a8c1f768aed4c5</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BufferedOutputStream &gt;</type>
      <name>create_sized</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ae687f0c086ed2b598bfe1b5c5e1d28b0</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>aec1234b0481c14d92b2be99644ef124e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a8212097d2d77d08108024b39604b0326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>abd7e5b3a7dc3a71b5cae2214cce5e5d6</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BufferedOutputStream</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>a4dfd4e8ed1425f8804c5df73f97ce8da</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, gsize buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::BufferedOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1BufferedOutputStream.html</anchorfile>
      <anchor>ab4fbaeef8ea590b6c674973d25678902</anchor>
      <arglist>(GBufferedOutputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilterOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilterOutputStream.html</anchorfile>
      <anchor>ae070f4f975af2ac6beb39a5bef8d5f95</anchor>
      <arglist>(GFilterOutputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::OutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1OutputStream.html</anchorfile>
      <anchor>a96aad4c49fb938a88b75abe5339bef4f</anchor>
      <arglist>(GOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Cancellable</name>
    <filename>classGio_1_1Cancellable.html</filename>
    <base>Glib::Object</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotCancelledCallback</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a18d005aeefd0da4daab594f4c44ce9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cancellable</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a97c7c4d728865129bc6f0cd3f4ecfce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GCancellable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ae19ec1e85fd9cd7893914d4d7c20120d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCancellable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a668176a01f7ad3cc13c7448378f37b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GCancellable *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a379e6394bad0fff1eb11e1a160f30235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a47ce5f2f16541b7ae18bc5114b366d8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a80df23049daf594fda884f2932ce3b95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_pollfd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a6627893047c8a375324b58e955661395</anchor>
      <arglist>(GPollFD *pollfd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release_fd</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ad8f406bb61e80d382153ebf600822ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a86adae0645cec20d09d1a2903fe46cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ad893da5aebfb4baf34ecdbdad7a3608b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a93b5a39447d2b4eb9fb56748cb687fc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a2285370aea5d98141e742e73743b9c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gulong</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a99eafc7ee028fba0da0ec18f92306490</anchor>
      <arglist>(const SlotCancelledCallback &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aa9277479b4bf0b80090e780e26215713</anchor>
      <arglist>(gulong handler_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a5a34d4782ccec014684c4eb6c20cf0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a48b647ae1c890d85ceaeaf556e4a3113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Cancellable &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>a8d59324b4c253f8c890901cd934203a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Cancellable &gt;</type>
      <name>get_current</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aaf923ce91ddf21fc03bf2902e12cd4e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cancellable</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aab7733b6e915e4ebe280fbb669b6af2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_cancelled</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>aff017e200824997b9c26d82f147e078f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Cancellable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Cancellable.html</anchorfile>
      <anchor>ac45875da91c9c870a0f154a8249047c0</anchor>
      <arglist>(GCancellable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::CharsetConverter</name>
    <filename>classGio_1_1CharsetConverter.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CharsetConverter</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a7b9b74ccc17862ed82e7c36ec40e6472</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GCharsetConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a68e4408875be26bdf2182bb57ae4fba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCharsetConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>ae0646824f1105aa6709092a6c8454dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GCharsetConverter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>acf7a3a6edc47050a63c7722220ada7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a7e895857e2d7f6fecc411509ec38ea68</anchor>
      <arglist>(bool use_fallback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>aa76508930dd5a1c28659c390c7afadc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_num_fallbacks</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a4805ee8c3b365ec318b3a547f5ebec93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_from_charset</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>af8cf132476ff592b3eaeeb55caf354ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_to_charset</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a99036fac0e13b3d8818b1b8fbb32e794</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a6b731319ccdfee017391c355737f9a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_fallback</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>aff9585c32bde6a2fb50642718f0bbc2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Converter</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a8e8f92d25539dc055fc708e3420b9665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a904857babeefa2a3bb6106f83811b99b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a7bc7eb3d05d45eba0f8f5a041d867232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConverterResult</type>
      <name>convert</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>ac7778c230badef940aa3abbbc43abaea</anchor>
      <arglist>(const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, ConverterFlags flags, gsize &amp;bytes_read, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a258cb44c0dbd3d98c9eea89e6d35c866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ConverterResult</type>
      <name>convert_vfunc</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a7aa9c3c714fe2fe385c9ceef81563f95</anchor>
      <arglist>(const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, ConverterFlags flags, gsize &amp;bytes_read, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset_vfunc</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>af44ff18014e7898232eca4f4df906ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a5509aa74fea77a92c3ba4b52414fe107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; CharsetConverter &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>adf903e89ac7e34f6b211c3b414797eb9</anchor>
      <arglist>(const Glib::ustring &amp;to_charset, const Glib::ustring &amp;from_charset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a17ceb5a322220c2810389a499a6d43c9</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a9dacabc2905a659441b89a70ee33b6e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CharsetConverter</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>a1ef8d8864c3415d85e65e881b8aefc64</anchor>
      <arglist>(const Glib::ustring &amp;to_charset, const Glib::ustring &amp;from_charset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Converter</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>ae70264adb3ca2a27e800bc84fbaf0716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::CharsetConverter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1CharsetConverter.html</anchorfile>
      <anchor>ac58649ccbd58df5ece04510f9d5e5138</anchor>
      <arglist>(GCharsetConverter *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Converter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Converter.html</anchorfile>
      <anchor>a5a53e9fbdcfb444cbe49955aac39c65f</anchor>
      <arglist>(GConverter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Converter</name>
    <filename>classGio_1_1Converter.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::ConverterInputStream</name>
    <filename>classGio_1_1ConverterInputStream.html</filename>
    <base>Gio::FilterInputStream</base>
    <base>Gio::PollableInputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConverterInputStream</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>ac0cb41fb75b6561e32a556cbec81b426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GConverterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>aa076a6a334d59b2876b84b16e5f15a8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverterInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a09ef37a7673e68241c19bf3d49acc61f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GConverterInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>ad1d7a973d356d14c4d702590152c1ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a47a3b2a636c33fbc7fee8eaf14220634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a5855ed740955913bf3db77621c6f0230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Converter &gt; &gt;</type>
      <name>property_converter</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>aca3ffd050311192230a3371ec3377757</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PollableInputStream</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a078e51ceaafb0f1c606b4926e48e4692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GPollableInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ae397a025e7818472f54b3dac909d0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollableInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a282ece015ac557a1dce344ce37d6206d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a126d3e0ac7ddaa198d20ff7713d27005</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_readable</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a8fd79806de520cf1ba84097159896bc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_nonblocking</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a8eb0aa54e3a6cb3bb00d6a898139381a</anchor>
      <arglist>(void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>read_nonblocking</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a2d7130fc1b0291eb9531cb3b61052a8e</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_poll_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>abff8a2ec181af77f5eb3d84fb0e523f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_readable_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a5ae8a5e398be325a70cd0302b0163c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gssize</type>
      <name>read_nonblocking_vfunc</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac00544ec021330e5b8592a0071d183ad</anchor>
      <arglist>(void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a2e7192600bb103a2e0b67a52f5eaf700</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ConverterInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a29d12b5a1fde929ae9d9070650a7a144</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a3f2d5350f4fa25919328d4911e816de4</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ad698362f2b1a62c3a35c74a04d196a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConverterInputStream</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>af5e916fdc7ae04d6833bd2f85bbbce34</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PollableInputStream</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>a823f9090b70e59716eca1e582aa8073c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ConverterInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ConverterInputStream.html</anchorfile>
      <anchor>a3f7d4430f52555bbba6ca2c0e2614802</anchor>
      <arglist>(GConverterInputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::PollableInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1PollableInputStream.html</anchorfile>
      <anchor>ac3af174b3ea79ce80fef958070db6b7f</anchor>
      <arglist>(GPollableInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ConverterOutputStream</name>
    <filename>classGio_1_1ConverterOutputStream.html</filename>
    <base>Gio::FilterOutputStream</base>
    <base>Gio::PollableOutputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConverterOutputStream</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>acf1b5556e4cf9e886b24ceabd3c34caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GConverterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a333f4ee5b989075bcf1e1dce9f0b0178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GConverterOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a69efe953c6e1b2ce006d96e448d69a00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GConverterOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a938a80f3c12a2d451589b0996ed2fcf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a4a69aedf2615cd5980086ea10e92f516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Converter &gt;</type>
      <name>get_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a1cd1d2f7e69320c0ef826808a3914cc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Converter &gt; &gt;</type>
      <name>property_converter</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a35ed84c62ce934a13cd5f7cd5dfbdafb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PollableOutputStream</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ad314c468de3b7e686901d878e3d593c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GPollableOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a1621ceb60a0cd7d69b7a83fa68db2930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollableOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a6ac3135a4cd1bf567fab07cc9153b4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ad136f0f582f39ade81827b6a619dbfe9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_writable</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ac28a6eefbe073269cf0ea035a9f9b576</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_nonblocking</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ac51562ebbcefb1820ca2de98bfbde720</anchor>
      <arglist>(const void *buffer, gsize count, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>write_nonblocking</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a43f7a7991ae9ed11a6d4ef33c8dc7c1b</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>can_poll_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ae9577138f3aba229a042cedb85e1e37f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_writable_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a8d0bf4eaf8642b5e246587856ac53d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gssize</type>
      <name>write_nonblocking_vfunc</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>acf75edfb4bcb6b5b989aa7ee3c64abb3</anchor>
      <arglist>(const void *buffer, gsize count)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>aade9ad0b43d43f31081b339e4b9d9a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ConverterOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a5a85c4d188f35c66639f16cad69c92f6</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a41ee04b3c36236782359bae58c27d72c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>ac31bacd234575604b6f61eaf42574bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConverterOutputStream</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a76f58e7c20b906a644beca882286d04c</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream, const Glib::RefPtr&lt; Converter &gt; &amp;converter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PollableOutputStream</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a344a103165250271e2a51076f2a2f046</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ConverterOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ConverterOutputStream.html</anchorfile>
      <anchor>a33f780befc49741bd252d0f16039cabc</anchor>
      <arglist>(GConverterOutputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::PollableOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1PollableOutputStream.html</anchorfile>
      <anchor>a6557b15ebf4139c32c90c2f626de57b9</anchor>
      <arglist>(GPollableOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Credentials</name>
    <filename>classGio_1_1Credentials.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Credentials</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a50da8ce90cb83b14f364b4ae30502458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GCredentials *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a046b2268030f002af002310500000873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GCredentials *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ad27e3960d0694de6eb2cedc00dbcaa25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GCredentials *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ae88176bf9139ac2f8ec61fc2b243eddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ae4852e93b213096b678584e5d90e0f0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gpointer</type>
      <name>get_native</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a71bcd9f09372b9baeaebe515dfd98bf7</anchor>
      <arglist>(CredentialsType native_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_native</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>af513a0e52915235faf163d5de363a0bd</anchor>
      <arglist>(CredentialsType native_type, gpointer native)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a762d208e479db720c4e5124ed329131a</anchor>
      <arglist>(const Glib::RefPtr&lt; const Credentials &gt; &amp;other_credentials)</arglist>
    </member>
    <member kind="function">
      <type>uid_t</type>
      <name>get_unix_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a09b5b839f82cbb23c86aa036e883a93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_unix_user</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ab791dcd8caa32cc01ad38a6d8cf343e7</anchor>
      <arglist>(uid_t uid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a146b6d80a0ce203582402bee5684424d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Credentials &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>ad1d94115b234e0db180e48509fa18fd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Credentials</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>a1aef06c5a74793011858b45cfd8d7898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Credentials &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Credentials.html</anchorfile>
      <anchor>af140151edb8dd5ccf10f9decf594b731</anchor>
      <arglist>(GCredentials *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DataInputStream</name>
    <filename>classGio_1_1DataInputStream.html</filename>
    <base>Gio::BufferedInputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataInputStream</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae97b466761df6cccb9b4232e8dece6d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDataInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad788764326462190e900785f50a50740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDataInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5d8f01998854eac791a3089acef051c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDataInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a8252806b8ac5548c51a0418162ddb6ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a032c20df06b83828d3cb5e81f6b8f561</anchor>
      <arglist>(DataStreamByteOrder order)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a3be4cc7ce927af027630cdeea0914004</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afbc8ad1476fd82e808234a661bfe4cd3</anchor>
      <arglist>(DataStreamNewlineType type)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamNewlineType</type>
      <name>get_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afe528b7ecf9401b7bf91f0c67e34de9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guchar</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aca226b5c2d1248dd079d835dd089570d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guchar</type>
      <name>read_byte</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>af4d01aa4e791d403b79db406befcc28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>read_int16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9fd357f931715d83c69b7010ff86af80</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>read_int16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a2407fa551610510cfdcda3b2d8adabdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>read_uint16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9ac667e423ec3c3d997fc2a4683956d3</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>read_uint16</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a4e99722aa033a78ac2f4dc593b36d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>read_int32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a6280a6c0c6cc1803dc3df8dc29910bcd</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>read_int32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>adbbe894fae2ba5d071c3f50895af9067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>read_uint32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae7d36dbd67425b923fe335ec5a3f4124</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>read_uint32</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a587856139c73d6c2df1ad2c5560cffec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>read_int64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5d9599527bcd651841fd4f73082d26e0</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>read_int64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a6ccd4123a211d1d89c17bb6e4a4aae35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>read_uint64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a2e486863876f833e910286300c7e17a4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>read_uint64</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9c7ed7807b2a8370f879a820dd0c7989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a4e1ac2a250c7acd60417454379d580a7</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5186689410fe626e35688190b65ec0c5</anchor>
      <arglist>(std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ac779efdf33abb470832715abeb47f3ef</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad48b87d450f26683d167c74c7c224ceb</anchor>
      <arglist>(std::string &amp;line, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa1ba4df39f51b81c6e105c71d5941493</anchor>
      <arglist>(std::string &amp;line, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a8cdccad3a356c1bc34bc9ec967b710b0</anchor>
      <arglist>(std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aad31c733d13f737f893326b3b7f1ff0d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_line_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a538562b9bf3a80138ba9918b2249f834</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_finish_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5dade4189842c81b4dc3fc43a8b79af3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_line_finish_utf8</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a79e503ebe50065088e7daaa306da9cc3</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a058c5367f9be4e4e36d5fb9de2201815</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa7d2a04bf5a4628df0530ec40d4c33cf</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_until_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a708cba487c68c8c927fe8ae6277b6123</anchor>
      <arglist>(const std::string &amp;stop_chars, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_until_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aa851cb398896f39bea56868b46bd480d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ae1ecebe6229884c4510e5b42eabe4874</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>afe582f97c8438b1517f16e805e332d1f</anchor>
      <arglist>(std::string &amp;data, const std::string &amp;stop_chars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_upto_async</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a76d195879b8aa04c22a5c69dc82c0f46</anchor>
      <arglist>(const std::string &amp;stop_chars, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read_upto_finish</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>ad0b61e9b6225bea6af433ae28dbdbea8</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a53ffda2bedfb47315afc50d9ec64ba3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a0311a24a36a555cf9e471fbe7aa11050</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamNewlineType &gt;</type>
      <name>property_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>adf55222b27ecf5db6a604d4e111431f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamNewlineType &gt;</type>
      <name>property_newline_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>aec1a1d826fb927eccc4c9f5b444e33af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a9880bf6913e0ac284cb2607efbb91178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DataInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a5ecca0b3f4fdc5962c3c63e4e6706e4e</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataInputStream</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a65e68eef09e6aa1d9e52d446a171fba3</anchor>
      <arglist>(const Glib::RefPtr&lt; InputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DataInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DataInputStream.html</anchorfile>
      <anchor>a88853a1864df25dc8dda900a6ad52266</anchor>
      <arglist>(GDataInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DataOutputStream</name>
    <filename>classGio_1_1DataOutputStream.html</filename>
    <base>Gio::BufferedOutputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataOutputStream</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ad59e02b7e431eed80a7e8280576e4145</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDataOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>acf92da9c162b7a0805aabe334912d5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDataOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a42d4127b7b7b16ae6ec3feb5f66b68d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDataOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac1e10167167a2f5c894e567003483419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ad35d1b14012a1f4ce7aeca8e73a0560a</anchor>
      <arglist>(DataStreamByteOrder order)</arglist>
    </member>
    <member kind="function">
      <type>DataStreamByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ad9d00dd1dbb4e42186049130601e3117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_byte</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a193a3d737db19250895ad4329b82a602</anchor>
      <arglist>(guchar data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_byte</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a82d0f12bac635dc5889847c4911c3407</anchor>
      <arglist>(guchar data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a967df26dca9c0948d78bd495800eeda3</anchor>
      <arglist>(gint16 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a29c0d46538383ed82d622068d826d06e</anchor>
      <arglist>(gint16 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa0f8a4fda83e453a49d5cf614868b392</anchor>
      <arglist>(guint16 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint16</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa222bd351437698643820251e28a406d</anchor>
      <arglist>(guint16 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac405b5c957d34ff068fb07a30dbb5f09</anchor>
      <arglist>(gint32 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac02e3766459a8bb970022ff3991d841e</anchor>
      <arglist>(gint32 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a4851b514c9f3ca166b581b35f530ea71</anchor>
      <arglist>(guint32 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint32</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a16cdae2dd633a4afaea583baa7d10d44</anchor>
      <arglist>(guint32 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ac7efa2d21047145f79fd651129b372f2</anchor>
      <arglist>(gint64 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_int64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>abbe60cbe43ae446cef3a7c9764a6fe08</anchor>
      <arglist>(gint64 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a4a16076bd66c8f2e249ecde22f9762c1</anchor>
      <arglist>(guint64 data, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_uint64</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a5dfd43d27380c031314adf0dc67b4cb4</anchor>
      <arglist>(guint64 data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_string</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a11a8e87ba2da06727d2c8751214b7055</anchor>
      <arglist>(std::string str, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>put_string</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ababf1898b1e49d7d16fdacdfe38db3f3</anchor>
      <arglist>(std::string str)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a1f7d606475f5bf58d6a344a35a3b93ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; DataStreamByteOrder &gt;</type>
      <name>property_byte_order</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aaa3ddd7757f53f5dd11777a147b1ba34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa9e6fcef3024211d11d990f97673ebf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DataOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>aa9c23f0bf4d13c5a4ca5b7bb03991928</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataOutputStream</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>ab01b287da67c8d2312a82f03de59916f</anchor>
      <arglist>(const Glib::RefPtr&lt; OutputStream &gt; &amp;base_stream)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DataOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DataOutputStream.html</anchorfile>
      <anchor>a53e38b7e7370532ed71a1f434050043a</anchor>
      <arglist>(GDataOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Drive</name>
    <filename>classGio_1_1Drive.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Drive</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a92df3dab950a06a57ea2f5080b917a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDrive *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aaa1d4330f6e1d0faee6262f632c63227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDrive *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ada0bdfcbce80c94f4b080f6de73706df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a29125b6262e95613e92266221584ab2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aa7bbfe3d9eb4c716e4e964388b504458</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ad0407bd1e193689a5b088abac49f581c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a25a8c98c25172d7fe3c747d8df4faca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a65876a4184ba4c0b301d836494b94961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_volumes</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a42a2753bc97ae014a1649dc53b4acfae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Volume &gt; &gt;</type>
      <name>get_volumes</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afe6e5759dcf759a1c862e172543d6bd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_media_removable</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aa9c9b3db01d76f26527702860498b531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ad5397764c7a76adf9a0d8bc4f419fbe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_media_check_automatic</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a0cbbb630e6f944f2cd078219d7e35cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a538ad0e01c3359d7d75e8389eb54dec0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a63d1960ea469bdb1a61ddf1752a6e9b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a4163a79cc5ff639693159110592e6be0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a7677be984564a7cf3c5ab7dd3ebb6c96</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a306949d0008fd30a59136e0759dd60ed</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a21a808bb07f7cb580899006fd42c76ea</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>af66cf6ad9b9027630f1c9303bbb6a8fe</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>acb804853bd5e4ecf4abc6503e6ffa82d</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>abdc299d32ba4dd96784db3a9a4523ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1733be3e6aa7c23caa3c12a45d75878d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1c565d20c1f17a233db75dec9ce30415</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_for_media</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a85bd972cad1ef7e1c2627767a825eed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>poll_for_media_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afa415ce0439367e5d8685a2bb1bd9b8d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_identifier</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a6a94c55bba839fa834ba18bc4ef41c39</anchor>
      <arglist>(const std::string &amp;kind) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>enumerate_identifiers</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a8c6c6c5597208c8cc9610b5f2d9f8107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a48cae86204823873e110ecdf7948a5c3</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a99ca25e21f33f54e79b9d62e47ddda71</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a7d81d812989e5dc79414c63149dda9d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_start</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a2594f0176716f8aec2464a3b4dc856a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_start_degraded</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ac047620f769a455b2ca3869bf725e9eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a037cd31001af5d6d0540f4ccbe7b12bf</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1adf5f0d63a2d3a38acc4328f726f7ed</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop_finish</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a308102dbcef3dac0a3ad0006a0c1440e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_stop</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a79c25c1986a1e46ca8dcdf8e331b4dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DriveStartStopType</type>
      <name>get_start_stop_type</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a5c9954887834a697b9417188c4e0ccb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sort_key</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1bc29b35563487b0ade38bfd3d8307d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>abda915e1b5fff2be69fc28bbbba05736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_disconnected</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aa65a212796147d65d4fa953755c33b6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_eject_button</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>aae48457a354c2bbde87b27c991bf867d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_stop_button</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a37a763ad90197500323edacc4e6a8f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a4a00b2efd7a10fae3ffc6e67f30b0908</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>ad065a22ee02560b7a11dc934ba57f29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Drive</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>afeac53258c52f48d82717022dd24f87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Drive.html</anchorfile>
      <anchor>a1a0d5aec4d31827ebfcbdea0c2ebee87</anchor>
      <arglist>(GDrive *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Emblem</name>
    <filename>classGio_1_1Emblem.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a3b0b61279f632bcac5894004b99c5f4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GEmblem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a18a84361942885e0b75a82ffbc342947</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GEmblem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>aedc2ab1a8682aff33ba0dbdaf5d05afb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GEmblem *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a37489c6af0fd3ebcc26f2ad70499ab69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2272bb4eb06787a561eae7593912aa04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>aaea925c28921a3d9a5e772aace7a2ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>EmblemOrigin</type>
      <name>get_origin</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>ae2e37f3de1e0d50b50a3ba4e9ff3d30f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Icon</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a860156dd8f8c9143cce6fba134e5d7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a02ef784d9a07a205ce1d7daac39d2054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a94b7e4b63ce6c1c0f05673dd8b4adf94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>acbcfcaa91ff4d50f700267e2928a61ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a7b0d721c852d1e5b0f9cd875769fabd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a90820057c0e8974d43d2597df18efb20</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;other) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2bb85fdfcc9864d8c90cf274bfb868b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Emblem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a73b765b853f364b1681352efc8a73a69</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Emblem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a49167949418fba4e254c3044b5b2808d</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, EmblemOrigin origin)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>abd37e490fdf4da67eb3bbe2561c16ee3</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a04d158ce09690dfd7bb2a61303451fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Icon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a8ae9b8e7b8159620eea7f9215cac83ab</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a145a95e9ca6ee5d31be2c94be935c060</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Emblem</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a2ff0e5c38e6fc97b2c57188099304fef</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, EmblemOrigin origin)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Icon</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a371ebc971db810d36edf00879f9ea1df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Emblem &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Emblem.html</anchorfile>
      <anchor>a53ecca7bfb4c8b1e3ac4305a8087bf3e</anchor>
      <arglist>(GEmblem *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Icon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Icon.html</anchorfile>
      <anchor>a9f6d4523888318e40c362de6eea23004</anchor>
      <arglist>(GIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::EmblemedIcon</name>
    <filename>classGio_1_1EmblemedIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a52372e1aef73698e9ed8dfe9623ef8e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GEmblemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ad19779f46ff62261df8b924f2e218f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GEmblemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a2b4a572414232927365ade6bf7bd1d5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GEmblemedIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>afa5683d27b359053a929ca46d61ff512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>aaa34ad2bbd13edbed76aaf908a04c630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>afd4b52af91512a77936c0c1e13222436</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Emblem &gt; &gt;</type>
      <name>get_emblems</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ad1795232c2d5abd7edec6a56072d94e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_emblem</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>acf332055cf535914f444bc037ba7d324</anchor>
      <arglist>(const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_emblems</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ae04323b13dba3195a1351a4bee7eeb86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a3100ee99c8cf620cbbac630b0af0b8ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; EmblemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>ac4e4b5c233a669ac82db3852b5d9a1a6</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; EmblemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a7099cac3bd82490137952fddbb398379</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>af58a1bcda197ad6d06646423490ed60a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmblemedIcon</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a2d790c876f3033983c5989a64f5ed83a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon, const Glib::RefPtr&lt; Emblem &gt; &amp;emblem)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::EmblemedIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1EmblemedIcon.html</anchorfile>
      <anchor>a1f2d2a7c6ad0125c6a9b4b41c2b7766a</anchor>
      <arglist>(GEmblemedIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Error</name>
    <filename>classGio_1_1Error.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4b7bf87fd22aea037daa6cadd0f6c6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a71ba0a8ad3a2cee6b86aae19fa38f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a46c2fb3115cde148a9044a996a5f5947</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa3b4c2b6e1109309dfb04e111ae0eeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac89747d1a8296a2d7abc61e33e9a6849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_EMPTY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4d1db4eab217424adeb9acbb8bdcbed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_REGULAR_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a5f4f1cdbfc26e0b284ddc971e69b1153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SYMBOLIC_LINK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a308933795ee7ee7613e555eb6dfa89ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTABLE_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aad4e3bf56a2de0f7642eb5713a4e2da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILENAME_TOO_LONG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af64160bec6d689e9143b2b065114a8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILENAME</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4705fc1de258afdbf3d80d1e6a9c1a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_LINKS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6bc650c3933a11fd0eec1a03c96bacfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134adb48a8d32cc13f996feccfd7e7f4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2cc33d826acd1d12989ae83f4685db1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERMISSION_DENIED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6f7122349d0108e792444d115cfe067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa46bb4ae8662767fb5bf2406c384ca58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a37bbb3053c929cc59ba594a0e68c4e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALREADY_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2c70c6db9fe114fd367bb673a8f0d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a252082a76c9bf70f5df5e736b7334951</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANCELLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9da2cb56b3e1b8db9adf481360e2ad0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PENDING</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6420882bc2f68e77254adb9767bac2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_ONLY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a15305a05f8c09ef80549261f01d42ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CANT_CREATE_BACKUP</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ace8da5552c3ab58264e8c53011c68e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRONG_ETAG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ab84b31830cf8bda8886977905d8c0843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a44decc3b328a874eadd76414c7ebe4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_RECURSE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3af6165f166bf4e8aef85437d4497929</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BUSY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a066d8df507fe9a2de219f618d6242cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_BLOCK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4041bd40a7ec2e6dc8dae84c30065fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a267c1b76c0f55be7e49beb9aeb387e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_WAS_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a207ecccfb593af57a3db3c9311e623a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WOULD_MERGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac7a10c56c904ac8d1d977945c88d6b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED_HANDLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8001f1c0293ab55c88643e3eef3458aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ab091e49c560d423fc47f1a9d5187540e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_INITIALIZED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9664753e60bdd49ecee28c513c33b53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad49388bed14b5c28982d23fdc3bd21e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4e616ea6aabe4b0ac1268d4eb7d1e23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2e462d24aa411472f42467d6b1f6c349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DBUS_ERROR</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a215f4a0e611d0b19eb3ead2338e314b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HOST_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac0376a95fd22bee8a154080a64abb857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NETWORK_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134afece7f5dd896fff22c501c864ea4e9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTION_REFUSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a65c7317f63eaacebcde82199bb7dd467</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af53bc67ed0d73d7dfc014e9284363ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_AUTH_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a540cbcb6c05b20492c678495964f9a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NEED_AUTH</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a06379a3549173bb2a2b42fc749b3875e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PROXY_NOT_ALLOWED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac58b52f032fda78515a08348277eafda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4b7bf87fd22aea037daa6cadd0f6c6db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a71ba0a8ad3a2cee6b86aae19fa38f8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXISTS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a46c2fb3115cde148a9044a996a5f5947</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IS_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa3b4c2b6e1109309dfb04e111ae0eeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac89747d1a8296a2d7abc61e33e9a6849</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_EMPTY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4d1db4eab217424adeb9acbb8bdcbed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_REGULAR_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a5f4f1cdbfc26e0b284ddc971e69b1153</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_SYMBOLIC_LINK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a308933795ee7ee7613e555eb6dfa89ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_MOUNTABLE_FILE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aad4e3bf56a2de0f7642eb5713a4e2da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILENAME_TOO_LONG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af64160bec6d689e9143b2b065114a8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_FILENAME</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4705fc1de258afdbf3d80d1e6a9c1a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_LINKS</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6bc650c3933a11fd0eec1a03c96bacfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SPACE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134adb48a8d32cc13f996feccfd7e7f4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2cc33d826acd1d12989ae83f4685db1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERMISSION_DENIED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6f7122349d0108e792444d115cfe067e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134aa46bb4ae8662767fb5bf2406c384ca58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a37bbb3053c929cc59ba594a0e68c4e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALREADY_MOUNTED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2c70c6db9fe114fd367bb673a8f0d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLOSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a252082a76c9bf70f5df5e736b7334951</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CANCELLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9da2cb56b3e1b8db9adf481360e2ad0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PENDING</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a6420882bc2f68e77254adb9767bac2b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>READ_ONLY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a15305a05f8c09ef80549261f01d42ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CANT_CREATE_BACKUP</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ace8da5552c3ab58264e8c53011c68e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WRONG_ETAG</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ab84b31830cf8bda8886977905d8c0843</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a44decc3b328a874eadd76414c7ebe4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WOULD_RECURSE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a3af6165f166bf4e8aef85437d4497929</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BUSY</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a066d8df507fe9a2de219f618d6242cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WOULD_BLOCK</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4041bd40a7ec2e6dc8dae84c30065fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HOST_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a267c1b76c0f55be7e49beb9aeb387e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HOST_WAS_NOT_FOUND</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a207ecccfb593af57a3db3c9311e623a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WOULD_MERGE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac7a10c56c904ac8d1d977945c88d6b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED_HANDLED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a8001f1c0293ab55c88643e3eef3458aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ab091e49c560d423fc47f1a9d5187540e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_INITIALIZED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a9664753e60bdd49ecee28c513c33b53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ad49388bed14b5c28982d23fdc3bd21e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a4e616ea6aabe4b0ac1268d4eb7d1e23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_DATA</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a2e462d24aa411472f42467d6b1f6c349</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DBUS_ERROR</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a215f4a0e611d0b19eb3ead2338e314b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HOST_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac0376a95fd22bee8a154080a64abb857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NETWORK_UNREACHABLE</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134afece7f5dd896fff22c501c864ea4e9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CONNECTION_REFUSED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a65c7317f63eaacebcde82199bb7dd467</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134af53bc67ed0d73d7dfc014e9284363ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_AUTH_FAILED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a540cbcb6c05b20492c678495964f9a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_NEED_AUTH</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134a06379a3549173bb2a2b42fc749b3875e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PROXY_NOT_ALLOWED</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a85e6b7d494c35d7a51ca879e4c65f134ac58b52f032fda78515a08348277eafda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a6dbe1ed978ad03ee64dbec0a055c3914</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>a0e59e13293663b6c1690f9277c5b48b6</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1Error.html</anchorfile>
      <anchor>ac353667814678e7406d8b1ab72cb430a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a2639aeb2b6a6c43662cf17b8c88a122d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a40547bd64c5de1ada0feb948428524e5</anchor>
      <arglist>(GQuark domain, int code, const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a70257ceb030e4d9dd3ac9a6482830d24</anchor>
      <arglist>(GError *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a715ed79ccf7d2fa3a357014fc614a4a4</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Error &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a6fd059d3c4d24c3f6a0f6999be41b138</anchor>
      <arglist>(const Error &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Error</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>ae58400627bb4445a54651ae95bb63829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>domain</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a8d0366db925669aa5841f21e48f278c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>code</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a073623423095dc52db289bf04a146648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>ac5a9ff59ba32b2ddc24c5c6c0c86d605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>aae4921c01b2852ddb48984b4a5ec760c</anchor>
      <arglist>(GQuark domain, int code) const </arglist>
    </member>
    <member kind="function">
      <type>GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a69e6636c8ed726b1468ed61c07d65816</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GError *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>a41b5a27b917ecb6a0176387bf357d8cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>a44a9c79be10c68a6861f015217ce18fb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GError *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Error.html</anchorfile>
      <anchor>aaf45a78024403f011e31a73c1361c59a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ResolverError</name>
    <filename>classGio_1_1ResolverError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a47a46579525249b10ab091f44af1248b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEMPORARY_FAILURE</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2af94dc802d8d85a9fe0459f99e94b6a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a65ff77c88e58b40291356c7410a1c6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a47a46579525249b10ab091f44af1248b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TEMPORARY_FAILURE</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2af94dc802d8d85a9fe0459f99e94b6a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a6afd83f5c3f01ba099e5b82b8501b6f2a65ff77c88e58b40291356c7410a1c6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResolverError</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a0d015ee9e313bfcd9a86414423f73fbb</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResolverError</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a70b6b6e5cef46494eca49d696afc2bd8</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1ResolverError.html</anchorfile>
      <anchor>a4966b66019b5f44295ab046d34fb2354</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::File</name>
    <filename>classGio_1_1File.html</filename>
    <base>Glib::Interface</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void, goffset, goffset &gt;</type>
      <name>SlotFileProgress</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac5ff32ee99845479d138eee49d92e59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const char *, goffset &gt;</type>
      <name>SlotReadMore</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>add182d22071784fc345adc757b3d687b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~File</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af17e8c7b30baa13aaa5d58ef4d56e383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFile *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a96552cfbaf2e5fa3659a1568db8cca91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFile *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5437bc648d8b73451e8bee0bc902cfc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a9ea238062cdc317ae982ffae5c226c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0320bac72ecc9ced1f894f1af696856f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8877115c870ea8f58b03d1d3c01a83e4</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_basename</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac731bed45bb7fcfd411eb69c49d3b883</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7b3edc7946b681b6db2cdcdad08d2b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uri</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2d1313e4a4eb5de034b693ec1cc9fba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_parse_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aea4a78163e3085a35cbaacde9a3a7628</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af39bbd5013b2dd675911df322e12ff94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae0b0d16b849b2f92699ad57ee7c935d9</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;parent) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_parent</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa1daee0498c403e83ac509e6157edd1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a53c533d6bbeaaadd1b5592cf1e5ef93c</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_child_for_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a479cfd632af30b29e125f904f809ed71</anchor>
      <arglist>(const Glib::ustring &amp;display_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_prefix</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4c40ec88dfc4333f19e939d26a1e0332</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;prefix) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_relative_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a464248111fa2bc5df89c620354eb99bb</anchor>
      <arglist>(const Glib::RefPtr&lt; const File &gt; &amp;descendant) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>resolve_relative_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac5e286d421c7236df39881f8ce0a4e03</anchor>
      <arglist>(const std::string &amp;relative_path) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_native</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aaa3b910bc9f240d4ebd0efc70979f163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_uri_scheme</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a90d71529e5b51b9ff73914eaf90be0f1</anchor>
      <arglist>(const std::string &amp;uri_scheme) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uri_scheme</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aeecec6962f955bd72ac5595be37db7a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3ef959c7ad7096846f26eb8b282e3c68</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0395b3b0b8cec5dc1fd9953e52e5fbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2826eed0b1e76c3771f6ad5f5b993991</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab451a182a647408e697c9115e66f6194</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInputStream &gt;</type>
      <name>read_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a64b10854ad1add1f888ecb19403eb921</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a91c93ee71eee738690cb551d11df9528</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8db337b93f3b9b9a6e163477391e6c89</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a86258e11b2884422819d051c3cfd07a2</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5cf2b17b953ccfefb1d13c39bd1be72c</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad5ec69c5360219bccb794bab6a128e88</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acf5673ceb9095405e458b5035b0986b4</anchor>
      <arglist>(FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad7cf0360096504e40f799fde5cc8e9de</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acf55f9291659566f6fd36271801b013b</anchor>
      <arglist>(const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_to_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1e3dfb193e8f2ab69e24c4370de5335a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_to_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abff3163e9bf8d8208cd0c0e568b777de</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>append_to_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab95fdc72631ad9a07a94eac0bac50090</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae0c42446d37aa466173965b7db1a2053</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3fe6ed015f3d2bb72aa7aceed8dc7ca1</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>create_file_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a128001018104d45b158a27003c0c2638</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4c27a2460468aab1d3c3665234c24a56</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create_file_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5a5989cfdee54778de733a529c24607b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>create_file_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a339d08bf6cafea58d9d0b0675e741d25</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad777cdaa404a6a668ee8d520299687ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae51e51a2e3a45da4324230b4d5401a58</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileOutputStream &gt;</type>
      <name>replace_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4e5fe0438c73500d3d6ec7d0d4b39daa</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a128757d6cf7b152c82bb378a095003ef</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a456f74951f371ef5cca4282751efc66a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a73d95a731716c7ffaa86c3af90afe8d3</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>open_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a405af7082f531a7a39f3e7a453ab6267</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>open_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5fdcb54ece686c870eac69c6f93aed75</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af483e2ddc29cbb6cd1ad751403247bad</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0c4aa84e74b27a67bce6b5fdccb91449</anchor>
      <arglist>(const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af5ebbb5e33c0afd302add9863f2d8c24</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_readwrite_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a38b7d1782f03a4d6a4dbf3be16321324</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;etag=std::string(), bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileIOStream &gt;</type>
      <name>replace_readwrite_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a47d246b8ff87be3aaef635ac123d1e44</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adb25ffdbe571d33e89c9503fe9a20dcd</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4e4b9c07ade255b12e2b43c38c3aba90</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_exists</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad8b0a75e0afdb5f6874ea5e304d55ea8</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>query_exists</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab4cfdbf4fedacd364e40a72c71ab341a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>query_file_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa27c5b271c8f7667ce117cfc6118262e</anchor>
      <arglist>(FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const </arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>query_file_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a691a9de5512b870bf358a9b0d292e146</anchor>
      <arglist>(FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7bd60e7864f8954c35e3b0891058e61c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afcad69d782a971802a8aa85125ac2c8c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a33eadfff77c93a77ecde795307728e52</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40486bc2f0c8758ef8a705b6b8b57e57</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac737012f8df97d90e2447d94d30b817d</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a45b881926b8d58c49d3baa1f51f2ee5d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6eb675267c7ea1c2a0d40e2e754d8333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_filesystem_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a39184ff9c9437259df4b9a9e2f283a0b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_filesystem_info_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4557ab16a50337f73d8a4649cf60fe70</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_filesystem_info_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af986512a5b8cb8acf75afd7206b09be1</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_enclosing_mount_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a78c95d4fa47157f7757b686677dec018</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>find_enclosing_mount_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a67458be57c5687e7469bc26e2594f4be</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>find_enclosing_mount_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad4b415b02053e16a92cabb6a48368733</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a68c3afcddc0d4860aa2afb4bf715bb20</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac0e293d607499b223f4892fb290ab2d6</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enumerate_children_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1ead7237b7057d9b15cf5f3065988131</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enumerate_children_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b5470cf1c97754a12169201665f1202</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileEnumerator &gt;</type>
      <name>enumerate_children_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acdabb80157c69c01479e0b89821c1299</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a3dd75810d7c9ebafac398288f5afc018</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8c2aa80b2d0ecdd22f0222c8ce42d177</anchor>
      <arglist>(const Glib::ustring &amp;display_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0ac539d7758b9c0de809f8c83e0bba79</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a74d219d321dca3d438f876256dee82d2</anchor>
      <arglist>(const Glib::ustring &amp;display_name, const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>set_display_name_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2abb19573076b426434f7d8d2d5a0cdb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aded971b0cf84801f6684ad4bd5dc66c5</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a14f34508dea523cbf889b7193e513ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad8499cabde1f50f1cbd5d928d63e73fb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a21198001203267126de9a24a8e91b0d1</anchor>
      <arglist>(const SlotAsyncReady &amp;slot_ready, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0240c85a3ec46e107666e65da9b92c54</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>acae5ecd962e832cf8d538877f4118da8</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trash</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1925736f9af338eaf9942468b4d6d65e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af9e906ed93069e6adb6d87dae158cad9</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1d8159b5b377db174b376b3c09deb7c1</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7a6b45bed32567031bc7b48273ad4079</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1785b7a4780d5d4ba5ae651350e34398</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot_progress, const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b8ae7393c73a9a1d383a82d61f4ac30</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotAsyncReady &amp;slot_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac2b1a85f29bbbe15998c090b3794cbf5</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot_progress, const SlotAsyncReady &amp;slot_ready, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad538a383b8761d04bd36ed1aa1071e50</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotAsyncReady &amp;slot_ready, FileCopyFlags flags=FILE_COPY_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab16cd89db6cd5bb0c8dfdd4b635002d7</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a51c0d55880178c37dee578fdc723b0f2</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>adfb2d8bfed1cb7af50e5e5795ebea732</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const SlotFileProgress &amp;slot, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aba1fab56c3a8bea0b7e4d7f7324c5320</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abfa05e23e95e77cabac289ab4e294a58</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa1e9aa5f58a76a8562fd00a13434f554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory_with_parents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>afb0b5b094339057b4b15952eb73e08d6</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_directory_with_parents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a874a487551d49ca62b31a3e5cf32fee6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_symbolic_link</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2709318e1f24dfd0cd498d28f5e1b8fe</anchor>
      <arglist>(const std::string &amp;symlink_value, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make_symbolic_link</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8a9a3d060c2675ff9ac1c758f0b2c024</anchor>
      <arglist>(const std::string &amp;symlink_value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_settable_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4a543339b58cff6a7e5ddd840df0e69e</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_settable_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1ae03d0652bcfbad2f47409b8f815bc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_writable_namespaces</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af5c7463b92e2887597486e7b195ca12f</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>query_writable_namespaces</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa0278acd7d09ed292359004defb742b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_from_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a69d9e40a85b96809abc5189b34e8d9b7</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_from_info</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae9f6975ffef28f0d7145601a99de0903</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attributes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a14165fba9bf7d91448c3207407ae50c2</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attributes_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a61317a1980318537aa8ada7bb8cc2390</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;info, const SlotAsyncReady &amp;slot, FileQueryInfoFlags flags=FILE_QUERY_INFO_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attributes_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aefd45aed7b975b6e204e67927de2817a</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, const Glib::RefPtr&lt; FileInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5ce5f43fd5e2836ac1989a54d3233ff6</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a75fa7e1a44e97a910d232f2b4ab4bfdd</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4f4373b8694c346a6908195f1f2644f3</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a09f574259052186e1b516bdcbe696710</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae53b0f4d2214e050a290c8e35cac0f27</anchor>
      <arglist>(const std::string &amp;attribute, guint32 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7f769f140143f2e96a7587a10b6792a9</anchor>
      <arglist>(const std::string &amp;attribute, guint32 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab0290ecba7b06ccf7736e2292708667e</anchor>
      <arglist>(const std::string &amp;attribute, gint32 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4a707084a3c0a963548a21d17d0ec0b5</anchor>
      <arglist>(const std::string &amp;attribute, gint32 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a48638081fd7af772a39af59a558b17f7</anchor>
      <arglist>(const std::string &amp;attribute, guint64 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4aa77b3580df88cfd3d7231af78155c7</anchor>
      <arglist>(const std::string &amp;attribute, guint64 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a111d73a2d003e5a5a4c5f86c7c3d2fb7</anchor>
      <arglist>(const std::string &amp;attribute, gint64 value, FileQueryInfoFlags flags, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4477b0063110951b26c855696ec34802</anchor>
      <arglist>(const std::string &amp;attribute, gint64 value, FileQueryInfoFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a144aa2de6b696da90a6baffbe959d732</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a70fd22116d9c8682433c4bb8cbd764c1</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2172cdcdb683630b719c521bf00b1eb4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_enclosing_volume</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a20f8f18876102a5efaa0536bfa71d71c</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mount_enclosing_volume_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aefd44b1b3467bcc474b345ff98b4aa6d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40c88a403f5d01d722b5900545b6a4fe</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac3c29682ef5a50de73dc2c3c3333301c</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a049e06c3d95b49ad4bff1837ef6d8677</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8501fa88f4aaa8d52c001596960a4572</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>mount_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae15d36a7969c55122b9f85a1690a46e8</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5b687c8f19411e955bb069c469be92b4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab6c8e9ef0e5d83a271c8307b18e779d8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a95f3e87e198493f4332a08aa79f6ebd3</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a13f7cceb9754a7498789593dd58d818c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad82d5b087fef21cbadcb9407d7f43223</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae322b2d5f8f1d95023831c3964c9b015</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmount_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a51458cf04ad25e4a784a3ebcb906155d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8a8223e3b661f03c7a60ac0f003b916e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad8422a939a634d2248ef6d8658f0fdad</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aeb28fd505cab23a82c68ff00445b12e7</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1c103886296fd1ea1107906deebec8a5</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab6c75952828023d27d109a3a23fafc00</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab7aea22f6cb30b3f2be43682ddd543d9</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6a5124de7c55e9dc5e85ffcb9d3dd14f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a90726dcf94248d2fddf2e4c8584b7bf0</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>copy_attributes</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a05c1101ede98028c9234486eb0434250</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;destination, FileCopyFlags flags=FILE_COPY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa0fa22ffba0ff50779e49ff9d12344e6</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_directory</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a12d36689c1024ff9fc8819f619910a92</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab8e14809f330ddd58e628c96921cd987</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor_file</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa410183ed3b4a745093383d038d271b9</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a88aacee7bb6f6d968b4383311a9dd002</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileMonitor &gt;</type>
      <name>monitor</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a50896969a9de87f810f0bf5e2d3335bd</anchor>
      <arglist>(FileMonitorFlags flags=FILE_MONITOR_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa4438daeeb2171e3065bb677b6768721</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad629eaf059b2e05b1f9bfc10c5732974</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, DriveStartFlags flags=DRIVE_START_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>start_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af11e51943807876180474b39d2e521ac</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac101831f87245a881c338014f15d38d8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5ccfb3006c2bc69a32e5055939b462d6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; MountOperation &gt; &amp;start_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>stop_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a195990af8825745d0d26147174824565</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a8e81dd0bab13e56ed98456f6a53591ca</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>poll_mountable</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2025339de9d7ed9b62300cad1a8e8fd4</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>poll_mountable_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a2da5ec13a4a32f229ca97cce8961e637</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>query_default_handler</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a753546465735b25633b003333b66d05c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; AppInfo &gt;</type>
      <name>query_default_handler</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0c0fd0ece2570b6704889df5ee43c283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ac53be228d732b34e062a2a57814cdf15</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ada7c826a417f88b405244c8dc39ae1ef</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a77f7781b0ba65bc4e7e613b80b353fd7</anchor>
      <arglist>(char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a40f3ce7cf905144bac7218f9988d2d35</anchor>
      <arglist>(char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad0e02ebffbaa13036e4636d2118f71a0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6af7ec98d5543bce07b917b65d7276ce</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a5fd15277ab90bcc57db088be04cac457</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aee93c7e24e8391615f9f263584fb02bd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_partial_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a0e8d95fcdf7c2aa38f54e90a22d3ab6f</anchor>
      <arglist>(const SlotReadMore &amp;slot_read_more, const SlotAsyncReady &amp;slot_async_ready, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_partial_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a362d71932c0ba8797a8c47b77df1b6d7</anchor>
      <arglist>(const SlotReadMore &amp;slot_read_more, const SlotAsyncReady &amp;slot_async_ready)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_partial_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a4b323508401d2e6fd2b3ad659f9bb5eb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length, std::string &amp;etag_out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_partial_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae3a59c3831feeadea9bd0709617d2db9</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, char *&amp;contents, gsize &amp;length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af10deca1d5c5d1f650d3b182624330dc</anchor>
      <arglist>(const char *contents, gsize length, const std::string &amp;etag, std::string &amp;new_etag, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ae7febf1f0f3b4b9efca9fae469082846</anchor>
      <arglist>(const char *contents, gsize length, const std::string &amp;etag, std::string &amp;new_etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a23126b43cd262b63c0e458c3a4d0b65c</anchor>
      <arglist>(const std::string &amp;contents, const std::string &amp;etag, std::string &amp;new_etag, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aaf33a17461ff4f70fed06818e364f617</anchor>
      <arglist>(const std::string &amp;contents, const std::string &amp;etag, std::string &amp;new_etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ad33b24a7942429157f47379f4353378c</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const char *contents, gsize length, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a9a1c445e84124e16294974a73f2f1bbb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const char *contents, gsize length, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a380d6ce6362fc05e0e18ff1b881ceac7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_async</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a6fc86aab90620881899a701c2b2775cb</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;contents, const std::string &amp;etag, bool make_backup=false, FileCreateFlags flags=FILE_CREATE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af019065c5503c7f47d778c20f8e5de32</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, std::string &amp;etag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace_contents_finish</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>af0372ffd3f535f39b7e48c0483e4c1f4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_thread_contexts</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab666a9ec3922903646504f4080758522</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>aa9352e68c93431dd16b8ac587703772f</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a9a1cbe348685c278bb7df93ee8018442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_path</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a1b1a4553b226689d50b9525488223e25</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_uri</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a412b6b55f37f69bd4fb8fbd24d4967be</anchor>
      <arglist>(const std::string &amp;uri)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_commandline_arg</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>ab311a1c606b3907865fc8aecd4691de8</anchor>
      <arglist>(const std::string &amp;arg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; File &gt;</type>
      <name>create_for_parse_name</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a7532baa6ce71fe27cfd1e9bba91a3536</anchor>
      <arglist>(const Glib::ustring &amp;parse_name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>File</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>abb3b1f0b8e19505b34ae084c518d20fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1File.html</anchorfile>
      <anchor>a69670cdc7cf63783d6f9370dcbd7cc3d</anchor>
      <arglist>(GFile *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeInfo</name>
    <filename>classGio_1_1FileAttributeInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a5e4777c01a420d7265f4ccd8ed230189</anchor>
      <arglist>(const GFileAttributeInfo *ginfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>aa290f394f7f34b5b7ba9dbb7453ae792</anchor>
      <arglist>(const FileAttributeInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a19efa84d8e3f28299a2b89f86c9c7730</anchor>
      <arglist>(const FileAttributeInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FileAttributeInfo</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>af7057435f526fc718c2be147d0df5b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>ae2775dbf3905b88f52aee3828819792d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileAttributeType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a113f8e990486cf35c33d4963342483f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfoFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>af3e06df4bf2d01ed2f1ff763c7ae01f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>ab3ac15f750d21ddb4f6c7cd3240f8e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileAttributeType</type>
      <name>m_type</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>abd2c79feb25a7adc6b9806d6b75d8c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FileAttributeInfoFlags</type>
      <name>m_flags</name>
      <anchorfile>classGio_1_1FileAttributeInfo.html</anchorfile>
      <anchor>a0b17e6847bad0bab1d90b7a3025e7dbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeInfoList</name>
    <filename>classGio_1_1FileAttributeInfoList.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a1dd9c6baf89e1254fbed44338eb0a4a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a889a9813bba642c384b9b2d05bae0823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeInfoList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a8aba8445408cbf56722946723e6919a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileAttributeInfoList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a030d5b7ddafbfa9e1b15d92254530203</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeInfoList *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a2339b9d0f1a13935e58bfd1a2210cdb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>ae30d388537b163f12846afa47638e7be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a7584d4757d8ff2cab6dbc3bb1d28da94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FileAttributeInfo</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a821a7de06545be2c6e18d7a53c5770eb</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a4253d86702cb4b18859e7ba06cb7e1fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>aed2f07a9ff6a250c3b8fa06324765c2f</anchor>
      <arglist>(const std::string &amp;name, FileAttributeType type, FileAttributeInfoFlags flags=FILE_ATTRIBUTE_INFO_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileAttributeInfoList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a0a0d066b1b2e3a0a533895922ff4c14a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileAttributeInfoList</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>af647ecbd4ab360b48deae74066993251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a2acc6b621f0bb5aab208dceac9b353c2</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileAttributeInfoList &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileAttributeInfoList.html</anchorfile>
      <anchor>a7f7b3ffb2c6258de375ee4cc566c0089</anchor>
      <arglist>(GFileAttributeInfoList *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileEnumerator</name>
    <filename>classGio_1_1FileEnumerator.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileEnumerator</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aa67510ecc9ddfbb3ef6f1d7ad560ca3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a7c4e1d7258796a85d5b473e08168bd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aa54f2d24a93f78b20fa9c33913c862fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileEnumerator *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ac744c1c54800fb3764ea6ce5546f7937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>next_file</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a73b5814cb108be591316cedabe362800</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>next_file</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a881873317d4a608d06405b3da3940e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a731c5e104949ecd082bcd6a2ada25641</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ad3729d377a08f39e3f4fc44d5c37409f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_files_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a78de4d8a6a97cc68fc236a69a730f033</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int num_files=1, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_files_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ad51d86fbf6ebef0aed7f4321e1df6e79</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int num_files=1, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>next_files_finish</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>ab012d7f4428713efadbd10571f314973</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a0c878331956c2b28d749f561dbf84287</anchor>
      <arglist>(int io_priority, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aab848a136da3b0880f23e9084544e4ae</anchor>
      <arglist>(int io_priority, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a8f87519e9368a1db2399c24649976057</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a3908b180f25ff93b1cb6cb86945981a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a3e1fb2fb2a8f8916929506828ded33b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a666470d02974350df0ed75f94321eaae</anchor>
      <arglist>(bool pending=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_container</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a3ad9348edd27ff536e61ee6b87b0fd23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_container</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>a639025c665bfef49b88902d16b889ec9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>afe99ce463bfe6cc0f0c6fc209def5d53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileEnumerator &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileEnumerator.html</anchorfile>
      <anchor>aba2d802d7865e00771c69e44da54318a</anchor>
      <arglist>(GFileEnumerator *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileIcon</name>
    <filename>classGio_1_1FileIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::LoadableIcon</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileIcon</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a9e9ac46fa3312d274c8de2155a5343fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a0461feec986f30a389d7db0bfbc55673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a018eb170dea43e7bf697baa73070e195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>ac56c21ee2b4cc36ba9b6d177fdc184a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a91c091a48d9acadf0fa4ba5817459b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>ad5414529acfb5cd8e118d8ce6cab676d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; File &gt; &gt;</type>
      <name>property_file</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>ae18890d04a8347df36be91dccb18e668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LoadableIcon</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>ac1a01de0d91f26e45babaea521a982a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLoadableIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>aa590b3b76843c19f5dbf51448f30e9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GLoadableIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a50a6f22519524e14d36d070cd2cb1c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>load</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>af92f75fd1b6d4284e169c199a2c6b8c3</anchor>
      <arglist>(int size, Glib::ustring &amp;type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>load</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>acd3a877867f4ca2cbf5b1a5b059e2eb6</anchor>
      <arglist>(int size, Glib::ustring &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_async</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a0218104cdd576b7dde4846de9b997e41</anchor>
      <arglist>(int size, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load_async</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a3e2f5cf5ef217e53e6dfcbd83cc553e1</anchor>
      <arglist>(int size, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a310571260d16ddc97ab0b4bc9e47a1b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a09c67bb60019f8a14015d55ebfb89e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>aac15ee4e49c92f2822760cc774f908d8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a73e373810087a0e2d13e47ab47c822c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileIcon</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a2637e26120b3abc4711be125e212a72b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LoadableIcon</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>a6ace9bdbe5a19a4a488ad8d6ffb0e06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileIcon.html</anchorfile>
      <anchor>a211fbcdf28b3b87440c75b2c1a0212dd</anchor>
      <arglist>(GFileIcon *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::LoadableIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1LoadableIcon.html</anchorfile>
      <anchor>afa55d29b9394247f8824820bb92e8e6b</anchor>
      <arglist>(GLoadableIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileAttributeMatcher</name>
    <filename>classGio_1_1FileAttributeMatcher.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>af9f21d4f8a594676e747583cbc3ad61b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a9e66e5a86c52725b6bd4f16781229775</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeMatcher *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a34cf74569abe9a13c4412bf8f2347747</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileAttributeMatcher *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a5e217b69f70586991b2ef272746aa7a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileAttributeMatcher *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a35f18b4eb01427687fb0fe4f74dc0316</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileAttributeMatcher &gt;</type>
      <name>create_difference</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a63ad723270b7edc416c06f76cf7fa251</anchor>
      <arglist>(const Glib::RefPtr&lt; const FileAttributeMatcher &gt; &amp;subtract) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a76b65df7c7a64dd418f4a04a55af22a7</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches_only</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a22402c55977fefbfc113eceb56029e6e</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enumerate_namespace</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>ac0edeabc8f07048f8bb2ba96d84983b8</anchor>
      <arglist>(const std::string &amp;ns)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>enumerate_next</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a18103e91422814f576ff4b339bb085da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>af914c8e862a49796498e3403367f36bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FileAttributeMatcher &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a47b85316b6b6ce30841895ae6ef4f498</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FileAttributeMatcher</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>ae91e6b65ca5bb2c635f5bdf9cba56ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a7bd99c437bf29680182cce3410094c96</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileAttributeMatcher &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileAttributeMatcher.html</anchorfile>
      <anchor>a55c8ef1a5445afd09cc530d7c4945b7b</anchor>
      <arglist>(GFileAttributeMatcher *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileInfo</name>
    <filename>classGio_1_1FileInfo.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileInfo</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aaa6efce7f09cab1619475b27860a72cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ae03eb9c62254cc8581e3ec757f8d98a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a631bcd07a3ae085260e7b3358444dd4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a4c85d7a363f3925102ae03442472ac7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileInfo</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a740057465d0744299ef0f118b7efe083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>dup</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a15f9fc3eeafd0fa4e90d51d22781be99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_into</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a10d6651e6544788abac1e1f5da55bdc1</anchor>
      <arglist>(Glib::RefPtr&lt; FileInfo &gt; &amp;dest_info) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_attribute</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa18458a7c75729d9521b3b0988bb9322</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_namespace</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afb1ee0d2a0b6ca3284ae30639a495d34</anchor>
      <arglist>(const std::string &amp;name_space) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>list_attributes</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a784a82a76bd8a10d16e6e78d311a8cae</anchor>
      <arglist>(const std::string &amp;name_space) const </arglist>
    </member>
    <member kind="function">
      <type>FileAttributeType</type>
      <name>get_attribute_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ad9dfbef62139e9ea6d259d4bbe6b8b92</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_attribute</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ab36ffcf14c535c7fbbbb94907a3516c9</anchor>
      <arglist>(const std::string &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>FileAttributeStatus</type>
      <name>get_attribute_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a55734d4049747825f04006145f8cd891</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_attribute_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aad2362ace81fdccc95eed6cf4e84af41</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_attribute_strings</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a60775e746c94f56e37ad4659c4a5c790</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_attribute_as_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a75ee20462c4f2dc2c696611427a98d8c</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_attribute_byte_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a4803fb91a2fd7a754f030b63962b2bef</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_attribute_boolean</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a167589bb3e2fa091d7717abe6405fd9a</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_attribute_uint32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a4f84f3668092ae12b0f89f3ff985e9b4</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_attribute_int32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ad450ccf254244a053c11b14e88695c2f</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_attribute_uint64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a382b0afbec9d9ba59e7fbb7cbe5fc5a5</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_attribute_int64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aeb52d13f7ad792ca3cfa527a85b89809</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Object &gt;</type>
      <name>get_attribute_object</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a6211b572545a437f9691297cf439d394</anchor>
      <arglist>(const std::string &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_attribute_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a23be459ab17337e7ce3bf595d1c49caa</anchor>
      <arglist>(const std::string &amp;attribute, FileAttributeStatus status)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a6273bbf43d262c18a67d5b407af8237c</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_strings</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7ca4e0eff88cb39997d062bb87c1a7e8</anchor>
      <arglist>(const std::string &amp;attribute, const std::vector&lt; Glib::ustring &gt; &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_byte_string</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a76af54b7bff8fb2059a24fe421fd695f</anchor>
      <arglist>(const std::string &amp;attribute, const std::string &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_boolean</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aac9c93946c7e7fd05404763f6b4fc768</anchor>
      <arglist>(const std::string &amp;attribute, bool attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_uint32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>acae23c362ceb3a9df2f0b4355a34c805</anchor>
      <arglist>(const std::string &amp;attribute, guint32 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_int32</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a179852aee069dcaa0b038067947fdb18</anchor>
      <arglist>(const std::string &amp;attribute, gint32 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_uint64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa8116dd0baf75878247290ab382ba71e</anchor>
      <arglist>(const std::string &amp;attribute, guint64 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_int64</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afd81b823003ec5dd86fbaaec3486c52f</anchor>
      <arglist>(const std::string &amp;attribute, gint64 attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_object</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a8731a890f534730d780ba92b3407844e</anchor>
      <arglist>(const std::string &amp;attribute, const Glib::RefPtr&lt; Glib::Object &gt; &amp;attr_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_status</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac00eda5b1db8e5c7d3a756a43efe47fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FileType</type>
      <name>get_file_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>abf62545b515bef26ead386be87750edb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_hidden</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a58ec7193682510c1455a6547fcabddb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_backup</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a0e782dc65b4a048628c35af89bc2b894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_symlink</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7a7ef1e79deefd16be5fcea5ed00e6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a2a237a251dce16850d2365f246e48e4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_display_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aab26e342861a38ea9cfcd8b52813d655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_edit_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a92f5240ac06f5848072e2f43aeb71516</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ad835c26e3252232a437d1013a5ed9aa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afa956e081955525b68c5af3f291b7b8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>acb525fe0c1cb6b91483b7df5c37b5062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a7f6058c4419384140c439fed14815f4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_content_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa67a68ee61c7b43f2051cf8639966e75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>goffset</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a298f0414de960d56bb5a2bcd951f4900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::TimeVal</type>
      <name>modification_time</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a0bb8836539f5a2f4fe61c07e335110c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_symlink_target</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a848a2f85fa4f84c6477e076987d28770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aaa44913ffe15c029ce09dfe828cf0a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_sort_order</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a6527af61c645715e24863592246545b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_mask</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>add9025ae3f25e5213ab8fba055a4e09d</anchor>
      <arglist>(const Glib::RefPtr&lt; FileAttributeMatcher &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_attribute_mask</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afb9178c888fbf6fd2ef1344bc8523ba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_file_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ab3ceaaaf6112575fd1b9cd6c75112606</anchor>
      <arglist>(FileType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_hidden</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>af817a5e2d32a2a7d0130c53e4bb3ca72</anchor>
      <arglist>(bool is_hidden=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_is_symlink</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a79304bdfa1e1e5e73f895c896ddf730e</anchor>
      <arglist>(bool is_symlink=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>af2430c30058f424bbc71c342fd2e9cda</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_display_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a6c0171f42d0877023cfe574b77359b59</anchor>
      <arglist>(const std::string &amp;display_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_edit_name</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a0aec971ea570c1946b8e57462e1bc9ce</anchor>
      <arglist>(const std::string &amp;edit_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a3bd4ac6face055102cd02c679056a16a</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_symbolic_icon</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a166b0739038a29aca63bc3dbf750a303</anchor>
      <arglist>(const Glib::RefPtr&lt; Icon &gt; &amp;icon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_content_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a1a07b5776ff1a1a8ed8d942710df5688</anchor>
      <arglist>(const std::string &amp;content_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_size</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>ac50fe95ac1dd596d44cd40225af223f5</anchor>
      <arglist>(goffset size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_modification_time</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a999893faef31be8d0989415852ec527e</anchor>
      <arglist>(const Glib::TimeVal &amp;mtime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_symlink_target</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>af0ca88a17c88c40b58890a68278528c4</anchor>
      <arglist>(const std::string &amp;symlink_target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sort_order</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>afec884c7bd2f655c7a3fe0122dfb4390</anchor>
      <arglist>(gint32 sort_order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>a60db6778f3f1cb3db54e6e58a184b9e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileInfo.html</anchorfile>
      <anchor>aa08fd4d65078c227da321348eed9519d</anchor>
      <arglist>(GFileInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileInputStream</name>
    <filename>classGio_1_1FileInputStream.html</filename>
    <base>Gio::InputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileInputStream</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a8039942e23f7821a67f7d1003b486b73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a5411e06810e06ad339d7a21257772219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>ab1afea7b758100ca02a6aa5b89d57662</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>aa35ad981b6f18b1e5ece395970c5991b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>ae9cf87761484839f4ea53bc33064f189</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a6ff4fe91f63b1eb38cca93591ba1f263</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a50c9554cfa15b88a1d30c7719569cc5f</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a21f82f427ab1e958308889b78308dcdf</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a1c8e42e09d92c59b05d122eead3e3161</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Seekable</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a9b3fcb7df7b3e63b737e5bc5c7e74271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSeekable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a96176a5c51102b9a2d02f4555f2e048f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSeekable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>ac60caf803ddd50d08115da50ccb149dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>goffset</type>
      <name>tell</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a3f270a74f487712bb0a89d86a8313987</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a5dd0a134172ea72595a9c7b2072e0350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>aa717d10e2322df67b488657add79c70b</anchor>
      <arglist>(goffset offset, Glib::SeekType type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>seek</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a3404742af5d7855f6017578091f432cc</anchor>
      <arglist>(goffset offset, Glib::SeekType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a961a029a8498e9223ed9c136cfe14597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>aaf0792e6281670ea411cd7c3ef981998</anchor>
      <arglist>(goffset offset, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>truncate</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a4458c08f1486ce89f8a7f9b49f10eb13</anchor>
      <arglist>(goffset offset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>a396cc408fb62a174563a21f7120321e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>ae8a94d31313527ff431cf49ba5af2bd8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a7abea7847823d4c93e35481d657f7978</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileInputStream.html</anchorfile>
      <anchor>aa3ca60bf8d52cd8c7d2688e58d634a36</anchor>
      <arglist>(GFileInputStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Seekable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a0756ddeb91dc62f76d8a380716ecd228</anchor>
      <arglist>(GSeekable *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Seekable</name>
      <anchorfile>classGio_1_1Seekable.html</anchorfile>
      <anchor>a9601b59f26a240348bd70ec68b1c4f1f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileIOStream</name>
    <filename>classGio_1_1FileIOStream.html</filename>
    <base>Gio::IOStream</base>
    <base>Gio::Seekable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileIOStream</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a7b412e59741edea22ef424786aa2665a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a382fe1830e5e347db4ae0d941398c0df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>acd384df600b1aea26bd10ca2e74f1b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileIOStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a2661e78434e66d48a54aa67ddd4d4e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a11c3696bd12879c7554a8be1246ca069</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a1c4cefdd3b2ff134f01ecbc7a4439921</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>ae83afafd7a40cc116026af5452c26151</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>aeafe3bd19e6cf993dd7a2bb4e27ebd4d</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a9838bea653f37c9ff298e16a96ce11dd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a98607843697e850776bd6736a93df4d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOStream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a1257d3a0df6edf25cf1088e4be7144e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a6e8d13f8095555cecbe0d59f1542893f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIOStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a94eb81fa811399ece0ef743cd9d178ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GIOStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a632594c5b02e0311448e79f6d495c65a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a43e681134d2fd80d3c88ebc79fae1eae</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream2, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, IOStreamSpliceFlags flags=Gio::IO_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>splice_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ad883aab2d96422b0916befd71b73616e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream2, const SlotAsyncReady &amp;slot, IOStreamSpliceFlags flags=Gio::IO_STREAM_SPLICE_NONE, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InputStream &gt;</type>
      <name>get_input_stream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>afab74f0f339afb505556f6cb8b8c2b45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; OutputStream &gt;</type>
      <name>get_output_stream</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>acdea8fc29d817070fa9cca124f398930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ae22ea1e4e3cd6db48b5e012f35a2306d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7d9c63eb525827d27f897d6823f719a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a289fe0ef58e44117952a2e01985afdd7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_async</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a41451e389068b3a61245b43695186ee6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a205a044f155178460336bd6efd05554c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a32d887d5d205566fe1cdfd0bf4176a8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>afecb3079c5a4adf9fe186b4a44923da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a7217e0c7ef1659a8b293a81e5b2e95e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear_pending</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>ac15dc0ec5596a9bb5ee174ea70a2b59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a52a9e11a62ca45bfb8b7bd5117d5f069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>afc95fae98d93047a351166770a19732e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>splice_finish</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a75fe59f3909d44e704dbc6684e0b368e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileIOStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileIOStream.html</anchorfile>
      <anchor>a44679bcc0dadcf0eb3bf2691e51e7e98</anchor>
      <arglist>(GFileIOStream *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::IOStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1IOStream.html</anchorfile>
      <anchor>a13101385680c3857e7027d78e1f6259a</anchor>
      <arglist>(GIOStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileMonitor</name>
    <filename>classGio_1_1FileMonitor.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileMonitor</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a6ffb078bc2ce7e7c4dde4c5731fa1f08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a047a5032cf7905ecc37c6379e8c82f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a3930ab1dd57d0ec9341edf13bd62712f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileMonitor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a989efd770a3a68bc77f1917751feec9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cancel</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>ab6bdfc13b4a27521304c9be8aedec677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_cancelled</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>ae5ebb0182704c6ea8314c6f0a6106fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a47b6ca4693b67efead6c8dde6d526b31</anchor>
      <arglist>(int limit_msecs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy3&lt; void, const Glib::RefPtr&lt; File &gt; &amp;, const Glib::RefPtr&lt; File &gt; &amp;, FileMonitorEvent &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a36215dcf2bf7a9476284f419f163aad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a0256afa44438302c92d8d2eecb7650f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_rate_limit</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a0c6412fbd7ce9a054f98bb39e3d58d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_cancelled</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a0a7c3b0600b9fd8ab9267b7ec3f1a8ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a3ffca53a4e82649f8d9e2d91aced6ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a42c6d3679e90ad17504d3c0a5937da7c</anchor>
      <arglist>(const Glib::RefPtr&lt; File &gt; &amp;file, const Glib::RefPtr&lt; File &gt; &amp;other_file, FileMonitorEvent event_type)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileMonitor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileMonitor.html</anchorfile>
      <anchor>a5ad2474eedfd1ae12f2c75003e6f26fe</anchor>
      <arglist>(GFileMonitor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FilenameCompleter</name>
    <filename>classGio_1_1FilenameCompleter.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilenameCompleter</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ad72f983849b2ba03e2ef98868b56b27f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFilenameCompleter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a6fa2ba7f28935b557fac0dfe965fe916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFilenameCompleter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a0a627a9eac4a916e93f94bc4e7bc0d25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFilenameCompleter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ae069b04fba4a9fff00023476772a7b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_completion_suffix</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ac881f6320fb90d70afa0a5a86a38db11</anchor>
      <arglist>(const std::string &amp;initial_text) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_completions</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>aa56775c73bc3d1bd5a9749926d8a7134</anchor>
      <arglist>(const std::string &amp;initial_text) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dirs_only</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>abe7160d315c69ed35cdd5e1a25cf06bc</anchor>
      <arglist>(bool dirs_only=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_got_completion_data</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a3acc6e4468f03d924b9efae217b49e70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a139fce914a636a7f8f8f962b71519bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; FilenameCompleter &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>aeb7c3042c2f76a62f6806921bef56e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FilenameCompleter</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a1db98397daf75605c3a827f646ea98ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_got_completion_data</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>a092cefc4a3cbeff19f60ef75ebfc8b87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FilenameCompleter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FilenameCompleter.html</anchorfile>
      <anchor>ad03881744458e4aa6308376f5aebd2b3</anchor>
      <arglist>(GFilenameCompleter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FileOutputStream</name>
    <filename>classGio_1_1FileOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileOutputStream</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>ad441ab4039675535b59c65b4c5d14804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GFileOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aa69b1c94c5a3a2e0002fc6cf5127fc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GFileOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a2bf847a5064b01e671731ecd56f88968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GFileOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>af536865a9ed17c3093ab67465fba908b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a660a0130611aad21965a3f74c2fe90cd</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a9b67d7fa0b9309ca42dea8607d2ef3d5</anchor>
      <arglist>(const std::string &amp;attributes=&quot;*&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a926ddca8782aeb271560a058ee6554aa</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query_info_async</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aa9297d379f28510afd0d5dabba65a447</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const std::string &amp;attributes=&quot;*&quot;, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>query_info_finish</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>aff73b62f94cc0be14f8271480aab6299</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_etag</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a8e29de4e67428a79b41180ca27af0a3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a94ffbc5e9da9b3ed5939ef645c6ecaf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::FileOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1FileOutputStream.html</anchorfile>
      <anchor>a5fe0a7a8069a65b4a83b36f3a54b3142</anchor>
      <arglist>(GFileOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::FilterInputStream</name>
    <filename>classGio_1_1FilterInputStream.html</filename>
    <base>Gio::InputStream</base>
  </compound>
  <compound kind="class">
    <name>Gio::FilterOutputStream</name>
    <filename>classGio_1_1FilterOutputStream.html</filename>
    <base>Gio::OutputStream</base>
  </compound>
  <compound kind="class">
    <name>Gio::Icon</name>
    <filename>classGio_1_1Icon.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::InetAddress</name>
    <filename>classGio_1_1InetAddress.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InetAddress</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a681469990ccd8829c9c56f2c21b987ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GInetAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a814cf259fbe2075145372ff8f041e2fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInetAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a02955cf2f6af819e6a33fae34f02a35d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GInetAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ac5740ac33a8c1507165bfb24ad05867b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>address_equal</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a58adc719a3aba1ecf236bc1c5671519b</anchor>
      <arglist>(const Glib::RefPtr&lt; const InetAddress &gt; &amp;other_address) const </arglist>
    </member>
    <member kind="function">
      <type>const guint8 *</type>
      <name>to_bytes</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a55511045dd96127a9e0c71277f6f09e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_string</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aad0c75db355f9202eb2d9abdfd62664f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aad520fbba41d5d4ff350c0e0b8aa8bd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a195f40df5aa0a539d4199dd8c89b67ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ae27877a353888bda5cc7d6ef439b6f43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a123434ddbf161d5bd24bdd6e1a242042</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_global</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a4bc588e6ceab049f81458d17a282a696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a0759e79028e0f3a967f21e9aa785708c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_node_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a30fedd1ab379f61ad0d43822a7fbd414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_org_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a1933a994b55b0d3198187813aadabb8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_mc_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>af50cbe1bd1fc064e37759026f60a2e78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_multicast</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a1751ce4f0815d2bef25c789f6a7c2c51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_is_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a6f18baee3fd0e8d4411ed6300e3f4ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_native_size</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aadfe97104f2bc53014fd70a2f1d8541e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; void * &gt;</type>
      <name>property_bytes</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a498624e86b5dc9be0554d96b70343a06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a853b3ede13b8e413d9fadeb18d8f9312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ae262feee62f9a7f15f424293e2586e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a663100accf609aa42963d6e85592cc46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a88079ac790bfae71e21c98b74707615e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_global</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a0530df1e443b6445e102e6d4f42b91d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_link_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aa5e6b8ef0115b29209e242fff08d1abb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_node_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad2a49d7a3d52d93e0fd450af0c45e55c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_org_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a83dbf0d6b192c8fb2975048cc1ade07c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_mc_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a47182934c2b9053a03652463bde5460a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_multicast</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a07b4ff79cfa83903f92686195f06be43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_is_site_local</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab66f7bce19f9ac287a3d1f96781850c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a5eff31035172897b0d396208bf80628a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ad9a5b29ab4211c5e6d03d7630d1f352e</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab34823f20a1719d0d4dd0b8908791196</anchor>
      <arglist>(const guint8 *bytes, SocketFamily family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create_any</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>a801b964256dd4934f58db81626e6f42a</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>create_loopback</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>af78181b11c10d9d698d9a49cfa2136ed</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetAddress</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>aeca7299962f7b75793c493ff32d91abe</anchor>
      <arglist>(const guint8 *bytes, SocketFamily family)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InetAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InetAddress.html</anchorfile>
      <anchor>ab8ed0814ec989e9c9b07332b19958a01</anchor>
      <arglist>(GInetAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::InetSocketAddress</name>
    <filename>classGio_1_1InetSocketAddress.html</filename>
    <base>Gio::SocketAddress</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InetSocketAddress</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a86c013c0d7971681b61da945543f1071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GInetSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a2185ff490fa658c11854df16c41910dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInetSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>ad0a057e46b10504010e3e014d3207f4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GInetSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a0d165726f19e26d3c03a184510b6df2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InetAddress &gt;</type>
      <name>get_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a28a044f52e94263559a50197d4ddfd6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InetAddress &gt;</type>
      <name>get_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a0ff00835b7a56e1df1c18aaa3d842bea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>ae9fc68c477f6ed7915befb4131f42f42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_flowinfo</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>afb05b6f4fa428c03add9d61ad1eb3759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_scope_id</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a69cacb60872dba627119331eec5891a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>property_address</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a11ed0ddfae5e91401ff0e2a64c0e4486</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint16 &gt;</type>
      <name>property_port</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a5ecad6829b5196276c1a74c6c7b809db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint32 &gt;</type>
      <name>property_flowinfo</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>af11b4b7c31be613196ac14f0f84a5908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint32 &gt;</type>
      <name>property_scope_id</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>aae3b8151722538e72cb8d049a4f67ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketAddress</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>aeedceaf982ff7e7dc75d419022bafde1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a1f65b6f40eeb9a30eb613345be919eb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>aa2c5c7f04c127ad5037814f847ab2d6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>afe1a5b0091f024fa725ff31b88d01e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>ab4fb1e63e629e88e5263e8bf5d095809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_native</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>adec995b9e46746a5d55b3c5af592ec44</anchor>
      <arglist>(gpointer dest, gsize destlen)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>get_native_size</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a25fd6c43478da2eef785467f75ba02ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketFamily &gt; &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a8ee87873bc28121cd998dfb3fc4a954f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketConnectable</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a4cb889aad12cbcf04f6c64002f040226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketConnectable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a25988d9aeb115345500d09b282cf7023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketConnectable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a5ba8bd26578fa49ce4a6f8fbb544858c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddressEnumerator &gt;</type>
      <name>enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a52dcce3726042d15225accd1413689aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddressEnumerator &gt;</type>
      <name>enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a92e199de3976f821f57ae50164d9d12f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddressEnumerator &gt;</type>
      <name>proxy_enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a65568f0bfff650e6de156ae270537e7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddressEnumerator &gt;</type>
      <name>proxy_enumerate</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ac3384042962373d745c6fe3c26575dd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a7fe192f0c08e62a5460a8ee8918d0ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; InetSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a863fb8d260958e69d603e2903595a973</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a2efef6041d01dc632d1d044f0ca594ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>a3d2233d8fc6b47668d38d4b450b5bae2</anchor>
      <arglist>(gpointer native, gsize len)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ac5522339bc623835f4a7245205d2ce5c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>a063b80662cd354812d298720ca33b5bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InetSocketAddress</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a54cf3e5885e7c14a26017ccdc5f552e8</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::InetSocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1InetSocketAddress.html</anchorfile>
      <anchor>a4498f65e8445567d4cacdc0a68437c33</anchor>
      <arglist>(GInetSocketAddress *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketAddress.html</anchorfile>
      <anchor>adf0c2a59f4fc452b8b8e81f86ed1dc43</anchor>
      <arglist>(GSocketAddress *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketConnectable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ad7c218506ae7370a57399d87d1ec1459</anchor>
      <arglist>(GSocketConnectable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Initable</name>
    <filename>classGio_1_1Initable.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Initable</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>aa4da38b665a33995bf28ad1838253b7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a90206d58591c674e03c5de57623bac18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GInitable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a30665fda96b812e27231ec5abc47b789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a6b68b1a2c2ab02ed1f25887c7acd121c</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a6a76f2678aa3641f7ded51813d9ead43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Initable</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a239fb2aa148d653d534db5581d72c348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a7dbee3b8e980bf52ae2a66e1523127a3</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a5881cf9c259d5af218585b7ecde38464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>init_vfunc</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a53c86a53352ecda8bca80d5132e4e99c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, GError **error)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Initable &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Initable.html</anchorfile>
      <anchor>a9a2f7929de61e6b32a2317fe0ebde865</anchor>
      <arglist>(GInitable *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::InputStream</name>
    <filename>classGio_1_1InputStream.html</filename>
    <base>Glib::Object</base>
  </compound>
  <compound kind="class">
    <name>Gio::IOStream</name>
    <filename>classGio_1_1IOStream.html</filename>
    <base>Glib::Object</base>
  </compound>
  <compound kind="class">
    <name>Gio::LoadableIcon</name>
    <filename>classGio_1_1LoadableIcon.html</filename>
    <base>Gio::Icon</base>
  </compound>
  <compound kind="class">
    <name>Gio::MemoryInputStream</name>
    <filename>classGio_1_1MemoryInputStream.html</filename>
    <base>Gio::InputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MemoryInputStream</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a73bc118fab39a89f4d8e8434ff951ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMemoryInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a076380153e01599446bd991e0985db69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMemoryInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>af9ea44af840fc0d29d460498c8ce7d0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMemoryInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>af63cbdce2036e383cb7e77a7df83651c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a483a0f4811f64a0a83204e22c227bf80</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a9700ab039b7d4654330f2786bd8786eb</anchor>
      <arglist>(const void *data, gssize len)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_data</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>aa26832ff7a8bce5cc15518d5a2f0a14b</anchor>
      <arglist>(const void *data, gssize len, GDestroyNotify destroy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a20b123ac1fc94d3b8c531cb28ec37add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MemoryInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>adb6e55009e51b59fa19dcd69617cfda1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryInputStream</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a3878e7ba1b947b72a8ab835e2ff24473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MemoryInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MemoryInputStream.html</anchorfile>
      <anchor>a37bf0e5204e95253e4119ad954b3f7b9</anchor>
      <arglist>(GMemoryInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MemoryOutputStream</name>
    <filename>classGio_1_1MemoryOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <base>Gio::Seekable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ad46729116d268fe1f8f540c692a43bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMemoryOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a3a52447ebfbc60722ced10d8aa625825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMemoryOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a026181901b030a2f1f6e3b66026de5d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMemoryOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>aa6b728d48c0817347df70d41bd57708f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>af3260b7ddbda5b7eb0447de717c7fb67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>get_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>aca7a0ae9773ee687a7edeb0d6372b243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>steal_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a35fc40bebe06f1b305795c9a44ba23f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ae8e5b9a0551bba70974c99cbb24a91e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_data_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a7325ac59862190abfbbd8402ca7e7fe5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>steal_as_bytes</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a56d9ea009c1e3c0b3ecdfb87233d0c12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; void * &gt;</type>
      <name>property_data</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>ad780907d3e30090c0917a650957945f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; gulong &gt;</type>
      <name>property_data_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a0db1133c574625a11ed819fba1888045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; gulong &gt;</type>
      <name>property_size</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>acd37162c359562c87c3ff8e87603f5b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a5394efb6174ba62c48fc04efd31f1271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MemoryOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a7348c98dc71c1ff04c404df77515011d</anchor>
      <arglist>(void *data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MemoryOutputStream</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>acdedb0b457edf81294061bef3289b9b4</anchor>
      <arglist>(void *data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MemoryOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MemoryOutputStream.html</anchorfile>
      <anchor>a294410b0d5c9b2d1a08dc9375338f187</anchor>
      <arglist>(GMemoryOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuAttributeIter</name>
    <filename>classGio_1_1MenuAttributeIter.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuAttributeIter</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a29c627c1eeae9f41cbdf185a3ca91616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMenuAttributeIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>ad26eb0bcf9fa13bdbda556678457cff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuAttributeIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>ac8642701c72e1350f5893a8a437f841b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMenuAttributeIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a070bf7635add9b14980dc3f705d1bfd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_next</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a809969cbb9da566e4d432cabb98e8597</anchor>
      <arglist>(Glib::ustring &amp;out_name, Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>adf71ba894c03e72fe0cd7672610e1986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a25cb8fd694f5c65c080bbc3405114d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Glib::VariantBase</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a0a99cbd4b03378ca92e0c9609cc9cdce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a698c1c012ae1c675a41d952469d794dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a1ef59bc349ab7eb026f33885332e2b47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuAttributeIter</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>a857040ab829ed6ab6fdc8869f78afe6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuAttributeIter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuAttributeIter.html</anchorfile>
      <anchor>acb20cc0c2e6df6f49884b0e74d8b559b</anchor>
      <arglist>(GMenuAttributeIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuLinkIter</name>
    <filename>classGio_1_1MenuLinkIter.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuLinkIter</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a369ba32c86ca18e0b9443b65735d8405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMenuLinkIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a173b3cfa9acd4f726d7e6d263ecd8bad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuLinkIter *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>ab3966ea5109f37c83ae511402e6f1aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMenuLinkIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a020e2bf6116e6b571f32a8ca94457da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a51b7f9a3b49c69a9845dc61d126df041</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_next</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>acbcef4f47e5933e561f21f47ce1cb02b</anchor>
      <arglist>(Glib::ustring &amp;out_link, Glib::RefPtr&lt; MenuModel &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a3d8cc7062124baa117a4881ec4b5c9a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a3b356ca32d6ce74ab177ea07cb261608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>ac41524672d20f2b0f725697713ae78da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a7adc89d0fead8deb4887962c9ff68896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuLinkIter</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a98783ba6619bdc75a35e22b716844db5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuLinkIter &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuLinkIter.html</anchorfile>
      <anchor>a17688e9319c157ac32bd533aa04227d7</anchor>
      <arglist>(GMenuLinkIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Menu</name>
    <filename>classGio_1_1Menu.html</filename>
    <base>Gio::MenuModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Menu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ac60d492ee6dc790d4f33f065a939d422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMenu *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a929f4a1d842ee720a52a3c0389154ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenu *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>afb37ba4b49b589e519ace5e7b29dd654</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMenu *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a7e42abd72d5abdd822ce6a0256750f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeze</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a2368b3763316dc6644c6f55386feb7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a4d7fa8eb14f059503a9ee130a306e555</anchor>
      <arglist>(int position, const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a85a974793a615ed9188cefa6bebc1a12</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_item</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ae633f3a93f25a8ad687da1b41863fac1</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuItem &gt; &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a83a161993128b47345e86b227da5821e</anchor>
      <arglist>(int position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a9b9f72c261642fdeb2f60561677de317</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a93fa3a8e344ecbfb6fa37487bf100f70</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ab24d6658fdd0741035a2b431aa7ef595</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a2eba90ac2b9b7a0d5c1cf5cf4aea3109</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>abf9e550519559f64a8f9b07cdd13a932</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_section</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>ab3fc029fff37abf97a46462c7c21412c</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a8f3ac0c4bc2c7101dae78a504b9e14ea</anchor>
      <arglist>(int position, const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a671400b0cfc1153966372b101aa543c1</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_submenu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a895cbbba112cd0321fd3bac2314f5e19</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuModel</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aa50e7a927c5798cfa94d38a50b919c64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aa09ec8d56a76f646e7133b6dd2271ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a5cdc6c658245ee2a22dcc10e1eb119ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMenuModel *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ac75e5986055f0ec9cb56077cf533e44c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_item_attribute</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a99090d7f9e7406e5bdc950f86b82f019</anchor>
      <arglist>(int item_index, MenuAttribute attribute, const Glib::VariantType &amp;expected_type)</arglist>
    </member>
    <member kind="function">
      <type>const Glib::VariantBase</type>
      <name>get_item_attribute</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a9083fb4bc22839eac9d82efd0a465501</anchor>
      <arglist>(int item_index, MenuAttribute attribute, const Glib::VariantType &amp;expected_type) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_item_link</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aca233273e44374beeb579113560621b5</anchor>
      <arglist>(int item_index, MenuLink link)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_item_link</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a559fc7a0480fc4b4df17e91e7a8f3bd5</anchor>
      <arglist>(int item_index, MenuLink link) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_mutable</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>acbfed3821e834c151001fd0aaeebb398</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_n_items</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a2f6a0ebbc8a2c259887dbee8878c428f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuAttributeIter &gt;</type>
      <name>iterate_item_attributes</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a074bfb4ed7c3b2a94000b62fdce6dfc0</anchor>
      <arglist>(int item_index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuAttributeIter &gt;</type>
      <name>iterate_item_attributes</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>ababd702c0ecfe7f586256c366fb91f04</anchor>
      <arglist>(int item_index) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuLinkIter &gt;</type>
      <name>iterate_item_links</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a5abda335e54302c4e8285c41bf201e51</anchor>
      <arglist>(int item_index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuLinkIter &gt;</type>
      <name>iterate_item_links</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a95599efdd50d47162a65a0d905f78fc7</anchor>
      <arglist>(int item_index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>items_changed</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a0b0c42bcd34312965430750a2f56071a</anchor>
      <arglist>(int position, int removed, int added)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a30a99f90e82c94204304b808e40c3a14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Menu &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a5a1507929168dc50efbacae44af3ffb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>af19553f2244f8ad5a118751952b7a2b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Menu</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>aeb7862542979341cc01191b85726a826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>a4a58a5d7ed0e2dd3fcab1f110f8cb6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Menu &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Menu.html</anchorfile>
      <anchor>a3aaa636051265b892b0c392699cb8a7e</anchor>
      <arglist>(GMenu *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuModel &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuModel.html</anchorfile>
      <anchor>aeaa4856722c5a84b7f287e8900b43fdd</anchor>
      <arglist>(GMenuModel *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuItem</name>
    <filename>classGio_1_1MenuItem.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>afc66ae20e28e88d32a80542b88fed042</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMenuItem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a12ca5edb28f3bf7516bfb45236db02d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMenuItem *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a73d3e65e7ffadf5b7e19edc4b6894f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMenuItem *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a6b214d265df9ef9a8452327fe79bae43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute_value</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>aad911d89dbb48ac90f18e14faba2f3be</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a5af6c5ee37b8ef1218587434ae3cf1b6</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a8625449f52402411f9d7391340ae606d</anchor>
      <arglist>(const Glib::ustring &amp;link)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MenuModel &gt;</type>
      <name>get_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac96eb91687ba0d706b145493b942589a</anchor>
      <arglist>(const Glib::ustring &amp;link) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_link</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>aaac02ded419000a186cfd376d65f9267</anchor>
      <arglist>(const Glib::ustring &amp;link, const Glib::RefPtr&lt; MenuModel &gt; &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_label</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a92948a899a3ceab9bb8008b37128e63d</anchor>
      <arglist>(const Glib::ustring &amp;label)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_submenu</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac3562d8a32bf6610e462bcbdafed5263</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_section</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2361bda22895d8028023e51c6ddc9113</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;section)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>af01863c67e840d6963e07638f4e3866b</anchor>
      <arglist>(const Glib::ustring &amp;attribute, const Glib::VariantType &amp;expected_type) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>get_attribute</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a942abb60268302bceed2e5d6feface73</anchor>
      <arglist>(const Glib::ustring &amp;attribute) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_and_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2aa16d26522f85c676522dd8b3c0c7f7</anchor>
      <arglist>(const Glib::ustring &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_action_and_target</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a2f7175f1e5c5f132516956911f11fc0f</anchor>
      <arglist>(const Glib::ustring &amp;action, const Glib::VariantBase &amp;target_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_detailed_action</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ae799faf2fb9fde82359468c1edef33d3</anchor>
      <arglist>(const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>ac1d7557f96575ef4fcdc1ced749ae81e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a98b148e8ff40b4937a0494e671fad42a</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::ustring &amp;detailed_action)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a0c47463cc423e29c91f38e4c8d84fa88</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuItem &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a08361e9a4036be549c802454aa9c656c</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a7811f82a7c5b2483c37667ef4517b7de</anchor>
      <arglist>(const Glib::ustring &amp;label=Glib::ustring(), const Glib::ustring &amp;detailed_action=Glib::ustring())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a066cca32dbb3b49f985cdba0aba93ca6</anchor>
      <arglist>(const Glib::ustring &amp;label, const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuItem</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a10620c7394969858d88bd5611e5cc9a8</anchor>
      <arglist>(const Glib::RefPtr&lt; MenuModel &gt; &amp;submenu)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MenuItem &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MenuItem.html</anchorfile>
      <anchor>a923b0dcf6c58eef630f81fd8f6d9046b</anchor>
      <arglist>(GMenuItem *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MenuModel</name>
    <filename>classGio_1_1MenuModel.html</filename>
    <base>Glib::Object</base>
  </compound>
  <compound kind="class">
    <name>Gio::Mount</name>
    <filename>classGio_1_1Mount.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Mount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a13e8fa0a412e509ed8a5cc10bf212ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMount *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>afdab4fd2377e912d2baef0cc6a825eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMount *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae15d61c7a8bb68f66fc46e3eaaaffbe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_root</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>accf83f7b2599411cb82f5f4c0172db81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_root</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ac2bf8f7a467856c39cfc016d61fe8c5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a951d543f8907069e20678dd503928cd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae368f1d91fc927b809f27acce5aff58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4c26c21db5fb5960b24d780018c6d04f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adcab6c682190b8d8265af3df3d089c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3b8fdf636f0ac89e8045d14c315cda19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uuid</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a8a58874fb45ac7960dec34f094f0306e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Volume &gt;</type>
      <name>get_volume</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9497eb3a3a928144f522489b5b432cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Volume &gt;</type>
      <name>get_volume</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ac9f2177094e6203eaf6aa186b7ea3ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ab9b8889c7b8c8fdb885a46dad7419fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9045c2d50f4433ebfa137c501b00fd96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a52771234b6feb921931f28886bced5f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a279bb465c4781cf4a769db412db947f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a6eb057d27f3729dc451d32e8c6bc8fa0</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a99bb5452908456ece101cee94d58efe9</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aedbcd024f16a92c704261c17eb7b1cf6</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4673333db9d066f1f0fef5e4b2d5bd2b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a833c71dbd0d5cfa222cec64cafaaf328</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>af40b60bca3e9bc53496f0ac926a4db04</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unmount_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a319db22009f052fb5d0c45596f203d4d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aae983acbd58daf68125f5129466d4de1</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a088ae08b4bc3a8dc44c0e18aa2b438e3</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a2059d92df5b2cc36268545b3dbd2c171</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;operation, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4ef4769ca5b2e9a55f8a1981b2cc051e</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remount_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a5cb279b126e6086b5f0ae0957794f023</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a6bbacd6b5ab2251d8df9db538d6f0d60</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3573df8a4d1d10dd321e2f46d9afc337</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a0fe94aae6876d196348f786c5e830b49</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a8c2898b067f5651cb641c4375833f15b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a9a27b41f48e3a00783b0d8ac313d0014</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ac7ff80c7b83d251de9a8c47ce79e9e5b</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aee0c22ba1711f4d84d1eb0d2989c2d0d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a3ab56ac69c41c668990e91d7be2a2b73</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a498994191262236c4bddf0b95df92642</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ada39b6385004f938c38ce14b0566756b</anchor>
      <arglist>(bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type_sync</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a42de2d821060ef0f958ec176749ab595</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>guess_content_type_sync</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a7e6b4c96208fca788cedb49dbea89258</anchor>
      <arglist>(bool force_rescan=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>guess_content_type_finish</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a274064a160c15338580685a9e1603497</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_shadowed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a7788da3491e20c6a5563adb7690001fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shadow</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a1988ef61bd5316876ef434593a45f584</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unshadow</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ab25d880d541247871be715e13fa2b39e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_default_location</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a8ff89751cfd5b626952525a079829fed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sort_key</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a612a645d786012c1866bb153955a87f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae9331b0fb0c2154885818ed72ddb21a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_unmounted</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adafc3d61a654cf2236f568e534aa6616</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_pre_unmount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>ae0c76ef0e895f2781add651624c590ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>aad5f6e7a513330f247f71c9475a3eec8</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a03ec69273177d0e9cd2c6802227deacc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Mount</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a43cb15d97a7f03f7a3385bf741708a46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adf264056921a09b1426625973fb1d182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_unmounted</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>adc6f47efdfd20501692f82a2c94b7efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Mount.html</anchorfile>
      <anchor>a4723a81c56625aa5920589115060812c</anchor>
      <arglist>(GMount *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::MountOperation</name>
    <filename>classGio_1_1MountOperation.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MountOperation</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6899f6121cf5a44a39ae3cc662d92fc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMountOperation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a580640ff16e8cd1cbd9d0ce4659daa7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMountOperation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a100962323f73438a4d35253b5763cc30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMountOperation *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6e6feac74568a2eb7e6ca1a63122c31b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a13621e9b35aa25b8f62e5a6db14d3967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ae9e313d9dca3421676c590cf50134d62</anchor>
      <arglist>(const Glib::ustring &amp;username)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ac874e50f4915199d6013932633841ac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a9df86e31c73fea9e438586fde8a92b70</anchor>
      <arglist>(const Glib::ustring &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>aa30b6f82881ae1afea5a21836e5bd036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ad5a97dd24b05012c93211932880edc02</anchor>
      <arglist>(bool anonymous=true)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a3f0ed216f46c7a914c73d7d1e4a8c0c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a09fd2984393678b8592b7a3d565c0307</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>PasswordSave</type>
      <name>get_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>abc1af61dac7d1427775b7505d27cd319</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>adf1fbd975b639f2b099736f83d3f9bd0</anchor>
      <arglist>(PasswordSave save)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ab7eaa8f1ea17c14c86c5f30cc0c5eda9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6fbd101a1db62e2f34b23b9fa5cca869</anchor>
      <arglist>(int choice)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a1f444eede759bae682091b8fc5f108d3</anchor>
      <arglist>(MountOperationResult result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy4&lt; void, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, AskPasswordFlags &gt;</type>
      <name>signal_ask_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a10cfcab05979a518d20f0c03cbf1a6cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, const Glib::ustring &amp;, const Glib::StringArrayHandle &amp; &gt;</type>
      <name>signal_ask_question</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a38daf1bcead0ae90cc61db691616c342</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, MountOperationResult &gt;</type>
      <name>signal_reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a55fa9cab0e2955fa6142f5dcc95198dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_aborted</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a2aaec5c293ef88d3c331b67ee92f0493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy3&lt; void, const Glib::ustring &amp;, gint64, gint64 &gt;</type>
      <name>signal_show_unmount_progress</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a7348b259356b0dae5b0e1d56c97f1ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a343d4ebfbef38f57a26b25ff86f21a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a344158870c7a4ffd1ba7fe5c42c183e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a090c6c9ed3ded046b79cacbbda821c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>af2707b368a5a0bae8bb67846f696c58e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a6da8f2f69cf4ea9fccde46f44addb88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_anonymous</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>aea841c352e4dd6a4f4b31e461f095b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ad3206fe2d96665bc187ff8a13e4b22fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a37f8604db759f2b74d3857a11277db55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; PasswordSave &gt;</type>
      <name>property_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a04c4d41b4075a04524aa00f3b4fd6fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; PasswordSave &gt;</type>
      <name>property_password_save</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>ac32c9c6ec642389e1e53049161922910</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>aa54cb65cc8fc27eb4972931668aa151a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_choice</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a73629ee0c8344b8dc9dcc99fae9ddd93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a06f645537aad67629edd4180e3321bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MountOperation &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a3e59fd19498a9be34bbb7462d87e2ca1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MountOperation</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a415e62c32b8d497d859e50da0c8431cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_ask_password</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a2bfee2a7879e75708a22cfb59e99280b</anchor>
      <arglist>(const Glib::ustring &amp;message, const Glib::ustring &amp;default_user, const Glib::ustring &amp;default_domain, AskPasswordFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_ask_question</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>af4d007e34e6f023de14a667aabfe3a39</anchor>
      <arglist>(const Glib::ustring &amp;message, const Glib::StringArrayHandle &amp;choices)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_reply</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a9480654f1624640c719ce260883c8f9e</anchor>
      <arglist>(MountOperationResult result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::MountOperation &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1MountOperation.html</anchorfile>
      <anchor>a65da8ecee4b6b6cfd9e846ec6bc950fe</anchor>
      <arglist>(GMountOperation *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::NetworkAddress</name>
    <filename>classGio_1_1NetworkAddress.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkAddress</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a6907240bebaea930f6a4ea0cf48e9478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GNetworkAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>ac3bece6c2edb44d1346abd2a07995df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNetworkAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a34f56c110e7a2e843680d8ac8f9b7501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GNetworkAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>aa38b8f4bb0392393ea1235f3adbe79e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_hostname</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a859e032334faefe8c8c7d68f8ee2cdfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a8a8893314bda54fc9b09a52f4bf9c33d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_scheme</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>abb7200ac34651f35c5520f25156664db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_hostname</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>ae30c1790f56d46bb161d8b7e4a8c2b63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_port</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a0949682dcefcd8581cec86c06410d675</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a1764ce7d454b29866c84eecd823c66c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>adc8cd99b4c8e352a64eaecfa497bcdc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a30cc7b78902bb94a53b7eca98fbee083</anchor>
      <arglist>(const std::string &amp;hostname, guint16 port)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkAddress &gt;</type>
      <name>parse</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a0090a07db819bd872a1379cb6d6c635a</anchor>
      <arglist>(const std::string &amp;host_and_port, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::NetworkAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1NetworkAddress.html</anchorfile>
      <anchor>a8283831783706b23dea2801e56bf1b1d</anchor>
      <arglist>(GNetworkAddress *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketConnectable</name>
      <anchorfile>classGio_1_1SocketConnectable.html</anchorfile>
      <anchor>ac2ed148dfc1b3d946972498587baf43f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::NetworkService</name>
    <filename>classGio_1_1NetworkService.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NetworkService</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a991fb9d21ee21f41b0f6f78c57ba354b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GNetworkService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a01c7acc26f88ba9b62cebecfadf0eb81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNetworkService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a4163659ccfef2fe1459e54f542a04a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GNetworkService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ac73f00e197b587678ea62ed430d7592c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_service</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ab6d8f3c7d9da2a302645eecce0707a7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a2789410b339d1fd4770ca24243421520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_domain</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a5ee1798c274fc4868fc108c6e3b0fbef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a230c5bb95e22702553cfaaeb732ecc9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a84d94901aa012cd8d1594ccb1ebbed2c</anchor>
      <arglist>(const Glib::ustring &amp;scheme)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_domain</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a014d9c11a66656f47151e747ae148256</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a255ca9d5aea38963484cad402826b3b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>af6dc0c00c17461f1e49b6b3eb6b64680</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_scheme</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a803938e1204d47690385a2953a860992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_service</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>aee4ae0fcb228072911460899d662473f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a92cefcdf90faf1a83f51bb68fdf8e5c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NetworkService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>a1e6e8639ee28297dbce656fa93cafe65</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::NetworkService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1NetworkService.html</anchorfile>
      <anchor>ac0ea3336b85237336a8c8efeb4f864ec</anchor>
      <arglist>(GNetworkService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::OutputStream</name>
    <filename>classGio_1_1OutputStream.html</filename>
    <base>Glib::Object</base>
  </compound>
  <compound kind="class">
    <name>Gio::PollableInputStream</name>
    <filename>classGio_1_1PollableInputStream.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::PollableOutputStream</name>
    <filename>classGio_1_1PollableOutputStream.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::Proxy</name>
    <filename>classGio_1_1Proxy.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Proxy</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a86fd06700799e30e5a433c722951fedd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a5d635bea4b7b93e6dfe4a9e0d50f569f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>af7968158aaa54282ca7cab466d491ff6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a6b4fb0207d17c0118720f96ce79b3b05</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>ac95ea8b9613b7f125baa2d96041d8397</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>aa65146dc11e84e4ee09f0f78500d6279</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;connection, const Glib::RefPtr&lt; const ProxyAddress &gt; &amp;proxy_address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a14d0ba006367a41d64ae58deb8b2d074</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supports_hostname</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a74fc2a43857241702bfa3668c68c14f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a1922e1348160624161a7da73a12d401e</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a09cbe3afb8c91b76923d4903d0abb88c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>get_default_for_protocol</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a13d55cd6a30e21b62d96fab02138f2f0</anchor>
      <arglist>(const Glib::ustring &amp;protocol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>aac8ea26a1e716bc0bca4d16dcaa4fe23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Proxy &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Proxy.html</anchorfile>
      <anchor>a2618cd487487871eff6e8ad5d2d3695b</anchor>
      <arglist>(GProxy *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ProxyAddress</name>
    <filename>classGio_1_1ProxyAddress.html</filename>
    <base>Gio::InetSocketAddress</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxyAddress</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>aeee66714ca21aee0e8fd58df73c6a372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GProxyAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>aa085bc6a03d6c8861c12bba387d395c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxyAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a010e1f1f91c72e9be01afce6cb6f55ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GProxyAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>ae54b9556db86b4f13b2aef789685fcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>abbe07e03c353db1f52de7df7a8d82e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a965aecb110c4a9494fc6e06794332e1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination_hostname</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a62d7233e953e6b570dd0b3b8502a46c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_destination_port</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a47d0a94a1bffabce35ce7dcc5674db82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_username</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a1a4c55743dd829c42b5abad0fbacad3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_password</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a903bdaf26d3905a264c3a9decfa03e47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_uri</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>aeca1af6dd05cc8c7f9cb90bafd601d3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a62d157070df11b4d9de6f3dd5a4aed5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_protocol</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a3722e560d24400ac85f1d98abbdd2f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_hostname</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a13d7b8fcd86f5ae204f57207566d84ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_destination_port</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a2986bbfcd288da8de88615fdf6639986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_username</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a916cd3370a00ffecf25443ca80ca77a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_password</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>adf6dbab0ba851cd5407f8138ae315fe6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_uri</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a35a64764fa80ccc36c24b7ddbca098b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a816ba2a308f0ab60f694b3fda492075c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ProxyAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>a31cd08b2cce1b8a1d04af9a6e39db600</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port, const Glib::ustring &amp;protocol, const Glib::ustring &amp;destination_hostname, guint16 destination_port, const Glib::ustring &amp;username=Glib::ustring(), const Glib::ustring &amp;password=Glib::ustring())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProxyAddress</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>af36bca5cb7e8bc4a8791600e7267b66b</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, guint16 port, const Glib::ustring &amp;protocol, const Glib::ustring &amp;destination_hostname, guint16 destination_port, const Glib::ustring &amp;username=Glib::ustring(), const Glib::ustring &amp;password=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ProxyAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ProxyAddress.html</anchorfile>
      <anchor>af5ac5530f123a7fc5a0720fb1a806e0b</anchor>
      <arglist>(GProxyAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ProxyResolver</name>
    <filename>classGio_1_1ProxyResolver.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProxyResolver</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a5c63b3c94c77b16894b0edac5fbef1e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GProxyResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a3131a7a3022a4006769e0776c3eafc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GProxyResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ae1cb23c9cd789ef7e4bad90b0829d47e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_supported</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a2f9af129acc2febba9ba323bf436a243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a33219314d36a97ccf30bab58ec279e18</anchor>
      <arglist>(const Glib::ustring &amp;uri, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>abc8a97d206ad3e6562a2327322ba9369</anchor>
      <arglist>(const Glib::ustring &amp;uri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_async</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a4fe46f67b2787252395103798a9891d2</anchor>
      <arglist>(const Glib::ustring &amp;uri, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_async</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ab46bc2b5f3672e11ea26c0289aea572e</anchor>
      <arglist>(const Glib::ustring &amp;uri, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>lookup_finish</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ab1a31effc0f9384d7c8904c11fbd5668</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>aa5f390c09142e4a6c8fd6bedf310f154</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a9bf948d2fbf6559b3c28223416b2fb5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ProxyResolver &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>ac8cbc11eb57150f28dfc8f6046bb4648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProxyResolver</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a5884689d8072cb836fd1ddc6c09dc510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ProxyResolver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ProxyResolver.html</anchorfile>
      <anchor>a3f4b5af03af6650ce85eb1df6e50add6</anchor>
      <arglist>(GProxyResolver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::RemoteActionGroup</name>
    <filename>classGio_1_1RemoteActionGroup.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RemoteActionGroup</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a88f54ea1ece68f212f8cac51b37d616e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GRemoteActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aa9e53402a7b3aaf8b27bc344cbc7e769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRemoteActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a33c88565858f3ff88680a2168b6fb1d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate_action</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a8e7d6bd31fe683dfd391911c0739f635</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>change_action_state</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a50b57a393496744613ddb20ad951e510</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>activate_action_vfunc</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a03466a5b72dad8a24ded1b5b8825e5a5</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;parameter, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>change_action_state_vfunc</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a54a92949ab973e6589b6552a1c9f6542</anchor>
      <arglist>(const Glib::ustring &amp;action_name, const Glib::VariantBase &amp;value, const Glib::VariantBase &amp;platform_data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>ad0514a7d8bbf26ed0221d4a1e5eaf68f</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aa12a0373fdd170185d2b238c911672b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RemoteActionGroup</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>aaf64689f4e9d63c615535191d2f736ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::RemoteActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1RemoteActionGroup.html</anchorfile>
      <anchor>a236fcb0eaef59a2d9231d05573a8f7bb</anchor>
      <arglist>(GRemoteActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Resolver</name>
    <filename>classGio_1_1Resolver.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Resolver</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a91fb01b808b2e2d315d9ffc149f1f71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a4d323772493d0cf739816c80f08398d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GResolver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a77d572cc0c4a48c47ec06e9a5f2d02a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GResolver *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae1cf170f1700985b286238d5f1dcbab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aea1576fa2684d9bca58a589098a8371e</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a4aaf18d0bcc67d6d139d993b140a8b14</anchor>
      <arglist>(const Glib::ustring &amp;hostname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_name_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0130482bb442e3a006e06d57665c2318</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_name_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae38a0fc714443839c0bb3a0e40dcd082</anchor>
      <arglist>(const Glib::ustring &amp;hostname, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; InetAddress &gt; &gt;</type>
      <name>lookup_by_name_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>afaf6f9f003fd213ebecb893d60f14380</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>abb5740225148191d2e93d7a6b12caf23</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a81f793a31c8ddaa2bf26361721c3fd1c</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_address_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a3bfd36d312e60b748df35089d5126b4f</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_by_address_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a91d05a43f8083af54826fcb3303e0eba</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>lookup_by_address_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ae127e4682bfb20ef0b292e7b98460762</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aab5e246c4f14e55e079c8a280dd3de5b</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a3b131a66a7a7bd3e89713384ff2f6be3</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_service_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a49d103c02f6e0e8ad5d4e7abb1967ef0</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_service_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a58d46752ddd5305d811df4707c3ce4a7</anchor>
      <arglist>(const Glib::ustring &amp;service, const Glib::ustring &amp;protocol, const Glib::ustring &amp;domain, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>ListHandle_SrvTarget</type>
      <name>lookup_service_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aae68cb39415c9286474d92c7aeba2e47</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0977fbf517bd2b564c32f0aa59180a45</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a0ccfae307c3490ca04047539b02adc9c</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_records_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a93ae3a79790b7cc59680bc096cd053c0</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_records_async</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ac763d0f77c67aeba6bfa52fbdc0eb586</anchor>
      <arglist>(const Glib::ustring &amp;rrname, ResolverRecordType record_type, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::VariantContainerBase &gt;</type>
      <name>lookup_records_finish</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a69b72b15a960fa5ab7ebe4ad25b0589f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_reload</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>a097abf4f88816a46fa2272430a1b5e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aed43435bf27bf2108cb0ec6fb40ff6a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Resolver &gt;</type>
      <name>get_default</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>ac822ffe60ab0ce2acfdc85ccb908f6fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_default</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>afbb1fb4f9edb0e553dbb61ca2437601c</anchor>
      <arglist>(const Glib::RefPtr&lt; Resolver &gt; &amp;resolver)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Resolver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Resolver.html</anchorfile>
      <anchor>aa710fc39dacfe0e34730487741d84fb9</anchor>
      <arglist>(GResolver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ResourceError</name>
    <filename>classGio_1_1ResourceError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a198347173ad61d62bcd6d17e5bd7147d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a74490a5d85788f2e688862e86eeffa46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_FOUND</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a198347173ad61d62bcd6d17e5bd7147d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERNAL</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ad52695ecc4fc823c588771deeb6f9f20a74490a5d85788f2e688862e86eeffa46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceError</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ab2667ba9baeae522292bcc70a81b3e5c</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ResourceError</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>a1514e8d78c53b8e71b994ee31ea9f31b</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1ResourceError.html</anchorfile>
      <anchor>ac60514766d425fcd5780c3daf18ae591</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Seekable</name>
    <filename>classGio_1_1Seekable.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::Settings</name>
    <filename>classGio_1_1Settings.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4c89c4537e05922457cf09f279d6fcab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSettings *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1350e8f1b8a2f0f02c0e00d0cd7077d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSettings *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a3c1af502c3c7a372b07987c4d8e320c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSettings *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ade0eeed443f1dfbc4b649bb294e445f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a3b98d9d71ac41b70f09caf6cb4341183</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac36cd4d128d4af6c0aac34572f4d0930</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::VariantBase &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_int</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1f980e517365e5aa4520e982f5e11b27</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_int</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7b252643c8ce35c7892cb0b831d67046</anchor>
      <arglist>(const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a0e00e5ad1bf22709184cb576e4b933a7</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a08d737b902c907b692894ab577c4142e</anchor>
      <arglist>(const Glib::ustring &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a52bda84f1cb85f2efab6b82c72b41b7f</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ad1b4617d76cc9166e68bc849d22c5677</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac5055dc109007beb12256ca312a0c356</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a81b1bebc7cbf6518aa13ab00bf9966d5</anchor>
      <arglist>(const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_string_array</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae5524c5c368069a6676755c01b968f10</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>set_string_array</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a9e6e1bf8334f40cb76999a0678ac1b41</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::StringArrayHandle &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_enum</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4f6a1558661cba8ceea376fc9f81f52f</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enum</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7fe28dd8bb422f55471d636e6bc5b648</anchor>
      <arglist>(const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a679796b7368f679fa28478c6861cdad9</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a049877419a2d25a282ebbfd013bfea79</anchor>
      <arglist>(const Glib::ustring &amp;key, guint value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Settings &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a98cfd433996d89d031108ca92e4d43d8</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Settings &gt;</type>
      <name>get_child</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ab5afa45ac5edd6ee5c3d55325c9984a9</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aa04dc0ea2f4f4a1c8ad369e5a4238399</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>delay</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a33b026961c111c7cb811dd8886bd10aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae1309ff09c69e278fbb9869219c3ac03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>revert</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac11529acbf1dd553e5f3ebc5c0125ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_unapplied</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a84b99d6419887e0812f3a58eaece8e88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a8fe9b5174d02d36b6b8fdacb0b10a049</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_children</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a482a46eb92894e73e6678ba48d0e8c15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>list_keys</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a28d9dc219f86a7372e9a2dd7638daa9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>range_check</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1b2ab194e7cbf982622eb416a1b68047</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::VariantBase &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a39d962b3e73ec10608a3a744cb4255b4</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::ObjectBase *object, const Glib::ustring &amp;property, SettingsBindFlags flags=SETTINGS_BIND_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a893453b68172f5ecb6c008d2d642da3f</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::PropertyProxy_Base &amp;property_proxy, SettingsBindFlags flags=SETTINGS_BIND_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a47c913cd1ce8122d742911fa54896fa7</anchor>
      <arglist>(const Glib::ustring &amp;key, Glib::ObjectBase *object, const Glib::ustring &amp;property, bool inverted=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind_writable</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ac0da884631dc04c338287e475a5b93fe</anchor>
      <arglist>(const Glib::ustring &amp;key, const Glib::PropertyProxy_Base &amp;property_proxy, bool inverted=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::ustring &amp; &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aedb2d1200cfc06141c56daf8a6c45456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; bool, guint &gt;</type>
      <name>signal_writable_change_event</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae24c1784fc1f2fae4f758ea62bc70c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::ustring &amp; &gt;</type>
      <name>signal_writable_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aa155c63e6c1c5218e3793f86f9cab0ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a47e88375019e4cbd035d8fd02d59e93a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Settings &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a7a7fcf5a7c18611e224541309841205b</anchor>
      <arglist>(const Glib::ustring &amp;schema)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Settings &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>aa985b9447d252fb8d8d1e727e51b0b7b</anchor>
      <arglist>(const Glib::ustring &amp;schema, const Glib::ustring &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; Glib::ustring &gt;</type>
      <name>list_schemas</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a78d4be25c912ac1f00028762ab92c409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a1c549bfe41401ed0fb2eb7059cf8a45b</anchor>
      <arglist>(const Glib::ustring &amp;schema)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Settings</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a947930fadf94b1d0a4860eeafc04dd76</anchor>
      <arglist>(const Glib::ustring &amp;schema, const Glib::ustring &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a4e88dd069cb1aab8e39ca1c058e552ce</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_writable_change_event</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a6824e75577a579815cc9eaf64f8b15f9</anchor>
      <arglist>(guint key)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_writable_changed</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>a2428f5d4bf7c40753fc112412197c5cb</anchor>
      <arglist>(const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Settings &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Settings.html</anchorfile>
      <anchor>ae47167a74b09e7410bc6eadea3ba989c</anchor>
      <arglist>(GSettings *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimpleAction</name>
    <filename>classGio_1_1SimpleAction.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Action</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a4df061176000a3f334c618fdc317fea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSimpleAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a5e6be51f3739bfc8f5d171ceead94835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimpleAction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a4c042fa6100bc50ba35384e7d3a49b69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSimpleAction *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>aa1037e01952aa51e1cfa4f7fc1c24a76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a1a0fe367d458514b102b90ac5efc5106</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a270254674eaa4433f7bab0b7719d0caf</anchor>
      <arglist>(const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>abcf2020650a46989c1f020c8cf5caaaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_enabled</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a971bd274b5369b0c453a0420c6c62869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_name</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a5125b8b382a156cdd620788c57cd33a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_parameter_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a55f58a480a4e600ccff6da73ca91ba8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a9363b36b85553d1c780b3fe3c2c0a83c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantBase &gt;</type>
      <name>property_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a0c1df18026827a20c8c40973d9528f1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::VariantType &gt;</type>
      <name>property_state_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a104199e1c88063e266a6ee54f9298093</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::VariantBase &amp; &gt;</type>
      <name>signal_activate</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a3ee5e9390acd28731295e5b1376df00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::VariantBase &amp; &gt;</type>
      <name>signal_change_state</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a8861ceb4722a00fc82704b74ce81bd85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a77db76b91c7cd2e7116ee27477887cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab49a8754f0d710f5064db95efaf5cd4f</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a6f004f25a8075615b484c1ee9d1474c1</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleAction &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a32d124c2ab4e5a91ac8fc533bf5a75d2</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>a43949bc727a32442900ae8ea776bbb04</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab55f95d22c5850e735ab6ecb578c39c5</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleAction</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ae896e3bd67b9795d07e60aa5b286d7e3</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::VariantType &amp;parameter_type, const Glib::VariantBase &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimpleAction &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimpleAction.html</anchorfile>
      <anchor>ab0efbb7fc4ceb066f17c645163d3a215</anchor>
      <arglist>(GSimpleAction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SimpleActionGroup</name>
    <filename>classGio_1_1SimpleActionGroup.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::ActionMap</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimpleActionGroup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a719df3df308d97d1bdd8478a0498ddce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSimpleActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a591885efdd0d5d9ff0bea5dc79751163</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSimpleActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aa47fcd8481a4fbce9bc48c928926b0e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSimpleActionGroup *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>afa689dddfd869d0b7accbf1a9718aedb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Action &gt;</type>
      <name>lookup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a3a6bc562ad3c2e3cd399c7887a360f54</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aec3a7fdf664a278dd054c8059626fe85</anchor>
      <arglist>(const Glib::RefPtr&lt; Action &gt; &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aaedc9271eedb80de5a7293e63f40a28d</anchor>
      <arglist>(const Glib::ustring &amp;action_name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a31fb0bb3cfe7f41b0ef7f267ff117529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SimpleActionGroup &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>a8a0688cce9d424c41dfe66d225b65def</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleActionGroup</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aedbedbc41fa7a74e864e5979de72b219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SimpleActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SimpleActionGroup.html</anchorfile>
      <anchor>aa6720d18094e26476a8c7f0cc62577c9</anchor>
      <arglist>(GSimpleActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Socket</name>
    <filename>classGio_1_1Socket.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8efac59d8562ceb635b76fe70087572d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocket *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a1d51f7bcd83450331d7261898e9007d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocket *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a51c7fa832ce1c984a7bbceb4d7ba93a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocket *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae2fe06b1a579c40b596933da0ded4e37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a16044bba5924c183cff90f0a4cf47394</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, bool allow_reuse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listen</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af16eed3fd42f3769b5e608f96db214fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a137ae34a8f211eaed11f9a58ca6b3f5e</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4b6c036db4e484e6b7f0419962254888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9ab220f5714a6116d35e846b00f4ad23</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a0828763fe472d46aed833fad30af1c0b</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check_connect_result</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a06b68dc0948e6dfa158487c314f9a521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a742403f4d076ba9050a435d95fea5d1c</anchor>
      <arglist>(char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a73463b7677ffdfddaced49bdf170b4b6</anchor>
      <arglist>(char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_from</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4d2d4382139553881ae139920e8db93e</anchor>
      <arglist>(Glib::RefPtr&lt; SocketAddress &gt; &amp;address, char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_from</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a056fd2c3609971d5befcf2b4ccf51aa3</anchor>
      <arglist>(Glib::RefPtr&lt; SocketAddress &gt; &amp;address, char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adc5c3145109841e0406150ad0b7f547c</anchor>
      <arglist>(const gchar *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a986efa2a33528ce5aba0d7c6a7be1b65</anchor>
      <arglist>(const gchar *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_to</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8b2d4ff883535e696b6cdaacd730f729</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const char *buffer, gsize size, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_to</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a929c8c4e0c10a39d65358853e94d9c4f</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const char *buffer, gsize size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aab30d39b9e73fef6401c76d1d4edc118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a7ac925f7e6592ad4a96afe0f75411a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4f685bc040e9e10abe093deec0719fd7</anchor>
      <arglist>(bool shutdown_read, bool shutdown_write)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connected</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aea9561511b77e652271705fbfdb2f8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>get_available_bytes</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a3cd0af5978112d1c8e2e68e51c9b99c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::IOCondition</type>
      <name>condition_check</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a86fdc5d814fd61abab15ec03c7da20ec</anchor>
      <arglist>(Glib::IOCondition condition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aaae28fa63035c05396064f5f4bb4fc36</anchor>
      <arglist>(Glib::IOCondition condition, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9ae420715a2050cc09112f178bae88ba</anchor>
      <arglist>(Glib::IOCondition condition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_timed_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>addb32e1cc859b9689bf10169dfd70a9c</anchor>
      <arglist>(Glib::IOCondition condition, gint64 timeout, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>condition_timed_wait</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a71a3736a74c730c76e7c9a1670c3fbdd</anchor>
      <arglist>(Glib::IOCondition condition, gint64 timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adc7b9d6cecc1c2234f9979b2ffb1b309</anchor>
      <arglist>(int backlog)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a22a9e70db9abc7fc6383641afde8ee6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a51d5a174441c255b69be9e809cdb96b3</anchor>
      <arglist>(bool blocking)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a1ffcbc226b08ae14856ea0dfe4d580e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a6cfac67927584ae7afe53006eebb06d7</anchor>
      <arglist>(bool keepalive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a530b4adc3d295f7c000981286dee8019</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aac1e2a576e62d1e339eefae1fe12e24b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af3bb5076efcb022e31db9622a1c6e0ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a654e36f8577b61a4df93a0a70479a7f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>adce45788b8ac674bdf32a3ec8fb683c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SocketProtocol</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4ecd966ee71eb956258b289cf63eb43e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SocketType</type>
      <name>get_socket_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a05cd563d5bc68362f3a574054ce63481</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>speaks_ipv4</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ae33e646694bf6c5062683ba4b79d4fe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a2fcda0eba8fcb30bd020624ce3f14d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afcc5b5f562eb0255d846a41bde23d0f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a0c05cab954287b392d6c60bc347ca5d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afe942e5157528b217d7af4a7839a9e7a</anchor>
      <arglist>(guint timeout)</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>receive_with_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a812c649ac510471833c7e3bc82e79d26</anchor>
      <arglist>(gchar *buffer, gsize size, bool blocking, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>gssize</type>
      <name>send_with_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad350079b590c05387736a0fd21e6e0ec</anchor>
      <arglist>(gchar *buffer, gsize size, bool blocking, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8161abb1b8367aed9502d48be2d94172</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afce7afa0966858f85979cbb884294007</anchor>
      <arglist>(guint ttl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a766a2e06ff796c80c42147dfb3e85366</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aacaf83216c9c5c127b6b5f8de425db4c</anchor>
      <arglist>(bool broadcast)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a3aa1d5519cde6e690e7d939b8ec79537</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>af2e4493d31588bb9175b090a061dbd5d</anchor>
      <arglist>(bool loopback)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a750debbc865bf9e6d8fb9b950c04dd67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ac946c14f5f92326c3f062f23ed1d5837</anchor>
      <arglist>(guint ttl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afded8c4757a4f2f8a89b6550e48531db</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific, const std::string &amp;iface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>join_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8db138a424b8b2ab26d62a9ef2b29656</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>leave_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a5c7e7ee9703f5f92dafa0a49cc47ca91</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific, const std::string &amp;iface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>leave_multicast_group</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad6648bc6b4d15ac95903ff47bb8e140f</anchor>
      <arglist>(const Glib::RefPtr&lt; InetAddress &gt; &amp;group, bool source_specific)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a33e80070bf40ed9bff3d6e82fd6bc403</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_blocking</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad4d697455cc099f37e06550d9a6b244c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a83a9ca8602e7d1c500cf9f4f4ab45aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a92f0ebc8891cdcccf8e16d0845921beb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aab16cc7a80fbbf288732298017f21a5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_keepalive</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a545a19bc5664e66900d1ca8c29f7d0e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a7c7ef3aff95f2f829af2d3ce2ef36836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ad08f21c5f7bd408e63815581bbfb48ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ac52bc9e13993758922ce0d3683f336af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_remote_address</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a0affc1f63146a265a1d1c2b884091708</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4042172bae49d0a2721546e31141d572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_timeout</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a19433af6a2d3b85920a709559d81e4a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a89ebb99f61c167a77fe06572a9128cb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a870a59c1f58b2c4b28aa402e7c824cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_broadcast</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aa74338dcee4fb6ef6e3d3db36e0a6347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>afa658ba9c5796b7b5da36734b9c031e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>ab7c54b763b8637fb06f4c03c4796e1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aba76e739cbfd9a6bb69efa3a908b718f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a067aa46a4f9950001e56a315f4313add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_multicast_loopback</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>abe4b46a4077d1889099cf2f11ba92a83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; guint &gt;</type>
      <name>property_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a669af953e00f1041a0088e1da6c7787d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; guint &gt;</type>
      <name>property_multicast_ttl</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a756aad409d9845505a20069923415179</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a175fe732c02ea3e861a86e6c7d690ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Socket &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>aad87b57121a04302e4d9b41c322f59ca</anchor>
      <arglist>(SocketFamily family, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Socket &gt;</type>
      <name>create_from_fd</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a8d0268c13028a8e3eeb551ca14b83b8e</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable=Glib::RefPtr&lt; Cancellable &gt;())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a9d2455e8d617dc7a828480d65db7b473</anchor>
      <arglist>(SocketFamily family, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Socket</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a74d7c4338fcf53743f23926fccc8c6d6</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Socket &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Socket.html</anchorfile>
      <anchor>a4b4f2145105f84580f0a2659a9e8e5db</anchor>
      <arglist>(GSocket *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketAddress</name>
    <filename>classGio_1_1SocketAddress.html</filename>
    <base>Glib::Object</base>
    <base>Gio::SocketConnectable</base>
  </compound>
  <compound kind="class">
    <name>Gio::SocketAddressEnumerator</name>
    <filename>classGio_1_1SocketAddressEnumerator.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketAddressEnumerator</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a4d707b12b6751fb9b2331d66f84578cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketAddressEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a4e72db226aa1d74293b99dc1af495d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketAddressEnumerator *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>aba67cc02b09d4cea3a9a1df65dc9b726</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketAddressEnumerator *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a38a1287d76bd77803c85439077dd019f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a2aac35c9406f82a2c627e70d815ad4f9</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a2a0ab29942c1516f22127aea2a184d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_async</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>aa8c329070a4465ccfce945bb2cb24bd1</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next_async</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a5fccf3d959f7ea6cfab87ef3c751513f</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>next_finish</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>ac125504ce63d7d6f562a197f85b4e174</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>ab18dc61845312c7b34c9bd76914c1e26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketAddressEnumerator &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketAddressEnumerator.html</anchorfile>
      <anchor>a333f94acb7c1811f6c649de72427f9d0</anchor>
      <arglist>(GSocketAddressEnumerator *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketClient</name>
    <filename>classGio_1_1SocketClient.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketClient</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1991de732f92e167da3707775f6f11c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketClient *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a0cab44f8d959f5561ce09db40f37fbab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketClient *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1ec407a9162517f19d11d343376d17b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketClient *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a740585d6674ed733071adb9e363eac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SocketFamily</type>
      <name>get_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a9ea53526045a866da66afd1159d66378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abbb05b3692bd0a44edc3f97909c8a06b</anchor>
      <arglist>(SocketFamily family)</arglist>
    </member>
    <member kind="function">
      <type>SocketType</type>
      <name>get_socket_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad1377482afae4c1dc6e8032c5f186886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_socket_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a48c627d9a69600bb5276a798c4f28bb9</anchor>
      <arglist>(SocketType type)</arglist>
    </member>
    <member kind="function">
      <type>SocketProtocol</type>
      <name>get_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a5a06cbe4921463c3838b092e24f0c922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af1dce19d3e7d03342df0fc59cc5fd180</anchor>
      <arglist>(SocketProtocol protocol)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa86e32cfad979f41423cd5f188668761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a93e3955a892a0f08b838b63536a2a7a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a70fffdb258e88a89b193d55175a4ac11</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adc4843134253e4164ff2a88d7157d941</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a4fe4a6da1e0d5c257a0c403ed5d9ed29</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a3ccf9ffb7da2fda13c486db95190022d</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa3690d023ef5323e4374e64876cf23d8</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2eb95cad0f24bd060e407bb9a03b4e29</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a5dd523c612cbfb762ffbc66e7186a6f9</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adc739baf06362ca1d8b9085c29824cd8</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac5502c79d43617494e04797127d5c683</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac72506d54e8b9a6a288e97890bd02428</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a1c61ed29ce5197e72b910701c2654f0c</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;connectable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ae72760264a73e7013cd6a44118246140</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_host_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>adecacab1a97c8293ff8181c234a7d140</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_host_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad8e0be1bed11128046292c5a8e3e6221</anchor>
      <arglist>(const Glib::ustring &amp;host_and_port, guint16 default_port, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_host_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a519e772e91e08afa019fefd41797f0cf</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_service_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a01c8e91e6b392a2bdd3185e6d272de76</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_service_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac9c710b06b609593e6dada7c8c44e83d</anchor>
      <arglist>(const Glib::ustring &amp;domain, const Glib::ustring &amp;service, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_service_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af3f1887916549a434a2b1dbde2271105</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_uri_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a709a799a21c527ba7601176baf70038f</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_to_uri_async</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ac2412d5e66650cb297edd285225a84d4</anchor>
      <arglist>(const Glib::ustring &amp;uri, guint16 default_port, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>connect_to_uri_finish</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a296f3843b3f97f54af128dbba393493e</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a001cb96759941f49f80ade286c624fb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_enable_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>afdb420ee91818235d2f71b47d9bf46c8</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a5d20e3d087613f4a1eccbd2a53a1b6cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timeout</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a2a7c116f20ac0f5a7cdaf94a85e65edf</anchor>
      <arglist>(guint timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_application_proxy</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ad5f9c381dda58a443fd60fd1701b6394</anchor>
      <arglist>(const Glib::ustring &amp;protocol)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a73d55745e562988f6b87cb96568d44cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketFamily &gt;</type>
      <name>property_family</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a79ffae4c62c27e6aec011cd10c98464d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>ab8e42af55ac48bc251f4651eb0ab304b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketAddress &gt; &gt;</type>
      <name>property_local_address</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>af2e8727f1a260e775833ccb1ca632013</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa49768f6f2dc562e084a089d88d95cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketProtocol &gt;</type>
      <name>property_protocol</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a7ee59695781b1bac375a0c536869feb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a69a469d9b8359e75eed2fb471571e36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; SocketType &gt;</type>
      <name>property_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>aa18167a6287fb0abb0b2e4aadd22457d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abb49a30264aa90f05d7ba58da710711f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketClient &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>a769c130f5e7e5855892e47917a981b8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketClient</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>abb8de2a3854aae7741efae1093929fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketClient &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketClient.html</anchorfile>
      <anchor>afe64acd90030e7e0128470f329b62129</anchor>
      <arglist>(GSocketClient *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketConnectable</name>
    <filename>classGio_1_1SocketConnectable.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::SocketConnection</name>
    <filename>classGio_1_1SocketConnection.html</filename>
    <base>Gio::IOStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketConnection</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a475fbbbecd4fdc73a814f0123f67f9e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a64ee8c7b7af10f959e1ddf0badfdb5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>ad9c7556fe550d295cc67b6d128da1c2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a8aaaeca771edee679c8550972add66ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a609802003402b9d0dc7591dd44da9b6e</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>ab52d690e15693ea6e7dab569d3c3a4a7</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>adeff4ca3d9cd840eda3b0f90f9a8b361</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_async</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a7df5ec63793aeeb6c34ae9b6640ff24b</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connect_finish</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a5ab081e87b8a919c4e83796964a39004</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_connected</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>abbc4ba885dcb7c236a0b1a53a42025b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>get_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>ab5913458956df812371086bda641f512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Socket &gt;</type>
      <name>get_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a06bc1b92d486ef54d617090d5d717c71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a04953ff02f45951bc3d56ef5315a77bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_local_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>aca0be2d355a88059035e0cdd2815070c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a4c31833dcef2ca7ac5a87bfb87868a39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketAddress &gt;</type>
      <name>get_remote_address</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a4150b9c55eecac1aac9e2ecd5587eb51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Socket &gt; &gt;</type>
      <name>property_socket</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a7fc0eff608a308e73361bef904884033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>a2961ac9c441518cc25c8586ab8051e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>aa1808bd3d8d8a069aefe0856d10a1345</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketConnection.html</anchorfile>
      <anchor>af05cf28021ec850be5c5d691d287a19b</anchor>
      <arglist>(GSocketConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketControlMessage</name>
    <filename>classGio_1_1SocketControlMessage.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketControlMessage</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a1897230c7d1ba4c52f73e01964bb8541</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketControlMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a97e6e55c88c8f9b1f1a8f7e3af07c8da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketControlMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a85206fb4ad9d3c31bcce0a451d163334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketControlMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a1065632f7968d8047a9783ec48a8fad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_level</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aef4de30adb5a102526a38f5740058807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_msg_type</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a44dd04c620f42277ab2310b2bfc09d2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>ad4614038ef853aea294d3708005ecda3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a2137251ce7cf980eb5cabb656de266c9</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gsize</type>
      <name>get_size_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>af8675992e2db2694ee1186c39fbaa284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_level_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aa7efa3e548eb61edc214caa2009eaf57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>get_type_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a61d0903d8bfdbc629a1803e47b65db36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize_vfunc</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>ab24ab562d8b308ef103223ebee3ddd47</anchor>
      <arglist>(gpointer data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>aa1eb7a0012fad90911f0151c213a6768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketControlMessage &gt;</type>
      <name>deserialize</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a9c31819203a5acceeed45129575b0f35</anchor>
      <arglist>(int level, int type, gsize size, gpointer data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketControlMessage</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a166e0661cc74954dc20aaebb51a9cc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketControlMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketControlMessage.html</anchorfile>
      <anchor>a7435ea455d9fe22543d135da294db37f</anchor>
      <arglist>(GSocketControlMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketListener</name>
    <filename>classGio_1_1SocketListener.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketListener</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a72cc482888057f1e6747309e382ae669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketListener *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a112233a13be0e663a39b677d8c1a8952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketListener *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aa0befe419ff983ed1b28e5b1c99b511b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketListener *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9cdd04703b826b397f73f0bbf6badf99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a1e0b34890d5475229a96696b3bc136c8</anchor>
      <arglist>(int listen_backlog)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>af14e9d38af77406d829fda8c1090c06b</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aa24cb88b5d0e78505e533e65fb8e7dea</anchor>
      <arglist>(const Glib::RefPtr&lt; Socket &gt; &amp;socket)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_address</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a478b171019370dee7059c4a8fdaf6ec2</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, SocketType type, SocketProtocol protocol, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object, Glib::RefPtr&lt; SocketAddress &gt; &amp;effective_address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_address</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a17961c5dff54d2d6e311c50d2c744bc1</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketAddress &gt; &amp;address, SocketType type, SocketProtocol protocol, Glib::RefPtr&lt; SocketAddress &gt; &amp;effective_address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a3ccffa841f43c0df0f632eb54ad1b441</anchor>
      <arglist>(guint16 port, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a59491f0159709ed08cd71c55cb738def</anchor>
      <arglist>(guint16 port)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>add_any_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a7639ca25eb3efe301ba08df635c2fc37</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>add_any_inet_port</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8cf1d0491124ef2eb40de9a4392e973b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a5a9657d9840d3e9d85efb406bb2393d2</anchor>
      <arglist>(Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a3e79b5b10555b73e4359671cdb53e038</anchor>
      <arglist>(Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac1951a2d25a34ee2305e8d82ae45250f</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a7caaf5afa1bf47bce88db9322271f804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_socket_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8fcc271647a1aa8628d2b2e60dd53d16</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_socket_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aac3928ba157107d4f7609d8686ae4c6e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8875402a2dd1c5b1705236fd89081b3c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Socket &gt;</type>
      <name>accept_socket_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad6aeb8c8c05167b47a1479e2cbf8453c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9329c1c706b3e53e8afbf29b8b320a68</anchor>
      <arglist>(Glib::RefPtr&lt; Object &gt; &amp;source_object, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ae6658e2ae53b7108ee7f6b15dddbfa56</anchor>
      <arglist>(Glib::RefPtr&lt; Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a2a0508771a9423713be6bf642fd1a3c4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac06069d9d192be5fe770272f213bc9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a671c1485ca21446d5e0d2e555c05fa21</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accept_async</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a27c6ce168ebbebd3848b246d7b9ecb64</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad09943bd09686f6cba2a6ad661000592</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result, Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnection &gt;</type>
      <name>accept_finish</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ab9a973269f259350e38b7843dfa93aa5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aa6da0570259eeeee527757628dc0f351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a272ea9e83e8ca5a33d9e5701a5d5e87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_listen_backlog</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a8750daf6ee0ba95a864df26c1a5e6d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>aac0328f0c20a9444065d64b52299ab77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketListener &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>a9ccbd6cc071b99b9631a84e50f920c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketListener</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ac60f15482d07f3d1396f7aba35f03462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketListener &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketListener.html</anchorfile>
      <anchor>ad1255a07751ad4ab4cf8c76ffef73d7e</anchor>
      <arglist>(GSocketListener *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SocketService</name>
    <filename>classGio_1_1SocketService.html</filename>
    <base>Gio::SocketListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SocketService</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a3ab42152cf2cf9e02ab2ecfbdcc85b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a6e08a8e365648d3b7b8d78e694f9e136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>adf4f54dcaa8e285061e5101e1ca37187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSocketService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a02c4f3bec98ba70fd2cc2663227cc5d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a6dfa1c48a8a600b19bd51c211086ebd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>aa7dd1c079cb8348dadfe0aae2fe17165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>ab7a6caab3830da1b5aee21f412165ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; bool, const Glib::RefPtr&lt; SocketConnection &gt; &amp;, const Glib::RefPtr&lt; Glib::Object &gt; &amp; &gt;</type>
      <name>signal_incoming</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a83f8517dbd5d47aca17ae1d473c62ef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a157708420ed2a484dfd60f6cc130fa41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; SocketService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a40a2042eaff19ac07203edf3563770e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SocketService</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>a1c4e09eb82f5cebc40fc679359986999</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_incoming</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>abf31b054cf96e76b61b52d6db828474e</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnection &gt; &amp;connection, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::SocketService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SocketService.html</anchorfile>
      <anchor>af8d745c9fb106e7ae3d85e443e9b7424</anchor>
      <arglist>(GSocketService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::SrvTarget</name>
    <filename>classGio_1_1SrvTarget.html</filename>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a8aedab3176f67cfd04621cf50225cbaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2897e03425b8a29f8199b82bc30c683d</anchor>
      <arglist>(GSrvTarget *gobject, bool make_a_copy=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a39893a5f54f11a7b7aaa1d534ddab141</anchor>
      <arglist>(const SrvTarget &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SrvTarget &amp;</type>
      <name>operator=</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a64c9981401d91fcfdd64e4f3f90de7d4</anchor>
      <arglist>(const SrvTarget &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>afa511e356ee4caa752b9489ca3374542</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2c0d698efc035391fb75d506d6dab1fe</anchor>
      <arglist>(SrvTarget &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GSrvTarget *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a6c3577ff466e24fde7da91dbb8267942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSrvTarget *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>aa1f565df7de8461f815e28175a2746ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSrvTarget *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a6b59da54bc6f97e17b1aa34e4b110608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SrvTarget</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a4c7ea721d35439712d77e031ef46c15e</anchor>
      <arglist>(const Glib::ustring &amp;hostname, guint16 port, guint16 priority, guint16 weight)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_hostname</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a9fde92e3f76aff55f7b93066a0c20e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_port</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a128f762bd022cac6727ad488137d5830</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_priority</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a84eafd7887631f0d910a1d764de166f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get_weight</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>ad86b3be1b52aeb216e915e2620854b16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a2a9daffe8284da566a4ec0a783761088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GSrvTarget *</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>aca9c337827344ebc87400d400e1bd267</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>a227f6813cdaea409308c3253e8d583ee</anchor>
      <arglist>(SrvTarget &amp;lhs, SrvTarget &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Gio::SrvTarget</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1SrvTarget.html</anchorfile>
      <anchor>ab09dd935751f2e15732c5f90d9c49cf8</anchor>
      <arglist>(GSrvTarget *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TcpConnection</name>
    <filename>classGio_1_1TcpConnection.html</filename>
    <base>Gio::SocketConnection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TcpConnection</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a460e51993bd952f688cea902e7d02c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTcpConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a508d386c8df898197a17111b751de117</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTcpConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>aa572fc2171ec0c880b5883b44ec47f63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTcpConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a20bf39e1c736ae833b61b28ae7782f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>af8ebdafdd65cdd474ecda7c6f57480c1</anchor>
      <arglist>(bool graceful_disconnect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a15fd744d53d648f80e11627844b1fa9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a8ba8f75e79336e4ffe0f15a7a2983bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_graceful_disconnect</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>aec8ab6bbdcc9bbc6ab6c0c8c7e7243ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a99aef59b4346899e7377399a35e78ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TcpConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TcpConnection.html</anchorfile>
      <anchor>a49374d0d4787fd7904044cd68369f23b</anchor>
      <arglist>(GTcpConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ThreadedSocketService</name>
    <filename>classGio_1_1ThreadedSocketService.html</filename>
    <base>Gio::SocketService</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadedSocketService</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a3ece526a564acd8b4b9222c43c0e06b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GThreadedSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a96312b53e69f1f46fc6de0561dfaeef2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThreadedSocketService *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>afb30f6700033321e12b7cf6aff933a6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GThreadedSocketService *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>abe79abc5c8e85b5a5a7147060a145318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; bool, const Glib::RefPtr&lt; SocketConnection &gt; &amp;, const Glib::RefPtr&lt; Glib::Object &gt; &amp; &gt;</type>
      <name>signal_run</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a4344f0e5a46d79f3c0e4d8fb77270c8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_max_threads</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>aaacc927ed5c8f7b60fa8fb539bf5e988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a637b8e2bf8c435df23f31527f2eb7cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ThreadedSocketService &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>ae7418690132dfb019dd5c4b44281e3ea</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadedSocketService</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a4d4514d72b332558f58b8511bd64311d</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_run</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>ac464e420a34995b48bba33ee8f8729b9</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnection &gt; &amp;connection, const Glib::RefPtr&lt; Glib::Object &gt; &amp;source_object)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ThreadedSocketService &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ThreadedSocketService.html</anchorfile>
      <anchor>a0456c34762034433f8d642659256fedb</anchor>
      <arglist>(GThreadedSocketService *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ThemedIcon</name>
    <filename>classGio_1_1ThemedIcon.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Icon</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThemedIcon</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>ac5c41faafeffac479079e871edc4a66f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GThemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>aa179d9788f6a17df73a258c6f89049fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThemedIcon *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>ac962dc5a62c1d2b19611a497d92671ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GThemedIcon *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a077eea103e0f5713697f55cb66243997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepend_name</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>aa61fe78bdd8512c138a3ec23c6fa32f6</anchor>
      <arglist>(const std::string &amp;iconname)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append_name</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a15fb8158d3eede3d3aa4050fbdcbe124</anchor>
      <arglist>(const std::string &amp;iconname)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_names</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a1c5b06d64d5b6a6c9419cb2dafe891b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::vector&lt; Glib::ustring &gt; &gt;</type>
      <name>property_names</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>ac80c6ccf9cc538f5925b3d2cf443b740</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_default_fallbacks</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>ac97690ed22203a487653690310e436c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a6406441218f7d0308834b450bdfe6e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ThemedIcon &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a843b98f320f1aa6316d55f266fbf8219</anchor>
      <arglist>(const std::string &amp;iconname, bool use_default_callbacks=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThemedIcon</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>ac378bb89f60335fe0c24e10ce96cba12</anchor>
      <arglist>(const std::string &amp;iconname, bool use_default_callbacks=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ThemedIcon &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ThemedIcon.html</anchorfile>
      <anchor>a6e1861d53d63b929cd84e012e704c396</anchor>
      <arglist>(GThemedIcon *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsCertificate</name>
    <filename>classGio_1_1TlsCertificate.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a941365c68289e03e553000616101a938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsCertificate *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>af366520e55fa9022e7695cedc04b5a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsCertificate *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a4c92271739414eb2afe54c364797267e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTlsCertificate *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ae7f559a234756723f5d7596a9eb9b9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>get_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ac1e0d94616caaab1a9a3e04ce880eaf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>get_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a090d8e401e1f12827090d99c486e6d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a5e73d29d8851a4cf757424bba54c1ee0</anchor>
      <arglist>(const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;trusted_ca) const </arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a379fd39960547b7594f1109bcf20b366</anchor>
      <arglist>(const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity) const </arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>aa91d28433d83d217e78e2d9d625045cf</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;trusted_ca) const </arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ae1dde9fb7a9084246dbe13f58d597f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_same</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a1e3a1097a10f31789d9b152c0865520f</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;cert_two) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a189d92246f3d7ed526af1319d50ad57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; char * &gt;</type>
      <name>property_certificate_pem</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ab7101db2405e9738f276c2937f0f4b8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_issuer</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a595c2538ab7358659e1816d20d354c4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a11c6f8a43a88273e9dff0e6f6694d4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>aef3e63b1a8682751b941fca99fc209b7</anchor>
      <arglist>(const char *data, gssize length=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a2d62a7c80d1af057d77cba63c161b2c2</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a126197114fe8a63e1dcc88d2d537d83f</anchor>
      <arglist>(const std::string &amp;cert_file, const std::string &amp;key_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>create_list_from_file</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a6292baeace775464ecd8bcb221cb521b</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a4dd027b7eb50c9801503be2901bb18ee</anchor>
      <arglist>(const char *data, gssize length)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>ac053dbd350516c06cc0864d7500dae26</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsCertificate</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a013deb6e01061b72f75982a4d404c2ee</anchor>
      <arglist>(const std::string &amp;cert_file, const std::string &amp;key_file)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsCertificate &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsCertificate.html</anchorfile>
      <anchor>a2e3f6ad56cc84de8ba702b64d01d7488</anchor>
      <arglist>(GTlsCertificate *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsClientConnection</name>
    <filename>classGio_1_1TlsClientConnection.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsClientConnection</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a23866f5c96979c2e660a0dc3e78fb722</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsClientConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>aa2a233454a4479e4a9eac541ddf71936</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsClientConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ac088aeb7baaa3ec46ad0280eb1dadec8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>aa9d14ae54d5d8b1cb0010b6ce74049f1</anchor>
      <arglist>(const Glib::RefPtr&lt; SocketConnectable &gt; &amp;identity)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SocketConnectable &gt;</type>
      <name>get_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a09d92dd078b6004b838134b7848c90d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SocketConnectable &gt;</type>
      <name>get_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad0bbb19f23d325ea033f20710bf7a08d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a11c531894de71c99f6026e27f460f931</anchor>
      <arglist>(TlsCertificateFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>get_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a3d23c6efb5ed890b97accdd50b0f7e18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a2f19a71930835d9f953bd8ad1a98700c</anchor>
      <arglist>(bool use_ssl3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a7db26c0f9acd295b6d3825f98d7b6fc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt;</type>
      <name>get_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad587343dfaa4555f2812dc68fe707930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const Glib::ByteArray &gt; &gt;</type>
      <name>get_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a9b6db10308d1c2ab8532eb1dc87249a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::vector&lt; Glib::RefPtr&lt; Glib::ByteArray &gt; &gt; &gt;</type>
      <name>property_accepted_cas</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>af34bd49424b6e0c6fd01b77d265a893f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; SocketConnectable &gt; &gt;</type>
      <name>property_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a95a599ae688a3337e86f97e464a78ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; SocketConnectable &gt; &gt;</type>
      <name>property_server_identity</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ab0f1138f430eb071cdeaeaec521b4a87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ab763b6759e01ca340aaa3917aadad9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_ssl3</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a0f13d404798a57dbe07aa28e6a8c3d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsCertificateFlags &gt;</type>
      <name>property_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>af82fabf3d65d03dc34f578e9267307f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsCertificateFlags &gt;</type>
      <name>property_validation_flags</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a9ff3d6bd5456f6a1aec3cfbf7ea591c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>a86f36661c81dfbdafd70819c19e21e07</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ac9410c59f26a69781ef9633b8a542637</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsClientConnection</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ad7662b3bd7d69c6307adeb82cbf15e72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsClientConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsClientConnection.html</anchorfile>
      <anchor>ac1010b2a63ebf75a4415f2a68b30ac99</anchor>
      <arglist>(GTlsClientConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsConnection</name>
    <filename>classGio_1_1TlsConnection.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsConnection</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a7d5e5dbc0066cf098454003b65a16207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ae513dda3f0487a37e1875c1fa3cb34ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a3e24f1584af4fb572c48fff69538e2e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTlsConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a4a94b2d51c0a2b977033525d2bf237d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a974de86a9b7dc775a6761b5f7f94d45d</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>get_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a09c073fa67f5a6c57227ab3b9897599a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>get_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a559d5812b40763598293532dfdb3cb6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>get_peer_certificate_errors</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a86f8b024dd438ea3a433711b7a7e4724</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>af1365033c5ec49ba91aa83d044509a00</anchor>
      <arglist>(bool require_close_notify)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a37bdc0331982e6b823603a61f9099bac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a20ff315a64ffc0268843b103ea177ec1</anchor>
      <arglist>(TlsRehandshakeMode mode)</arglist>
    </member>
    <member kind="function">
      <type>TlsRehandshakeMode</type>
      <name>get_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a2fbc0f291ab3c8f7f003f5902743199c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a9c6d8d13bbf6e897ed36e69ebcff7ffc</anchor>
      <arglist>(bool use_system_certdb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ac41da72a42636c8110b45c62f8d57dcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsDatabase &gt;</type>
      <name>get_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a41ccee6cf03993882901d7c4078a9837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsDatabase &gt;</type>
      <name>get_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aa1e8bf85c98d0a8d8a44e204a8775fca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a804e8d1f55047648954afa68b4f41573</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsDatabase &gt; &amp;database)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsInteraction &gt;</type>
      <name>get_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a05d31ec8b010650a1a6ec40710e77e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsInteraction &gt;</type>
      <name>get_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a113a17afb6045c82fb148da0cb628bad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a3c655d74f49d3d6e3ee5fd76f2f4cee3</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a09df03551eb0a51a9e27a69888e21eb9</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>af21398df0db2c262d85f0c6e53490361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handshake_async</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aa526566be787e541f06aa9861449554e</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handshake_async</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ab364be698a273fe9f2caaab24c7a66c7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, int io_priority=Glib::PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handshake_finish</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>abd49faefa24f86b5f5f02248eb8d1ca4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>emit_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a56e06ceb75e2a006c3460e771a3f9711</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;peer_cert, TlsCertificateFlags errors)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; IOStream &gt; &gt;</type>
      <name>property_base_io_stream</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aa9564b05470eccdf6b238133de0202d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a04f7860540d388948206654f89940d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a73d45b333fd4cce39e713a3dc814d985</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsDatabase &gt; &gt;</type>
      <name>property_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a313d4c310935af531eff29c95b24bcf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsDatabase &gt; &gt;</type>
      <name>property_database</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a818a49c90b2f28775ea47b328914302d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; TlsInteraction &gt; &gt;</type>
      <name>property_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a1626c66d68bd76754f8b586fd7e5a0e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsInteraction &gt; &gt;</type>
      <name>property_interaction</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a20d303e1a89411cba4d641ce2b759895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>property_peer_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a62062eb1d9a0d08bf4addd269a21b5ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsCertificateFlags &gt;</type>
      <name>property_peer_certificate_errors</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a1a50685f3f382e545060beec92de5092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsRehandshakeMode &gt;</type>
      <name>property_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ae1ed594a9d690b1e5a9d4be9cb6b027a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsRehandshakeMode &gt;</type>
      <name>property_rehandshake_mode</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a55e1427c9d1dc8cc49ea26a7dd907baa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>afa8b1acb49b52aafd8d6a9f38edf425c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_require_close_notify</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a293fafd9326a5d7c4cd2cb623f4450f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a2c08e6c8020b25ba4a1001788537839d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_use_system_certdb</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>ab95b5bbf963f80c969bd3516fc60c922</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; bool, const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;, TlsCertificateFlags &gt;</type>
      <name>signal_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a23f7657a08ab7736cc722bc93fedcbba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handshake_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a301aad50aa459b546016366bea097f5c</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>handshake_async_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aeb5004a32047d0aebf418e8fc4cdf37a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, int io_priority)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>handshake_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>aeef4191d4e1f29b8e614637d73c331e4</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a7cf79e95463df31be51b60c7220c38bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsConnection</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a6b6db22117969cc97d5cb3aac8c94aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_accept_certificate</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>a304409f5ffad261f31ee9bac45a52646</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;peer_cert, TlsCertificateFlags errors)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsConnection.html</anchorfile>
      <anchor>abe30f094769dc5934bdff8f6d05ed3f2</anchor>
      <arglist>(GTlsConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsDatabase</name>
    <filename>classGio_1_1TlsDatabase.html</filename>
    <base>Glib::Object</base>
    <base>Gio::TlsFileDatabase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsDatabase</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>afec226a1aaa74c559737673ecaeed74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a46ffc94af5d046249f0ec2f468d53047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7c5862ec29a5197fbcbfb0ebd1407084</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTlsDatabase *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a89105b7f1c9e8d1244b6d728069ef836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>af3ad197eb6d43e0aaf306439b9831153</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a12257efeef6d0c80d11bf3589cc1f0fb</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a120e21b4c4c095b53152d45f0907ecf9</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a404bc3b5fadeebf1a81852ed89309880</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a8b13516e719326856b9eea2edecd2e7a</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aa27dc31e2c797990e37f87f8671dde73</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab323ae07c0d54f336c7cad0861a9dd7d</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>afb3438936385ef3ed47f0bb0baa672f0</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a389701b01bc65180553d4a4ea8f380fe</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aa3de5b09555e46c71c96a07d23786408</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>af333a2b0e312f1d5a35bd0545ba0408d</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a099830b7c07805181b69b38a9dc99f1f</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab9804cc6fccc72b2819455daa2f24280</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aeadeb191222308f486632fc0235fd328</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ad18d6528be1b721525d99563207e9962</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>verify_chain_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7cd54c0194a4da463fffd7634dbe56e3</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const SlotAsyncReady &amp;slot, TlsDatabaseVerifyFlags flags=TLS_DATABASE_VERIFY_NONE)</arglist>
    </member>
    <member kind="function">
      <type>TlsCertificateFlags</type>
      <name>verify_chain_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9fdb774e63465320cd824622b45a7c68</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aaf791c4ba14ac750dd80553e3db97e65</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a8c117297c443662c7344d2fe026f0840</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ae49c3f2ae0eaa15845165cf3e2f6f578</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7a84b5b4f01764203ea96f928b17b818</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a3a03d3ccaa01aa770a3ce58e5da9eafc</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_issuer_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a71439602495b95281b5fec3243558473</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ac2aaa0a87519609af6fc492d33dc29d5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5847ab922e74871918c18f3365c91019</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a155d15271edb558d2517320980434873</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificates_issued_by_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a30b796abb1a6358aca0f316410dd0ea4</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=Gio::TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a4d03487467372ad15d9af92d66a70e2d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>create_certificate_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a5804706eb5783308c91dfec0dd489559</anchor>
      <arglist>(const Glib::RefPtr&lt; const TlsCertificate &gt; &amp;certificate) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a6833015cec1024527413863ea47b3925</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a2e1424be24f1077258d7146aa335191c</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab3a8aaf9f10886bd2421895bb616e074</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a77698cb177fdba3b1611107a2258aeab</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a17085967a940d6aa52dc7f0683ad15c8</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup_certificate_for_handle_async</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a767cc0219e76658270dca54ec11b34e9</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, TlsDatabaseLookupFlags flags=TLS_DATABASE_LOOKUP_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_finish</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a4718af01eca75c46ac73d7ea173071b5</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsCertificateFlags</type>
      <name>verify_chain_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>abe35327fcafa767038a7c1b12a6cc0ed</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>verify_chain_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>abc5ed4b0954234561910048ab7e85131</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;chain, const Glib::ustring &amp;purpose, const Glib::RefPtr&lt; const SocketConnectable &gt; &amp;identity, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseVerifyFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsCertificateFlags</type>
      <name>verify_chain_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a716ce4d7da59829201cd6fbf5470ebbd</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>create_certificate_handle_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>af5f8c73590c5e25e26f4ddbde6ebcc15</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a54c2c1ff64fda3237a4552966eb5061a</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificate_for_handle_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>aaa9fa8e49d4d24c305a2108aa06e0662</anchor>
      <arglist>(const Glib::ustring &amp;handle, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_for_handle_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9941241f7bb05d3d1e9063a684479796</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a3bd3f2fbd1211bc4b16948ec019d1868</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificate_issuer_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a9b15d1c8c09e964d48273095fd545209</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsCertificate &gt; &amp;certificate, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; TlsCertificate &gt;</type>
      <name>lookup_certificate_issuer_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a7530659ca6e13169254e0291a3adf978</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0543f3797a9ed9268930facfb7dd36f3</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lookup_certificates_issued_by_async_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a0998d23f955bd88e67680e023580d8f0</anchor>
      <arglist>(const Glib::RefPtr&lt; Glib::ByteArray &gt; &amp;issuer_raw_dn, const Glib::RefPtr&lt; TlsInteraction &gt; &amp;interaction, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, TlsDatabaseLookupFlags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; TlsCertificate &gt; &gt;</type>
      <name>lookup_certificates_issued_by_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ab59ce8872c59c031c19dbbbaa8a3280f</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsFileDatabase</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>aac43d9328d7a389e6e6ccdea68384ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsFileDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a4f72402029c7abbbfd6108ebde06a524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsFileDatabase *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a47be98f62456535f267392f4e0fa5b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_anchors</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a4be2eb1786b90fde56bc89e560944ceb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_anchors</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a5fe12a6b225f8094c02485e8199a3185</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>ad93ee4852c961968c772afff9ab7089c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>ab88527a6bfda26b26219c08537dc8336</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>adeae636da0745ec406cee4d12d33beb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsFileDatabase &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>ae0323d5dba1fd00546f731e2e3981e27</anchor>
      <arglist>(const Glib::ustring &amp;anchors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsDatabase</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a877f22992236317991c33049ad1a6c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsFileDatabase</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a3adf128ffe3df48ec74b70054464345b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsDatabase &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsDatabase.html</anchorfile>
      <anchor>a908e93ce6a3e968441e9e5bb1fd1a19b</anchor>
      <arglist>(GTlsDatabase *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsFileDatabase &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsFileDatabase.html</anchorfile>
      <anchor>a1282cbac682346f16d6662eb28dcc208</anchor>
      <arglist>(GTlsFileDatabase *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsFileDatabase</name>
    <filename>classGio_1_1TlsFileDatabase.html</filename>
    <base>Glib::Interface</base>
  </compound>
  <compound kind="class">
    <name>Gio::TlsInteraction</name>
    <filename>classGio_1_1TlsInteraction.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsInteraction</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a37fa70883e522da342c08403d3d16556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsInteraction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aef5c75374b261165ee63adfd37fe0870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsInteraction *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a9782de7a5ca248a8fcaf33ef0d45b090</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTlsInteraction *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a4860c864e43fbac7ab684bc83d1b80f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad039f1e5e3380b5e18a9688c8e86c842</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad3777be74f960cb9088b84ba165b5c65</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>adb02855b2f545378e124e93b1533070a</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a96e0ef839e0455e2f53a06b6428a05b9</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7b4d66b114e41459b191fe0d2a5d18e0</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ask_password_async</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a212378317f976bf3e15fe4fbc84841c7</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>ask_password_finish</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aaebe7fb3af0f25de4802028ff64b1520</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a8a8e339fcb9bb784d161413f8cbbbf69</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>TlsInteractionResult</type>
      <name>invoke_ask_password</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7db91913a1cbb697782a2041797e9463</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsInteractionResult</type>
      <name>ask_password_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>af366896a7de624ee07395126fb210a47</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ask_password_async_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>ad656403cb500082ab0cbe5cb97911ed1</anchor>
      <arglist>(const Glib::RefPtr&lt; TlsPassword &gt; &amp;password, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual TlsInteractionResult</type>
      <name>ask_password_finish_vfunc</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>acb9d9a177cb29430295e1ad933924d58</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>a7cec0343c61089f8e2babcdef0573742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsInteraction</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aca4bb20749e78f17e699bd2269407263</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsInteraction &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsInteraction.html</anchorfile>
      <anchor>aebb25ff82202624e649a490324d9d0cb</anchor>
      <arglist>(GTlsInteraction *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsPassword</name>
    <filename>classGio_1_1TlsPassword.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsPassword</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ab4482bd0877dbe151cf074295dc0a559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsPassword *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>afbe41a3733d1975e84bfe0325b2b2460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsPassword *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a3212b3ec7890cdf3ead3c5901c85866e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTlsPassword *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>af8829fb5aca1fd01df740e31e9b1a5b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const guchar *</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a1c1f1aeb07f66b5b6dcb7d7ce731bcf7</anchor>
      <arglist>(gsize &amp;length) const </arglist>
    </member>
    <member kind="function">
      <type>const guchar *</type>
      <name>get_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ac766a00ce7ac6f3001b290055848f025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ada8e95baa74269804d1b413a73fd561b</anchor>
      <arglist>(const guchar *value, gssize length=-1)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a7e105ee38cee990ed27149cb9281ebad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a5fb9003ae744837b0568209c128dc5c0</anchor>
      <arglist>(const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>TlsPasswordFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a30138f8acf3f4e345ca69f310b86c1d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a039c02e89a4d7b564164018bd790ee70</anchor>
      <arglist>(TlsPasswordFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a2bb97a03f8b975496c39f27633e5b8d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a4d2aa6d47f9439ea2f93778045e7bc2a</anchor>
      <arglist>(const Glib::ustring &amp;warning)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a68eba1b81aa7cd9bae512a8de5be2a2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_description</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ac1b0609126b7a44a13a40eaeca1f42bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsPasswordFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ae7626ffb8912ec455aa675e06adaf229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsPasswordFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a441faed89b44b2ebf179212f3cf8fda1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::ustring &gt;</type>
      <name>property_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a950cd12856f1a390098f8ceee0697c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_warning</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a98c08df1a1694139d363589f921caecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const guchar *</type>
      <name>get_value_vfunc</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ae8156f42cbea7e9e10adc24f69fed6c7</anchor>
      <arglist>(gsize &amp;length) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_default_warning_vfunc</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ad6c34cdb61c01361bc947e7bb331280e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a66e96eac4452a8a591cd968693223ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TlsPassword &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>adc8171bf5483449cde12be79ef7bd014</anchor>
      <arglist>(TlsPasswordFlags flags, const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsPassword</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>ac859451138dae9bb565876659668cfac</anchor>
      <arglist>(TlsPasswordFlags flags, const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsPassword &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsPassword.html</anchorfile>
      <anchor>a50e99606b8aff44dcf8965b5651fa499</anchor>
      <arglist>(GTlsPassword *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::TlsServerConnection</name>
    <filename>classGio_1_1TlsServerConnection.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TlsServerConnection</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a9b39d0753754c6f4711eb5fb669a751e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTlsServerConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a5a9ef06ab0c1d663f2c6409a16b0eaa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTlsServerConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a8534674ac1abcbd2752ca68e3c1c932f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; TlsAuthenticationMode &gt;</type>
      <name>property_authentication_mode</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a3a5218b1fb51b5bac912b54faf0a3c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; TlsAuthenticationMode &gt;</type>
      <name>property_authentication_mode</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a723b742a23effcca954fb1fce8ac5b7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>aad640ce0ed29c2fa0ad04e3fcbd8c188</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a8537455b9ec962b867002fbd931c16fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TlsServerConnection</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>abcf428ffb6736252e0c9a63d8cd5cb8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::TlsServerConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1TlsServerConnection.html</anchorfile>
      <anchor>a987e9b5e8928fd28ef02e306560402d2</anchor>
      <arglist>(GTlsServerConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::Volume</name>
    <filename>classGio_1_1Volume.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Volume</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a3d35e595beb2a74009a06c42a5d26ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GVolume *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>af75306117005b88b2c3f678d7a4e81fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVolume *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a93fc1178f76cfc3bd14210f6e042a526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ac66808206b78f8d721a08c8d3377b02a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_uuid</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a099a949c09c9218e35d04a1fc6b1b526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a1c127e8f75fc65bb5abedc810bae6448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a2a19117219838e05748eff7a432893b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aee2f6e756f7489e58814bbe275574d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Icon &gt;</type>
      <name>get_symbolic_icon</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a637f54895d50bf13e20dbf6202f392d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a666ee0dc70e5f4aefa194d64c489dc5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Drive &gt;</type>
      <name>get_drive</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ac0e436e5d0503de051501b668d674a26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>get_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a24b406858eff715570864fc787520a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Mount &gt;</type>
      <name>get_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a5cbca187b9f04da9ad42d523a3766287</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>adc2040fdc6985444b6f17ee5e1d65573</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>can_eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ae09d0182b4deb272957016fc8b08ec46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>should_automount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a1d2a3feca8a056d064be4db77809bc26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a17599f8132a9c8a4ef9bfc0f5645033a</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ab506f07856b214bbf09d52f76ba94501</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a4620147fca3f9de5bcba571415f47349</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mount</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>aa34ce25eeb35a5c86dcedd1db5104579</anchor>
      <arglist>(MountMountFlags flags=MOUNT_MOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mount_finish</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a76b89705e10164880792f17d6670f655</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ac238638763e26aa3e838d9abc1dd63f7</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7d9d20ce35aceb00c89d093e2e944c79</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0eb78deac53941d4fe83e5b889cdf848</anchor>
      <arglist>(MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a9844d9de96e64d547b9f91c745abb8c6</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7d520a329a66ee666955c0a85b5085ce</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, const SlotAsyncReady &amp;slot, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eject</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a75cf0202b35942ab2c36dc9086704064</anchor>
      <arglist>(const Glib::RefPtr&lt; MountOperation &gt; &amp;mount_operation, MountUnmountFlags flags=MOUNT_UNMOUNT_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eject_finish</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0f7234208d822c48a732ac0a84362473</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_identifier</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a8f1582d0af0f02639db5a9a271c6fa11</anchor>
      <arglist>(const std::string &amp;kind) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>enumerate_identifiers</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a67368fcdf28762a5a7eefbb4fbc82b40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; File &gt;</type>
      <name>get_activation_root</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>adbf1a1ad7b49e483a0990a6d30765010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const File &gt;</type>
      <name>get_activation_root</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a2500d8babf1e205170f8f8a73f3ec884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>sort_key</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ad1a97bfea9c45db7e566f6a8be260a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_changed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a87fc3d3e43291cbaaadf0900e44cc3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy0&lt; void &gt;</type>
      <name>signal_removed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>adda17e98cd46e9a08a78064e4392fd9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a284c9080be40b24012691302ec96568e</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a0a4cd8e115bbc28bf62d2b0997a3f267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Volume</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a3e59a87b47c5e4f14d881ac9767d8c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_changed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>a7a28465c703fbc59e85e62eb0ee53cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_removed</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ace7a6a8760d17f19f0620c4aeb255455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1Volume.html</anchorfile>
      <anchor>ad88965901e2804959a1df827a721a547</anchor>
      <arglist>(GVolume *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::VolumeMonitor</name>
    <filename>classGio_1_1VolumeMonitor.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VolumeMonitor</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac726e6da4be5f55347f3ee81902dd5b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GVolumeMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a26f35f4479293662897520eb7b06542e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVolumeMonitor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>af0f6fda541a5b69b87971e2728f18ca5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GVolumeMonitor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a26c03982f6bebaaa15e5682e051e58c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Drive &gt; &gt;</type>
      <name>get_connected_drives</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac4a5e2749a0439bd75779b2a6b6783da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Volume &gt; &gt;</type>
      <name>get_volumes</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a3781089d1267a1663bc9120ab21db25a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ListHandle&lt; Glib::RefPtr&lt; Mount &gt; &gt;</type>
      <name>get_mounts</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a93723d6d66d3349f0a958390cf9d02af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Volume &gt;</type>
      <name>get_volume_for_uuid</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a8ac52203cace8e352f1adce1fe7f385a</anchor>
      <arglist>(const std::string &amp;uuid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Mount &gt;</type>
      <name>get_mount_for_uuid</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a379fa574824d12a68309d015e367171d</anchor>
      <arglist>(const std::string &amp;uuid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp; &gt;</type>
      <name>signal_volume_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a8d55505f95820af5b7b12dacd3d3969a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp; &gt;</type>
      <name>signal_volume_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab185c68fcb6d60d7c1aa8bb8297a8401</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Volume &gt; &amp; &gt;</type>
      <name>signal_volume_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a79c7a849f12b7849c68d827fc43c47ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp; &gt;</type>
      <name>signal_mount_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>aa2547e4e1ef9a3e172f1ddc3118e6b23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp; &gt;</type>
      <name>signal_mount_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a8b2bab7ce793a0d90dbb4ff681b6f559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp; &gt;</type>
      <name>signal_mount_pre_unmount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab4e2b566fcee2dc841c123f30855fff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Mount &gt; &amp; &gt;</type>
      <name>signal_mount_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab7972f59213c7a01c1086fa668768617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp; &gt;</type>
      <name>signal_drive_connected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>abe8053e0681fca3c8c8af58f8c6a99c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp; &gt;</type>
      <name>signal_drive_disconnected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a2894836b90cc97f18c13137f8ae9cd2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp; &gt;</type>
      <name>signal_drive_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a0f99a06c42eb70593432e305099266ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp; &gt;</type>
      <name>signal_drive_eject_button</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac2fa5fa6ab82a9e29f5cce8975bce81a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Drive &gt; &amp; &gt;</type>
      <name>signal_drive_stop_button</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a393811457e1b82a246459e978478d605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ab5d4bc612bc82b572ec88d66596cf1e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; VolumeMonitor &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a25c516228d8ecedf40d45e82e4bbb3c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Volume &gt;</type>
      <name>adopt_orphan_mount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ad02559ca69412cc5e202302de3f37a95</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>acedc14897e721109142ae5d5fdf4daf0</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ae57c09c2c8e5322ae8f241c92cae5e5c</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_volume_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a9838b33847a193882538a5ecfb5c8679</anchor>
      <arglist>(const Glib::RefPtr&lt; Volume &gt; &amp;volume)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_added</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a5323ab624d89a6488cfd08aaf6ff248e</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_removed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ad912e1894509b15010e87f242982bcf5</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_pre_unmount</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>ac51d8587804a6c09cf1a4476a21bf318</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_mount_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>aa20faca7436ee75febf9112b163e4d77</anchor>
      <arglist>(const Glib::RefPtr&lt; Mount &gt; &amp;mount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_connected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a1c8095c8ab8bed1f8b09d97aedf2ef33</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_disconnected</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a70cb85fac2f07bdec4f896e5e3d7716d</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_drive_changed</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a32f398cde4a82c609f5e60667f4a2afe</anchor>
      <arglist>(const Glib::RefPtr&lt; Drive &gt; &amp;drive)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::VolumeMonitor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1VolumeMonitor.html</anchorfile>
      <anchor>a6e2656255f0de0710b8c35524b67ec89</anchor>
      <arglist>(GVolumeMonitor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ZlibDecompressor</name>
    <filename>classGio_1_1ZlibDecompressor.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZlibDecompressor</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a5f869f7cef4418440d4a1d23d3a75094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GZlibDecompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a19fc90dbdda4ce9ca500e6816111e553</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GZlibDecompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>abbb6971e786e4c778496b4241e0c5c8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GZlibDecompressor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a0ba1589c3a5d99bcda9d3e21841cb66c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a5167b3cfeb8efb5e420d8808cdcd546c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a9cf6178502f4c0c7d63f409ad71013e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>acf86a99c1fdedccb7b47ccb6fd9a5edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ZlibCompressorFormat &gt;</type>
      <name>property_format</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a1f977e361e370687633e55abcb9e1c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>adbbb0696d82de70aa64cd7d6de79cdd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ZlibDecompressor &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a4f967ab580874362e767807c947d43d0</anchor>
      <arglist>(ZlibCompressorFormat format)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZlibDecompressor</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a5403fac899e309691d7b74408f71d6ab</anchor>
      <arglist>(ZlibCompressorFormat format)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ZlibDecompressor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ZlibDecompressor.html</anchorfile>
      <anchor>a6afd05f9de3d453645c59edcaa415817</anchor>
      <arglist>(GZlibDecompressor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::ZlibCompressor</name>
    <filename>classGio_1_1ZlibCompressor.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Converter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ZlibCompressor</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>af47be5e4fdd54ab860d140d2ac1c2f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GZlibCompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a01ff54d8361b903e336aec6e92f522b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GZlibCompressor *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a6824a0bdb8704b0ca4742b3222c15272</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GZlibCompressor *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a341bf71731daccaa3f42268ee7ba7a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a940e3fb8fcd8ba87b985dd95a7e9fe65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const FileInfo &gt;</type>
      <name>get_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a567383d9ce8dd2428d0d11b2689cd92f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a45605429c55830369207c6d95217091a</anchor>
      <arglist>(const Glib::RefPtr&lt; FileInfo &gt; &amp;file_info)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a37f42567c805d02102511ee8fd467129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; FileInfo &gt; &gt;</type>
      <name>property_file_info</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a45a544e874ed6ca6a8a570bb1ff8c93a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ZlibCompressorFormat &gt;</type>
      <name>property_format</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>aa0f266dc90da49d9f34fa6a92e201148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_level</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a7c8bf1bae85a5698bd1876658be1a4c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>ad9b8d9c76918d09f2aaf2ee4597df15d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ZlibCompressor &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a63da0d5047391d705bca206df6cad675</anchor>
      <arglist>(ZlibCompressorFormat format, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ZlibCompressor</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>aeaa8829018f1b0078659a4b690db4c20</anchor>
      <arglist>(ZlibCompressorFormat format, int level)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::ZlibCompressor &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1ZlibCompressor.html</anchorfile>
      <anchor>a202281d829c51c16435d0f59e8cb1f91</anchor>
      <arglist>(GZlibCompressor *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DesktopAppInfo</name>
    <filename>classGio_1_1DesktopAppInfo.html</filename>
    <base>Glib::Object</base>
    <base>Gio::AppInfo</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DesktopAppInfo</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a8dbb1f225b0f9512c0cef546b7d32012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDesktopAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a3098e225a5b79ac496941ae2ab804c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDesktopAppInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>af6f5698a7fd78187bac77556ac54622f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDesktopAppInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a60fe723570666ef15c3b024bdfaf6165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_filename</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>aba05bd82eb13c39f1ec8b6aeb233cd03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_hidden</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a23113d028a906d5b3e2626dc558f36e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get_keywords</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>af50116d4b05e8ece2225503e2a2187f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_startup_wm_class</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>af9cab954da592bbbdf88d20809813ba1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_nodisplay</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a18386532054c0b1be5e95505ac6ca906</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_show_in</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a788388627a997e53e50a97e0721576a9</anchor>
      <arglist>(const std::string &amp;desktop_env) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_generic_name</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>aff07e2f971b7fff38c44b0287f62d3c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_categories</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ad74ff0ef8d13a913ae33eae087295441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>af08dc73fb24e62daeafa3d34e6d9fb7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ab6d9c00e00745f57d2e5b35f83060aad</anchor>
      <arglist>(const std::string &amp;desktop_id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create_from_keyfile</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a4c474a10b54e12eac4cf71ee409c61c0</anchor>
      <arglist>(Glib::KeyFile &amp;key_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; DesktopAppInfo &gt;</type>
      <name>create_from_filename</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>a42dca267f3ad09aaacd4937d20e4ed1d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_desktop_env</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ad3d07eea529c72d51aa868fe30d63392</anchor>
      <arglist>(const std::string &amp;desktop_env)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DesktopAppInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DesktopAppInfo.html</anchorfile>
      <anchor>ac075226810f278017e3a0fbcc372e739</anchor>
      <arglist>(GDesktopAppInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixConnection</name>
    <filename>classGio_1_1UnixConnection.html</filename>
    <base>Gio::SocketConnection</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixConnection</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a8ee81174ad727f97dda927deb38e2ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a9aedb22a5a9706ae144b2d4d21f57a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a1a22c655f5fe21b9c670eaf1ea01eef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a1372a4da6cbecbad7a80dde274921024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ab40d022ded6013f70072d3b69dad9b46</anchor>
      <arglist>(int fd, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a30e52f3f9e7d857d838c554c35b12a33</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>receive_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a33a49ee939a8232b9a41501bf5d90a88</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>receive_fd</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a610d5ea35e1c73126d0fb5e2c24b7c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ad50ee58c1df7c351358e003c70e17d56</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a87fba70bf896bdc80d6aa1945e52a9e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a330ec633856353620e781123ca2ce46d</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>receive_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>abc1fc31f3e4cde0629e2abb5ea4a125b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a764130a5beb5bfd313160492c4824506</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receive_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ac77e3729754f0b57ecd2a84d651d059a</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>receive_credentials_finish</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a9e830b0705f8634e71c1db16e59f641c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>abe2f3b0f09c25340816677fe34653c51</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a41fd0afb1e3aec92b6bd9ee643dd9663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>aca21b23f794135f59c19b7bb0ef5dcbe</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_credentials_async</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>aed2f979f698f7d59eee11522bdb86c0b</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_credentials_finish</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>a1403ab9f18d1d036bd7cfe6466c02906</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;result)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ad1879193e303385ce604d5b190f601f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixConnection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixConnection.html</anchorfile>
      <anchor>ae45f6ec45d565efddc6215d44cc017d4</anchor>
      <arglist>(GUnixConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixCredentialsMessage</name>
    <filename>classGio_1_1UnixCredentialsMessage.html</filename>
    <base>Gio::SocketControlMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a909f7fbdb10c78194acb1dc456bcbc50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixCredentialsMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>aeebce74d3e79d9cc2fab4ec5cf114206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixCredentialsMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ade289685b886a71cc315b1fbc7cbb822</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixCredentialsMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ac68e4ef0dd2786ef1ca482504f14f496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a93647219a626d1b8d21687fd59b196e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a3c49c17b7fcc93db357fe910c06c7cfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Credentials &gt; &gt;</type>
      <name>property_credentials</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ab85c32ad43735228ac1405d01205fe07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>aa318804b7690354e1759d6a6dead2f17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixCredentialsMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ab8eb09a8b771de8ca634e4e4780ac091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixCredentialsMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>accab1f2a5621f97eb320bb283b0a7c39</anchor>
      <arglist>(const Glib::RefPtr&lt; Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_supported</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>abdfe6efc4bf659ca9557ebbfbfdfc6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>af041e1e9b3e01ded2696f73d0d2da394</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixCredentialsMessage</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>a881bd0106fad4a555d0af457cc153458</anchor>
      <arglist>(const Glib::RefPtr&lt; Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixCredentialsMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixCredentialsMessage.html</anchorfile>
      <anchor>ac549c0849cc357cd39da842d53cf02fd</anchor>
      <arglist>(GUnixCredentialsMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixFDList</name>
    <filename>classGio_1_1UnixFDList.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aede85e064f0dd4c5eb8d3157793cd799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a13369401ffc5804f1d08f21f8767efb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixFDList *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>af1eeeaeadc809eba2061eaa6c22d9107</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixFDList *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aa584b34d376383010cbf72c999a39442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_length</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a509aef6d94ac576341436e97073a6cca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>abee8d9542776283f7e621fdfcc03badb</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const Glib::ArrayHandle&lt; int &gt;</type>
      <name>peek_fds</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a3a649024e1da34de1c0659338e7df07c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>steal_fds</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a9167e4e9d3adf8f06405d4928b15b614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>append</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a8e99c050949497a05a6e65e8b2548101</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a550968e6a3d06ece445a5bb6974b3814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ad8865d446428f2590a7393c54e655307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a7095f1477818fa6cce563e1260933c5c</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>aee6c787908674c69e6d39a859c08b7fb</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds, int n_fds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>af994190fe054980701789befb81bbbc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a5b668c1766c02bb0a2661384695942cb</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDList</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>a24759393f0445985fd7ddadbc9acd41d</anchor>
      <arglist>(const Glib::ArrayHandle&lt; int &gt; &amp;fds, int n_fds)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixFDList &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixFDList.html</anchorfile>
      <anchor>ac7c943cb9e8b46bfa4f6bae95569b7c7</anchor>
      <arglist>(GUnixFDList *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixFDMessage</name>
    <filename>classGio_1_1UnixFDMessage.html</filename>
    <base>Gio::SocketControlMessage</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>ad9374324d214f5bfbbb8d609e6ee9fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixFDMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>ae6df3f6003202acb871dd6649ca8d073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixFDMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>ab9af0b10611b98572c784e720a385b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixFDMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a7d9b6c8bfa419d0010712b40c2a7aa4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>get_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>aecf8e53af113ebfc1f47730f2910fdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const UnixFDList &gt;</type>
      <name>get_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>aa7b7f1c61c34cc8298af0c7bb06fc7a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>append_fd</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a7e3f1da81fe5c9a50592cceb30b7a167</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>steal_fds</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a22b7789635651e38f767f0018e447a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; UnixFDList &gt; &gt;</type>
      <name>property_fd_list</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a0246d52fcc7d40e379bcd4b35bfca4aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a89044d58dc1a8e75fe9cd478138a7159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a5195f6f4f5f27112269bbbd5a9996075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixFDMessage &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a3fbc7ddfcfafe4fe966c2195a1a52d4e</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a5a92924d8bd62f4ca79ce0f404d42fc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixFDMessage</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>adb2b787dac2ad113ae51fa34ab5c1cc2</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixFDMessage &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixFDMessage.html</anchorfile>
      <anchor>a25f3bfe7cde291aafaed41c70831e947</anchor>
      <arglist>(GUnixFDMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixInputStream</name>
    <filename>classGio_1_1UnixInputStream.html</filename>
    <base>Gio::InputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixInputStream</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a21a51896fece91ec2034dea1a47f659b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>aa0b863b654d38a9e10f7d7d49b82c5ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixInputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>adc7b87c43606f90378a521df99220971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixInputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a5f05de3f98b2dd8e7f0f2c5038fbc69f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a86e845ad209749c3358634a58be66023</anchor>
      <arglist>(bool close_fd=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a110e2c9201e53065f2140053ebb442c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a6bf398ce16adca31b594e0f4fad40a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a4118d34e42bafc88d95dfcec325b97f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a166520025eb07ed03b1a1f5975eae663</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a68228b1f92fe14caca391fde34b4970b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>ade314f3cd08f1c345d12da1e1d4e6505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixInputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>afa7800e1d9f83a7f6c9e89691ddccab5</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixInputStream</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a7df00cf2bbccab59d70af960eff25bf9</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixInputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixInputStream.html</anchorfile>
      <anchor>a631c2896887d90e8fa13ac8132c9f5db</anchor>
      <arglist>(GUnixInputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixOutputStream</name>
    <filename>classGio_1_1UnixOutputStream.html</filename>
    <base>Gio::OutputStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixOutputStream</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a176f5170fbd871cfc5a9ef60c9fc93e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ac22d258873e88661e29140587687d1d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixOutputStream *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ab9e89719d791ca893290ef5074fe2cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixOutputStream *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a9d24719266d36067e08320d597f84f0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a537abb20777901b37115aa527c791599</anchor>
      <arglist>(bool close_fd=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a9cfacde4665024383bbb8d40c70c739f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a60dbaa5fc2db03c096452693b9eb6bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ada27da3c45a590517ca813a2d6f43154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a5f6e2eba89e9dbeae020e9a0de6ed334</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_close_fd</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a04dc23e51c87866e197a9d0abe28253d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a9d3c789cbcb4cddeb2cacd2320be47ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixOutputStream &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a95b6f82ae5e6dcc7019e825750db9c37</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixOutputStream</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>a846c3deb5eb713f50c5a04422f161623</anchor>
      <arglist>(int fd, bool close_fd)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixOutputStream &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixOutputStream.html</anchorfile>
      <anchor>ad0dc702aab1a415385bf6225fc71388f</anchor>
      <arglist>(GUnixOutputStream *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::UnixSocketAddress</name>
    <filename>classGio_1_1UnixSocketAddress.html</filename>
    <base>Gio::SocketAddress</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UnixSocketAddress</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>acca39acdd0e1bbfbf798a1f1d9f812a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GUnixSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a232d45537663124d0980a342ef82dca0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GUnixSocketAddress *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>ad7d4c4bc8686530c80588e31aea5e856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GUnixSocketAddress *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a8292a986bbaf74ddeef890bad8ad3d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UnixSocketAddressType</type>
      <name>get_address_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a67ec70e3eb2b90f3f7828c524e20cf94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>ab495ed9ed858f100b5c3098e3b26e494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_abstract</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a99e5599b28350e1c3d4c81bbf551041b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; UnixSocketAddressType &gt;</type>
      <name>property_address_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>ab0d96f683d2a7750a4da4fc8fa4d93ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_path</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a6754d5404922e988aa90be5a16b17ba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>abf7f76cf6c0170315cd6454d510b349c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>adb8973f2cea0743cb2458df5b021fd02</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; UnixSocketAddress &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a423ee98fb693fe8e803bc36886b92693</anchor>
      <arglist>(const std::string &amp;path, UnixSocketAddressType type=Gio::UNIX_SOCKET_ADDRESS_ABSTRACT, int path_len=-1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>abstract_names_supported</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a9f4a9fe85d376f592b2c26f009e6e7c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>UnixSocketAddress</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>acdd850b1798201bd86416da7b0c2312a</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::UnixSocketAddress &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1UnixSocketAddress.html</anchorfile>
      <anchor>a11a1d4422a281381af4fff2b98ae33ad</anchor>
      <arglist>(GUnixSocketAddress *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus</name>
    <filename>namespaceGio_1_1DBus.html</filename>
    <namespace>Gio::DBus::Address</namespace>
    <namespace>Gio::DBus::ErrorUtils</namespace>
    <class kind="class">Gio::DBus::ActionGroup</class>
    <class kind="class">Gio::DBus::AuthObserver</class>
    <class kind="class">Gio::DBus::Connection</class>
    <class kind="class">Gio::DBus::Error</class>
    <class kind="class">Gio::DBus::Interface</class>
    <class kind="class">Gio::DBus::InterfaceVTable</class>
    <class kind="class">Gio::DBus::AnnotationInfo</class>
    <class kind="class">Gio::DBus::ArgInfo</class>
    <class kind="class">Gio::DBus::MethodInfo</class>
    <class kind="class">Gio::DBus::SignalInfo</class>
    <class kind="class">Gio::DBus::PropertyInfo</class>
    <class kind="class">Gio::DBus::InterfaceInfo</class>
    <class kind="class">Gio::DBus::NodeInfo</class>
    <class kind="class">Gio::DBus::MenuModel</class>
    <class kind="class">Gio::DBus::Message</class>
    <class kind="class">Gio::DBus::MethodInvocation</class>
    <class kind="class">Gio::DBus::Object</class>
    <class kind="class">Gio::DBus::Proxy</class>
    <class kind="class">Gio::DBus::Server</class>
    <class kind="class">Gio::DBus::SubtreeVTable</class>
    <member kind="function">
      <type>void</type>
      <name>unown_name</name>
      <anchorfile>namespaceGio_1_1DBus.html</anchorfile>
      <anchor>a56eb716650330a147b033d7aec56e0ed</anchor>
      <arglist>(guint owner_id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::ActionGroup</name>
    <filename>classGio_1_1DBus_1_1ActionGroup.html</filename>
    <base>Glib::Object</base>
    <base>Gio::ActionGroup</base>
    <base>Gio::RemoteActionGroup</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionGroup</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a24a76e247ad09e2a1df6a9b689955d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>af204b2a102bf4879637ae918c1aa3c8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusActionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>aa4671fdd5f6a69864c04bb880ee9d26e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusActionGroup *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a2778a9ba291334d7c0dc8c938332c10d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>abc5614460a0bd08d0d68479ff825b295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; ActionGroup &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a721e1e3b58be710394342ceb614d6bc6</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;bus_name, const Glib::ustring &amp;object_path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionGroup</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>ac25a47a88a737e1f91def678fa9f0bc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::ActionGroup &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1ActionGroup.html</anchorfile>
      <anchor>a8400f184f1802e90a2479756edfcdd87</anchor>
      <arglist>(GDBusActionGroup *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::AuthObserver</name>
    <filename>classGio_1_1DBus_1_1AuthObserver.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AuthObserver</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a24d790b5f41d2c3e5a8cc9d934bb7fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusAuthObserver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>ad72fce52ddeebcbcaadad55d5b899030</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusAuthObserver *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>ac65a82cefe08f939708b89c1c79aaa39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusAuthObserver *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a9f9851b4c582076849ecf05e313227b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>authorize_authenticated_peer</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>aebe410b2fec6790a9266dbbed96c682e</anchor>
      <arglist>(const Glib::RefPtr&lt; const IOStream &gt; &amp;stream, const Glib::RefPtr&lt; const Credentials &gt; &amp;credentials)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allow_mechanism</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a9a9cf74e710e9f0aae65c1b8bdeecdda</anchor>
      <arglist>(const std::string &amp;mechanism)</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; bool, const Glib::RefPtr&lt; const IOStream &gt; &amp;, const Glib::RefPtr&lt; const Credentials &gt; &amp; &gt;</type>
      <name>signal_authorize_authenticated_peer</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>afdaf630acbe755e457b615ecbde824a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; bool, const std::string &amp; &gt;</type>
      <name>signal_allow_mechanism</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>af8812acf5bd8dd7c793965d057d2cfae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>acdb4d77e3937af8876d752dc7daf27dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; AuthObserver &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a1ade45e319ff8bba975aa28921e53282</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AuthObserver</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a7fe3b156cc2a3b4e4e1c9177581953ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::AuthObserver &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1AuthObserver.html</anchorfile>
      <anchor>a44ead0bde35ce33936e58f54ec2a0d02</anchor>
      <arglist>(GDBusAuthObserver *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Connection</name>
    <filename>classGio_1_1DBus_1_1Connection.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <base>Gio::AsyncInitable</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp; &gt;</type>
      <name>SlotSignal</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>acecd8faa0ef34d31f74439e71b3c7afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::RefPtr&lt; Message &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::RefPtr&lt; Message &gt; &amp;, bool &gt;</type>
      <name>SlotMessageFilter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a105c02349fa25ddce651702bb4917869</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a596b081d3a033ce4f24fe5c1e07ffe76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>add69f87e326bd9bca8c7f6dc2f0dc26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusConnection *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a847a66c3c51c46c57ff96abc8df1a542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusConnection *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae347d91fd24a526c1dbdb880ef584bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a3e52adb1ec39322086ea46921086a6e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a375bd798267feb962c132a45e7374632</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8fe7ecab2b33dc024906878145750ec6</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>close_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8ff3983f37d15d458d54c2e2ea9ee29</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>abf8d39afa23b1379e86a0f6b284353a4</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae4d7067d2611ea60fea58b70c2c02b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a175ef6c874d4cada2e3adfcdaac2fbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a49483ff5c61943724331d67ebc0206b8</anchor>
      <arglist>(const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab9018638a894f353a678ab2dfb4f6871</anchor>
      <arglist>(const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flush_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a67eaf98f454504997b126396b657a321</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a230beebae8da6bc51f269faff7c63957</anchor>
      <arglist>(const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a670fdc08181034cc0e0c6648296acca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a51e5d1b5f7166a0db1921f9008863f28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7457de5a9a316eb6e1b3a9f9093ac635</anchor>
      <arglist>(bool exit_on_close=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_message</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa7cfa8a2901b8301059a3bee28713037</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, SendMessageFlags flags, guint32 &amp;out_serial)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>send_message</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad1a7babf2856bea9b12513070c311458</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, SendMessageFlags flags=Gio::DBus::SEND_MESSAGE_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_message_with_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a90ce8c8c6d8780d47c3d16cfa1b313f6</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, int timeout_msec, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send_message_with_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad218b54738f04a68a40d6d83e7f7a1f6</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, int timeout_msec, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a50a5378cfe6e5fe845d8198fd2451695</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a9750c77a26bc9ba12f3c801bc620767d</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, gint timeout_msec)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>send_message_with_reply_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab0b1e37fb685de42b19ded29dbcdccdd</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;message, gint timeout_msec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start_message_processing</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8108e440014500506db4cf1b23ea40a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa188059029093a62e3d1b3b135e0e79b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aebf8f77b4f2aef8d1fa05edce3e48f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const IOStream &gt;</type>
      <name>get_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>accaf9db87e08dc4a3cef8917092bd77b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4bb51d7fc509a98ce5531390ba508804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_unique_name</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a0f716d616a32a2e2e7acc210112bc2bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CapabilityFlags</type>
      <name>get_capabilities</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a791f703904ec858ba568f927d64cb49e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Credentials &gt;</type>
      <name>get_peer_credentials</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad841b9beb348c2e21dcb9e395ee4f28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Credentials &gt;</type>
      <name>get_peer_credentials</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2babc0d08159c8b10ffd88c9784c9802</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_last_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aaccad0aa548c84f2d163a2d04149811b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8d3e02423495de8270e69cd8d62b7468</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ac893cdf61255a10e961cebfe01eb3e4e</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a230fbe18c49f2fe73857db0919b14edb</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4dff33b1a72b80a4b8250989852515a7</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a5ac851e5ccb18bd0adbce4c96e1c5bef</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>afe25016fb8955b34c84e0f36cf50ad0e</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2684a36e027deb0642bedea7e2566471</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a87f6faddd2fc9ba4ab4b72dbeccb4c4d</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>abe7c898b4fa3cdafa3d2650480ef9045</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a222a433975bb921fe7683fe9c41eda01</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, const Glib::ustring &amp;bus_name=Glib::ustring(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE, const Glib::VariantType &amp;reply_type=Glib::VariantType())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aae264d3104fe85f8482580db5b7761fa</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::ustring &amp;signal_name, const Glib::ustring &amp;destination_bus_name=Glib::ustring(), const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase())</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>signal_subscribe</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>af981fb48982bce9d4a27f70127df1cb5</anchor>
      <arglist>(const SlotSignal &amp;slot, const Glib::ustring &amp;sender=Glib::ustring(), const Glib::ustring &amp;interface_name=Glib::ustring(), const Glib::ustring &amp;member=Glib::ustring(), const Glib::ustring &amp;object_path=Glib::ustring(), const Glib::ustring &amp;arg0=Glib::ustring(), SignalFlags flags=Gio::DBus::SIGNAL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal_unsubscribe</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a57d8deeb855f3f88d5a2164d224305ea</anchor>
      <arglist>(guint subscription_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>add_filter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a629c7cbe6bd620e240d69db4adf8362e</anchor>
      <arglist>(const SlotMessageFilter &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_filter</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa5f078c02692ec5effae8dccbbff2e55</anchor>
      <arglist>(guint filter_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a0c2974543543686c386601b656577593</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;interface_info, const InterfaceVTable &amp;vtable)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad8e4a523adc691ff00d946df0fc779c6</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;interface_info)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregister_object</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a32b998fc3e093c678e6ff4e76ec29874</anchor>
      <arglist>(guint registration_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>register_subtree</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ade98c63ff3e2ce7906ca4a2f63849e07</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const SubtreeVTable &amp;vtable, SubtreeFlags flags=Gio::DBus::SUBTREE_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unregister_subtree</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aae026eab32dc1e6ef7eb865e2d83dc1d</anchor>
      <arglist>(guint registration_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>export_action_group</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2e5b3f466471359b4595b5846508c1a2</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; ActionGroup &gt; &amp;action_group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport_action_group</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1538b4a84bd4cb0457ba6e6dde0023b3</anchor>
      <arglist>(guint export_id)</arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>export_menu_model</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad1595ae3e1d1f1c123245d488719923c</anchor>
      <arglist>(const Glib::ustring &amp;object_path, const Glib::RefPtr&lt; MenuModel &gt; &amp;menu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unexport_menu_model</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a3b99e116bcc0a8d15cf0e9c857c62e07</anchor>
      <arglist>(guint export_id)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; CapabilityFlags &gt;</type>
      <name>property_capabilities</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad66c7d3c04c0a39e46a9a5342dc91a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8a23822f8e767a79b37238f110eef77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; bool &gt;</type>
      <name>property_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a05f97a97a09455e024a2f26994d49edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_exit_on_close</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>af3402d2b61aee521e7a459067053157d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a13b65cb8957de1a08f67b2a8d6e9c8e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; IOStream &gt; &gt;</type>
      <name>property_stream</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>abefe6a30bf9f66095c24c07c5e535e17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_unique_name</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a991a3b749663686639bc0644b139c65d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, bool, const Glib::Error &amp; &gt;</type>
      <name>signal_closed</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a99d65f5ee4424eb0e48fd1725ff6ab37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7665f77b2bb56246924ea5c74934490d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a5345c2d7d7f861b0ea4ac67dffd7d5ce</anchor>
      <arglist>(BusType bus_type, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a96b8301d5d4e6a273e4bdb7778d44062</anchor>
      <arglist>(BusType bus_type, const SlotAsyncReady &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a20675d9ff219ddd7b9cd5d1ba4a88bbc</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa9f6ff4fb7546a1600331322b33fbbfb</anchor>
      <arglist>(BusType bus_type, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ae29f76f48d11685c100e8c880e36b3fd</anchor>
      <arglist>(BusType bus_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab8be27670e0620aad315dfc0c1622ab6</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1dcee35e3382f914ad5be4826280863f</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a6128ef85de1f6a2a51fcd91275e68162</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ab8706a0e8d8f2da249570e5547269c72</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8c3932d624428f9690f86fa2b2dcee65</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2cfcac77627389fa35f59b52118fe0c5</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a27dedd455d630f22c3e4b1023fce7bd1</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7541aa16a44ecc8ed8d64f143db86ebc</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_address</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a7121db082da9ce50211bfab69809837b</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a4ae2f4459a49c6c839758c38ecdd3672</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2f7a4d6ca323970acefe79bbbba13249</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aec7e858016e9d3ae71d0c3012a91a523</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad43388dd55566edb548d64e32ea36985</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aad07acd92fd5f4ed311ea58b1b34283c</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a112688a795a494f3cce20a04a970e4ef</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a253cf6aaeb3ff39e1592e85f1a345f83</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a86f0ea860d112f58106d301affaa8561</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Connection &gt;</type>
      <name>create_for_address_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8f8b7483eba4c31bafb913897e5b8fdd</anchor>
      <arglist>(const std::string &amp;address, ConnectionFlags flags=Gio::DBus::CONNECTION_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>af878a70230eb69d741b2d1c8232cc913</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aea70bb4950131f4d82369c4cf7ff1ff3</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a8a5dba32c3c0e009d5d708ffa01103ee</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa8f6f71d2be7e766d18e9f821cb395a2</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a49a0547444d8d1163539846819ad8d6a</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a54fdc2908d6d79353d20811ac5294043</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a1e3ec1b9a12e9d9bdf75282369beae67</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>ad378cce5c5a126f53777974b61344b48</anchor>
      <arglist>(const Glib::RefPtr&lt; IOStream &gt; &amp;stream, const std::string &amp;guid, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a58cdb0630ee4653cb6aacf05e4d658f5</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aa9d757914a177ecad860411a8577dbf8</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a2cc37e887b2682139f50384b91d353aa</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a11b17fe1e5dffc1a0a172f0567f13cd4</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady &amp;slot, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aea75f881fbeb206f61a58361343a6daa</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a45dd0879fd3bf7bd84fd6c2ad27f7f38</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>aff151a70d4b13e138b5417c0ee4becaf</anchor>
      <arglist>(const std::string &amp;address, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Connection</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a6e0b9bacc7173bb7020506cfcd66cde3</anchor>
      <arglist>(const std::string &amp;address, ConnectionFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Connection &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Connection.html</anchorfile>
      <anchor>a0969ed44cfb18e10af19b6eec245e420</anchor>
      <arglist>(GDBusConnection *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Error</name>
    <filename>classGio_1_1DBus_1_1Error.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa003bfc2e741b5ebfb9a7d3605f8f6463</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9922a245d0cd1ee36dcabae5bb903ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SERVICE_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa4e78942e7c5e0d2c261c2e6d50ef49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_HAS_NO_OWNER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac679dea1758dedc1c927bab4585e3cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_REPLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8bd4cc5f8c17b0c171635dc30c9683a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9cece67dbdbb9325bde153eddf63641b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_ADDRESS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa743f15c55b2e5e9b4ee1e9d2e94815cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaafb5a3de481ce2db139a5e25928033d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIMITS_EXCEEDED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa57546437f76db1ab77be2e501ff07d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa41194c5fb06d57fbf776d8144c3f1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AUTH_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa76eb6b70744c541b98c6d0850448e2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SERVER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa916030bcb91b7e57bac087c241ea1292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMEOUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7f6a7ef966b5eb53d9aaeed0601c13db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_NETWORK</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaef7df6157523fe345de375e0482aa76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0933947897ee00cd4aae1c4b10d1d12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCONNECTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8640806fb225dbb5307d7ecb08f88a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8bf92054d24384a75ce0757b670f19d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3b0368b6a4afd91a532eb40702e2f4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_EXISTS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caacdea9c3977ef8b6d9c2c201aafb7b03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_METHOD</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadbf2faa3a905a00b25e86dcb06419273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7ba829902fd1c90974fb8caa42bc0bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa067fe182995ef36c8ad45b4e2f1c38ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH_RULE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae1b0c898ae5e137c8ed350fe0421cd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_EXEC_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caacec75c34dd6322fe1c042fa3f6a3878c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FORK_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2047fade67c8aeec43de9496740dfffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_EXITED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac1227f2f8782749753a6f9f65b7d02aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CHILD_SIGNALED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa32c956eed4d8f5df0e1924ef69480d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadc54e80c24b4bc5601e13e51d3fe90d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SETUP_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4c3ef7e56d0d72b4b5530a22acb3a623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_CONFIG_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4903bc528779e50abb5808615a385b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaed5872f80e4fa7920b38b6b89b197b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_SERVICE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa63178c459ec982a0095ca4078b00ac90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_PERMISSIONS_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4cf7431a0c1983dfdb1cbc5aa52a1627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_FILE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa1115b7892ed67e4440dd17fffbdb5928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPAWN_NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae2cf1eababcff7f22c6f6545ef6e6953</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNIX_PROCESS_ID_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa56fd5eb589b0d85e9be79e2fe32cb144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa33bbe6645075512a04ecbb136985c61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_FILE_CONTENT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0c1d27b8b71a137779450559fb865f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SELINUX_SECURITY_CONTEXT_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7a5faed4701846410b1aba4660eaa8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADT_AUDIT_DATA_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa28307889c792551c8f493401faaa68d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OBJECT_PATH_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa364621b1e58b49d88e3dbcdf79026672</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa003bfc2e741b5ebfb9a7d3605f8f6463</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9922a245d0cd1ee36dcabae5bb903ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SERVICE_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa4e78942e7c5e0d2c261c2e6d50ef49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAME_HAS_NO_OWNER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac679dea1758dedc1c927bab4585e3cd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_REPLY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8bd4cc5f8c17b0c171635dc30c9683a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa9cece67dbdbb9325bde153eddf63641b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_ADDRESS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa743f15c55b2e5e9b4ee1e9d2e94815cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_SUPPORTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaafb5a3de481ce2db139a5e25928033d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LIMITS_EXCEEDED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa57546437f76db1ab77be2e501ff07d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCESS_DENIED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaa41194c5fb06d57fbf776d8144c3f1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AUTH_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa76eb6b70744c541b98c6d0850448e2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SERVER</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa916030bcb91b7e57bac087c241ea1292</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIMEOUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7f6a7ef966b5eb53d9aaeed0601c13db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_NETWORK</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaef7df6157523fe345de375e0482aa76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADDRESS_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0933947897ee00cd4aae1c4b10d1d12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DISCONNECTED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8640806fb225dbb5307d7ecb08f88a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa8bf92054d24384a75ce0757b670f19d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa3b0368b6a4afd91a532eb40702e2f4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_EXISTS</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caacdea9c3977ef8b6d9c2c201aafb7b03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_METHOD</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadbf2faa3a905a00b25e86dcb06419273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TIMED_OUT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7ba829902fd1c90974fb8caa42bc0bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MATCH_RULE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa067fe182995ef36c8ad45b4e2f1c38ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MATCH_RULE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae1b0c898ae5e137c8ed350fe0421cd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_EXEC_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caacec75c34dd6322fe1c042fa3f6a3878c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_FORK_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa2047fade67c8aeec43de9496740dfffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_CHILD_EXITED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caac1227f2f8782749753a6f9f65b7d02aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_CHILD_SIGNALED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa32c956eed4d8f5df0e1924ef69480d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caadc54e80c24b4bc5601e13e51d3fe90d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_SETUP_FAILED</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4c3ef7e56d0d72b4b5530a22acb3a623</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_CONFIG_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4903bc528779e50abb5808615a385b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_SERVICE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caaed5872f80e4fa7920b38b6b89b197b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_SERVICE_NOT_FOUND</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa63178c459ec982a0095ca4078b00ac90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_PERMISSIONS_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa4cf7431a0c1983dfdb1cbc5aa52a1627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_FILE_INVALID</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa1115b7892ed67e4440dd17fffbdb5928</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPAWN_NO_MEMORY</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caae2cf1eababcff7f22c6f6545ef6e6953</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNIX_PROCESS_ID_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa56fd5eb589b0d85e9be79e2fe32cb144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_SIGNATURE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa33bbe6645075512a04ecbb136985c61a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_FILE_CONTENT</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa0c1d27b8b71a137779450559fb865f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SELINUX_SECURITY_CONTEXT_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa7a5faed4701846410b1aba4660eaa8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ADT_AUDIT_DATA_UNKNOWN</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa28307889c792551c8f493401faaa68d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OBJECT_PATH_IN_USE</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>acd2c910ef29b6be121c1fde3cfa8f2caa364621b1e58b49d88e3dbcdf79026672</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>a323f21d8dc12b8d0f37c4b5b3531f154</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>ab5608b08033ac5f4849e620f2932a253</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGio_1_1DBus_1_1Error.html</anchorfile>
      <anchor>a2630d25dfcaa4613324e5ed3c624005f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Interface</name>
    <filename>classGio_1_1DBus_1_1Interface.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a5b39747c1f371fe536b064e1cfcc92b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterface *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a7a3da62626d94825436aa4d86f9434c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterface *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a746d82b494305b032c77f2bd86f4b083</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a1b3a83443cf776f5e92fcf29e3553c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>get_info</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a92a51d5bdfdf1335285434f62d4d4c4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ab307a39e08a250f1cc00cbd74a396773</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Object &gt;</type>
      <name>get_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a4b30ae84939f492859ccae0242e9ae55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>dup_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a2286c209a9918991013950ae309af021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Object &gt;</type>
      <name>dup_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>aaf1d897180e8182915705d234fdf0e21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_object</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>ad048f670e0ee5206554d4a107e56b0d2</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Object &gt; &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_info_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>aa425e11984d9823adea54b6dd3900900</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>get_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a590813c6c5008e3c2d07e5cbc4a91768</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>set_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>aa557f659fdc89725727a11bbe459cd95</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Object &gt; &amp;object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>dup_object_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a8800c201ee48ef3dfe812bd29d8fe198</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a4b4a149e5f584b56c4c01d8abba953d3</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a4c2df66edd79414fa41dbe184150c1fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Interface</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a390f865cfe205e996d16f96abbab3f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Interface.html</anchorfile>
      <anchor>a8af37d1125c26d5ed9a6fa7afbb80540</anchor>
      <arglist>(GDBusInterface *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::InterfaceVTable</name>
    <filename>classGio_1_1DBus_1_1InterfaceVTable.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; void, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp;, const Glib::RefPtr&lt; MethodInvocation &gt; &amp; &gt;</type>
      <name>SlotInterfaceMethodCall</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>ae599821f15a4f48a4a9e658da1e03e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, Glib::VariantBase &amp;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp; &gt;</type>
      <name>SlotInterfaceGetProperty</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>acb02fa9e74fb79914086f92b95ed41d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantBase &amp; &gt;</type>
      <name>SlotInterfaceSetProperty</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a2365b90eb4600683b0de5e0a0af4bd23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a0e7c550850e1d8930505db9e017f478d</anchor>
      <arglist>(const SlotInterfaceMethodCall &amp;slot_method_call, const SlotInterfaceGetProperty &amp;slot_get_property=SlotInterfaceGetProperty(), const SlotInterfaceSetProperty &amp;slot_set_property=SlotInterfaceSetProperty())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceVTable</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a3536fe00698e6b273e5c4887082f68bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>abad0b4287afd7f7374fceb39969ae256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterfaceVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a3951f2a36af7a272e07dbfc50696b9c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDBusInterfaceVTable</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>adda40bf9c508d67d322de3a64470e220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceMethodCall *</type>
      <name>slot_method_call_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>aa1ef781409db5046e625144192e56dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceGetProperty *</type>
      <name>slot_get_property_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a1b097927dc86647483ede8df3f511b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotInterfaceSetProperty *</type>
      <name>slot_set_property_</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceVTable.html</anchorfile>
      <anchor>a1096284683f2b9d73ce607fc8ad357b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::AnnotationInfo</name>
    <filename>classGio_1_1DBus_1_1AnnotationInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>acfdc046e2b23d4973132b8e8c5f3e3c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a7a51d4bcaaa49d1e1547b973eb6df1a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusAnnotationInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a4cd47b1916ab575b517b257ccda3cf16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusAnnotationInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aea027830a5e103d919834fcde62d128d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusAnnotationInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a38304a2e8cd9b063013026c4289db688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ustring</type>
      <name>info_lookup</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aaa2f6ec5de178bf5c1effe2a94318731</anchor>
      <arglist>(const Glib::ArrayHandle&lt; Glib::RefPtr&lt; AnnotationInfo &gt; &gt; &amp;annotations, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnnotationInfo</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a4793346d9532466a2acdaaa04ab78bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>a1821b9691e65026f78196c1c704afee8</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::AnnotationInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1AnnotationInfo.html</anchorfile>
      <anchor>aeb8135b78ab3f908f2264a63f6dd78f9</anchor>
      <arglist>(GDBusAnnotationInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::ArgInfo</name>
    <filename>classGio_1_1DBus_1_1ArgInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a68198b45d27940624b097f341d75f907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a1da89d1e167a9da3997856b010b43632</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusArgInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a89a8ec1e84529b99b529a7b91ba9e30f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusArgInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a0a711f689edcb5ef2a7dd5e04fc787fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusArgInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a5153133a447aa3b8a955a843d79980d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ArgInfo</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a4e91f34059a88a4e2ce52ae74709f327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a5f780b9e1dfb180968ef3f613367610b</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::ArgInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1ArgInfo.html</anchorfile>
      <anchor>a00ddff1eea33b3706fbc3a30be00a7ff</anchor>
      <arglist>(GDBusArgInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MethodInfo</name>
    <filename>classGio_1_1DBus_1_1MethodInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a23a15a583b2c6519651fa4eb2b677ecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>afe99e0548c6b97ddd2aa34f7a7ab54d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a4ab8c6e7a8ed42501225ecbdddd2659d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMethodInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a992d797aa32b5819fe1719ad17e2a901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a42da69b351d31875b7859342f6e85221</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MethodInfo</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>ae120ea53641674f77c731d75ffa8d446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a709938fc847451f185d516af9804f34a</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MethodInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInfo.html</anchorfile>
      <anchor>a4f3b875fa0c513dff47215ac106f8ab4</anchor>
      <arglist>(GDBusMethodInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::SignalInfo</name>
    <filename>classGio_1_1DBus_1_1SignalInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>acfbc78ede7976d8aabc45aeaa4daf2e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>abc68770aab964d813a49715d023f0d92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusSignalInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a25a491489ae296d78d5ffb9ab94a8a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusSignalInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a170f760ba55bed18ad5772b3c0d28745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusSignalInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a26d6c13a87ab08e881a9d39a2ae7c84d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SignalInfo</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>ad78a7ecd0ba525a9cdb74c1d840f8c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>aad3b7a58e3b03185ee9097e3b68fceb7</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::SignalInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1SignalInfo.html</anchorfile>
      <anchor>a65d56d02b0dfccea4da32dec69d3e27b</anchor>
      <arglist>(GDBusSignalInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::PropertyInfo</name>
    <filename>classGio_1_1DBus_1_1PropertyInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a20efa0e737af4ed0a88350124e9f1a40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a1554ea50da6fd615d656f058233b7a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusPropertyInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a1fca351057cc59b866505cc345a9103a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusPropertyInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>aad77d94e240d1e623708426687b27422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusPropertyInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a194ff872c716bb1594115f541694adb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PropertyInfo</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a08d8c556e1ba7093ed7a9ac2761944e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a24cc4a36e7d9fc8119f12c138f135ef2</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::PropertyInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1PropertyInfo.html</anchorfile>
      <anchor>a509922a5e403fa5fbf506534c1ad3ecb</anchor>
      <arglist>(GDBusPropertyInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::InterfaceInfo</name>
    <filename>classGio_1_1DBus_1_1InterfaceInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>abb898ba379e79d3eb91ac3639e4576b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a3ea0bec4ab58d2519dad00231abb21fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aa678c16176d57220dc4dc979b459ff20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusInterfaceInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ab11f7960f51bfe66edf6c62a5f3058c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusInterfaceInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a58023408ff44050106cf3f8d93b05d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MethodInfo &gt;</type>
      <name>lookup_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ab6be5a8035c3dd912dd8d41d2ce90163</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MethodInfo &gt;</type>
      <name>lookup_method</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a859afc4d148afcf267bb5fcb8f4413df</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; SignalInfo &gt;</type>
      <name>lookup_signal</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>ac962d00be0c6ee06c9d8ba1759896d58</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const SignalInfo &gt;</type>
      <name>lookup_signal</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>adcb5aabbc8bdafca93c524e1c210e796</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; PropertyInfo &gt;</type>
      <name>lookup_property</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aa262d64ac38a5185a0bf7f15ceeb64bb</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const PropertyInfo &gt;</type>
      <name>lookup_property</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a51669def5724879306eada186803d843</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterfaceInfo</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>aeaed9d2554b79135334c2c379767bc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a9f677a6dcc5da5664fb0e129d1e3472f</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::InterfaceInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1InterfaceInfo.html</anchorfile>
      <anchor>a406db3d3ce8c310ad8a24444873e1fdc</anchor>
      <arglist>(GDBusInterfaceInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::NodeInfo</name>
    <filename>classGio_1_1DBus_1_1NodeInfo.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a80b2b6f7ab9061164843a4103d076442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a001c38f11fe2ef0d5bd12d45d65c7c40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusNodeInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a4d4e22a05a2ff68f4f53a6463b729102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusNodeInfo *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a34f8a15a888fd80b1140525667f044c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusNodeInfo *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a46e30be1fcb87a45a5db8d0f31ddc674</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ad30cfe6b4f39d7da66781069578ba15c</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a0df5082cfb9a1f102767b8119688ad9e</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>acffd3dc22a4a392081061df969603e24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>lookup_interface</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a1442f4e86bbea69cc6bb559c5db68d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; NodeInfo &gt;</type>
      <name>create_for_xml</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ad1429c7da8cc66d2fc6c621dfa83d62e</anchor>
      <arglist>(const Glib::ustring &amp;xml_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeInfo</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>abc26ca0d68c3810f0f89641a86c7af95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>a3edceb1043c6d1acd4b6036cf84119d3</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::NodeInfo &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1NodeInfo.html</anchorfile>
      <anchor>ac728ff5153511f439e9b6fe2a276f60e</anchor>
      <arglist>(GDBusNodeInfo *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MenuModel</name>
    <filename>classGio_1_1DBus_1_1MenuModel.html</filename>
    <base>Gio::MenuModel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MenuModel</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>aaa35f975fae85c911214a8db9519c242</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a86e78b6399f1dce5e5f660bc6803f27d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMenuModel *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a9185add6e4d5049d4559291532d1434d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusMenuModel *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>abad56da89a63fa5ed876d43e57f83b7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a6995e492bb27ba20e02ffee3629dfee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MenuModel &gt;</type>
      <name>get</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a6bc438a392d6237e2e1625ac3c12c40a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;bus_name, const Glib::ustring &amp;object_path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MenuModel</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a1695e3aced2d796aab216fc5644ac053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MenuModel &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MenuModel.html</anchorfile>
      <anchor>a43648ab7851c659c19a0a0e5cdebcd98</anchor>
      <arglist>(GDBusMenuModel *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Message</name>
    <filename>classGio_1_1DBus_1_1Message.html</filename>
    <base>Glib::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>ByteOrder</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78da584cce05a0bf010785e9f0f91e545e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78dadb9033fe7d977ea0b78d2132a618e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BYTE_ORDER_BIG_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78da584cce05a0bf010785e9f0f91e545e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BYTE_ORDER_LITTLE_ENDIAN</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac8c292dccde34caf51d094d2b794d78dadb9033fe7d977ea0b78d2132a618e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Message</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a430de96301fc3de45ce0f06ebe6dbed6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3f7e482da2809d0c027cafffeae16257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMessage *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a912a935062ab01f63ad616f510e9e5ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusMessage *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a18c8d67b0e982d6790bc880f39892998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>print</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9df094e7afdffcd82838d08002436005</anchor>
      <arglist>(guint indent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_locked</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a09301b6853e76ed5d22a9191727f9f13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aef5359c1545cfe63a9d7fddbf5cafbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>copy</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a168aaf002d662f3d72f0895059a2cf27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MessageType</type>
      <name>get_message_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9f606b83a40a3b0805932cfa7e219b6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_message_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a934241dade435756a7a585f3cda9cd67</anchor>
      <arglist>(MessageType type)</arglist>
    </member>
    <member kind="function">
      <type>ByteOrder</type>
      <name>get_byte_order</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aa274e0c9b1a86c45f30860fff1e517be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_order</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a6b4d1c65c3969bc2cbbe560fcbfbb06b</anchor>
      <arglist>(ByteOrder byte_order)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a1b8f84bfea4b365e68289d96551caecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>af69369632ec43d609032963e3a09797a</anchor>
      <arglist>(guint32 serial)</arglist>
    </member>
    <member kind="function">
      <type>MessageFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a880629fdc3872d6da4a57d84ec12ad2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a47eec341f43c138d6e48a5d187af372a</anchor>
      <arglist>(MessageFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_body</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a00f50b7e946f8d2ddfa4b881ea622ef6</anchor>
      <arglist>(Glib::VariantBase &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_body</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a4a5646dfe35e4a3923a1f225b7a6a801</anchor>
      <arglist>(const Glib::VariantBase &amp;body)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; UnixFDList &gt;</type>
      <name>get_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a2e173562d4ebccaa3c31d3dd68ea00f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const UnixFDList &gt;</type>
      <name>get_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac65884eb7ed0172eaacce6997e8e1d93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9dea4d84c86e5e682dc7a4bdfbaaa15f</anchor>
      <arglist>(const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unset_unix_fd_list</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aad998df53929918d805806f1ffcf82ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_num_unix_fds</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8f150bdcfe44a649a5c6fcbfadc6c83b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_unix_fds</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a487e82c6d1c3f87c7b5f9d3d1fd0b4d1</anchor>
      <arglist>(guint32 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_header</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ad086e91689955ccc0755987978ee900d</anchor>
      <arglist>(Glib::VariantBase &amp;value, MessageHeaderField header_field) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_header</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a25e4b36f8d6545370b07b73f1b815d16</anchor>
      <arglist>(MessageHeaderField header_field, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; guchar &gt;</type>
      <name>get_header_fields</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a31a502bee82da7cdd401615b19b51660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_destination</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>acdb0945677a8dc4cab08c11f03de0af3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_destination</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a9f55a2ed2483623257291269d82d92bf</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_error_name</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ac26a1a1c65687c92faf10075eb29bea1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_error_name</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3a574fe46f7ac14c2c0eba7d609e0ac1</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8a0c555d385b4990313a4afec2240ed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a031683be4ab412b48e4f871f953d6cd7</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_member</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a6c833f051ce98d8e8bee3c843abd1c6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_member</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a2b720f308f381555c56a6ca503b9f0c8</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_path</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>abeb2c2b55e52d0f5b92c0e278f77f9ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_path</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a68f82ad8fa0d23762e1bcf78bb366093</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_reply_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>af036595beddc0513b43ed38542d32c85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_reply_serial</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a7aacc89a5a9f0b638e0ceefbaf50482e</anchor>
      <arglist>(guint32 value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sender</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a652e728966a237c5a45d81dc88633f61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_sender</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a1058eb594d97c6d9e8d88a3ac11e83d8</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_signature</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a5bce2fd83bdbc90409b8ea7fc32cacb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_signature</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8036640a01ed7440b4dbc69863e5889e</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_arg0</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a3a9d1e28f0e0f794683b2a294f3871b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guchar *</type>
      <name>to_blob</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a01cc723d36909410443d2472984074a6</anchor>
      <arglist>(gsize &amp;out_size, CapabilityFlags capabilities=CAPABILITY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_exception</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a1cbb8f345228711415e10c07a0d02bce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_locked</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aa37892570cdf1b7ec2b557c7bfc6a2c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a8e1e7c80ee9fcb6b23fdd3f5f4306fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>aaeb30ae1326793a0fb20c4a9474af4b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>acb4dbe22a0bc284eb2c5d769b3949050</anchor>
      <arglist>(const Glib::ustring &amp;path, const Glib::ustring &amp;interface, const Glib::ustring &amp;signal)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_call</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ab1601981de3c11b36568127d8a0bbb0e</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;path, const Glib::ustring &amp;interface, const Glib::ustring &amp;method)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_reply</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>ab009b7c3d9f0c019a041ea276f6a1aa8</anchor>
      <arglist>(const Glib::RefPtr&lt; Message &gt; &amp;method_call_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_method_error_literal</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a167dc73e217ff2907c1f97ad57b555e2</anchor>
      <arglist>(const Glib::RefPtr&lt; const Message &gt; &amp;method_call_message, const Glib::ustring &amp;error_name, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Message &gt;</type>
      <name>create_from_blob</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a0c7976cb84ae87bac48213e2b895b6b6</anchor>
      <arglist>(const guchar *blob, gsize blob_len, CapabilityFlags capabilities=CAPABILITY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gssize</type>
      <name>bytes_needed</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a30c7ec99847e57a6def4e5552cb40ec0</anchor>
      <arglist>(const guchar *blob, gsize blob_len)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Message</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a52d9686c55d462434a5e33d7b4d7a6ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Message &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Message.html</anchorfile>
      <anchor>a5ea3ecdfe6482c3c8cc63feebd68b1ba</anchor>
      <arglist>(GDBusMessage *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::MethodInvocation</name>
    <filename>classGio_1_1DBus_1_1MethodInvocation.html</filename>
    <base>Glib::Object</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MethodInvocation</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a0c953c4b39385be7449b08479d6ddff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInvocation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a5170f94ecb1eea4b4bdfda7859683033</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusMethodInvocation *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a42acbb2b70cc22523cfadf3bc6394300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusMethodInvocation *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a2b8b049e016e86c21f1a77613891d953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_sender</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a6c586cce63e858cb6998293640b6d357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a1d11e61816a462cc24c2f9fda5d23fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a0e873c26948d8fcb0010bf3ac9f8ad5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_method_name</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a93249b67ba41774673851388ea4f154f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const MethodInfo &gt;</type>
      <name>get_method_info</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a01a5aa9c3ddfdc9ff25100fbee06ed74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a4030505610abdcd13811b0e6b6bf71f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a003c905c4ee29e90d510cda1f8d5b630</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Message &gt;</type>
      <name>get_message</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ac65a9d771a9ecb31ca93d0dbf26b3389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Message &gt;</type>
      <name>get_message</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a15939b6de260da384b5709e1adaf3a91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>get_parameters</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a917a8c2e355a6a7647071979764f86c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_value</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a2002577eaaaa2aaac68f8733ccb3fe70</anchor>
      <arglist>(const Glib::VariantContainerBase &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_value</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>abf24a8dc3bc4386b103aad68bfeb7d86</anchor>
      <arglist>(const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a3a8b3cc15c7a943d2af4d68b9ae6289d</anchor>
      <arglist>(const Glib::ustring &amp;domain, int code, const Glib::ustring &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a789f5152c849a5cee67943cff5055a1b</anchor>
      <arglist>(const Glib::Error &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>return_dbus_error</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a93574aa6f245792c9023dbd31b464a09</anchor>
      <arglist>(const Glib::ustring &amp;error_name, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>ae56fd80b7b472fccec979981be36f90b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::MethodInvocation &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1MethodInvocation.html</anchorfile>
      <anchor>a4518a4ce2928aa3898bcbc56b8be7d65</anchor>
      <arglist>(GDBusMethodInvocation *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Object</name>
    <filename>classGio_1_1DBus_1_1Object.html</filename>
    <base>Glib::Interface</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a7774c2679d7cf46e4e3c8345fb22f5f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusObject *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>afc66423a9325d2ed262d4771c531bc4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusObject *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aa9346ac2deae8336e27a777786927b2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a07dbab4f1c9d6991b553c5e1c716564f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a6fde96e6e517df2a3747fff3709a2891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::RefPtr&lt; const Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a35c4800c936947b75af4d054b1fcbeaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>afd65f620dd969e88b80a1433e5859e0e</anchor>
      <arglist>(const Glib::ustring &amp;interface_name)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Gio::DBus::Interface &gt;</type>
      <name>get_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a9d570208c0b6ab7ca0d64d844464cc9d</anchor>
      <arglist>(const Glib::ustring &amp;interface_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp; &gt;</type>
      <name>signal_interface_added</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3c109271a97c09c0b679eb704fb4df96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; void, const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp; &gt;</type>
      <name>signal_interface_removed</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>affc9e6c06773a3fdf48f420f28c7d884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::ustring</type>
      <name>get_object_path_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>abbbf8a705a27f0b9ef566222e45978c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; Glib::RefPtr&lt; Gio::DBus::Interface &gt; &gt;</type>
      <name>get_interfaces_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a57adc86922474da8bb60bc8f0868ce37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Gio::DBus::Interface &gt;</type>
      <name>get_interface_vfunc</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a05dade12b1f7f6d7ce24d54631972177</anchor>
      <arglist>(const Glib::ustring &amp;interface_name) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add_interface</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>acd3a467a75c3fe63a23e7a9c256aa928</anchor>
      <arglist>(GType gtype_implementer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>aab3f3d51f14f4c172eabc347b6a6541b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Object</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a3bc1d9bc5e876549545585f73c6dac55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_interface_added</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a10af6a803b705eb3ccb5a70829531dca</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;interface)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_interface_removed</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a1ec7dea0c9ebebe7f21c75b0573e7bd6</anchor>
      <arglist>(const Glib::RefPtr&lt; Gio::DBus::Interface &gt; &amp;interface)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Object &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Object.html</anchorfile>
      <anchor>a82d99055f7aff9ee73096d0f2c7499fb</anchor>
      <arglist>(GDBusObject *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Proxy</name>
    <filename>classGio_1_1DBus_1_1Proxy.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <base>Gio::AsyncInitable</base>
    <member kind="typedef">
      <type>std::map&lt; Glib::ustring, Glib::VariantBase &gt;</type>
      <name>MapChangedProperties</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a25c5d6d0d7838444265883bcc7b61076</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a63665f1ebe4395e9c5affebb85479b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6f3d48e4bb1b9ca42cc3bb959668d388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusProxy *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a722e055db082a407aea1170c1de7d4ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusProxy *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ac59b0d5b47338306ef4cfa8c977ce039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ProxyFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>afc94ac6b2f8f92c9eb525dd84c45b8e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adbe68149cd5c6b589f0d59e4ece27599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Connection &gt;</type>
      <name>get_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ad11b6302661516758fb636a7b15a648f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a0ea8492ca3912eef8bdf592e2b046071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name_owner</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a5c7b150339f75194c240aa58a85880af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab1c86ed532816654e1b5ebb760a125f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>abeb9043d65c6067a77360ae504a584a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ad58280c7c4d505833b0e7e1cd3f07677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab87e7c4c04b791ba37e9d3e17a7796ed</anchor>
      <arglist>(int timeout_msec=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_cached_property</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a4c8cca5de3310a8aba1915bab1a82718</anchor>
      <arglist>(Glib::VariantBase &amp;property, const Glib::ustring &amp;property_name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_cached_property</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7869a0e88aae51d06e52871a475e883e</anchor>
      <arglist>(const Glib::ustring &amp;property_name, const Glib::VariantBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>get_cached_property_names</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a4130f79dfffe1e8b0c9c0915d5efda26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aa8aa8788431a5caf2bc9378a444e4207</anchor>
      <arglist>(const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; InterfaceInfo &gt;</type>
      <name>get_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>abf89eb0335dfe61d1e620ef38d5f70dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const InterfaceInfo &gt;</type>
      <name>get_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a16b0eb6d59c3c0ea47b9f87c9aeeda13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a63fa8a2629f09c7c8f221f932e4e76b2</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1283e05d1cfb572efccdae40dc52b9e5</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const SlotAsyncReady &amp;slot, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>afe74ab7c2b3d8712a87eeab281c73eab</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a72b268fb39e56ba1eca8957e9e7b44a7</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ad42e51b01b8d4797a868bda00e33de86</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters=Glib::VariantContainerBase(), int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6f057d8423d5cce8cc7486f84cb5f3e5</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a896ee57a19950b83c04baab736b2a6b8</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a40b3f742a74a0f41df0d242b58b34485</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aa0cf6a0ba10bdd2bcd4e6db2a523bce0</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantContainerBase</type>
      <name>call_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>afe234b8ea4f47182241a81da81c6d59f</anchor>
      <arglist>(const Glib::ustring &amp;method_name, const Glib::VariantContainerBase &amp;parameters, const Glib::RefPtr&lt; UnixFDList &gt; &amp;fd_list, Glib::RefPtr&lt; UnixFDList &gt; &amp;out_fd_list, int timeout_msec=-1, CallFlags flags=Gio::DBus::CALL_FLAGS_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; Connection &gt; &gt;</type>
      <name>property_g_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a52b09d8f0bfe487a045227c436efb94b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; int &gt;</type>
      <name>property_g_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7daf31d79be04b1871d875dacb934037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; int &gt;</type>
      <name>property_g_default_timeout</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab9ea39f75d0b69037c74b420788b8442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ProxyFlags &gt;</type>
      <name>property_g_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a302cdead14f2fdd7cb30168188e72c33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; Glib::RefPtr&lt; InterfaceInfo &gt; &gt;</type>
      <name>property_g_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1d110df0380004632fed44d9c994f465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; InterfaceInfo &gt; &gt;</type>
      <name>property_g_interface_info</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7c1ac7cbb2f9ba79b7d1cb50b59fe5cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_interface_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ac9b254f60e469cab8097f065571aac7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_name</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ab669d7b8b1b3fa0bd61ab8fd1ea59311</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_name_owner</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a5d38d44e628611f725a9df609997cd66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::ustring &gt;</type>
      <name>property_g_object_path</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aaed02a9235516769168f19f155707d38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy2&lt; void, const MapChangedProperties &amp;, const std::vector&lt; Glib::ustring &gt; &amp; &gt;</type>
      <name>signal_properties_changed</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a6b8538afe465d8a33f02cf703c905b1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy3&lt; void, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::VariantContainerBase &amp; &gt;</type>
      <name>signal_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a72a72dc1876cab4bec2628b2f06fec29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>ae979764e4465cd63b2c38bdd52e36f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aaf731a7c467f1d2cf244618d242b38d5</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7d3ee2046b0d3190a26f228ad0d9307a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>adff93076a732d276daab6df7ebec0874</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a275770db372ac7becfea4bb5fc2e9154</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>abd62956ae29e83114cbcd0e251ed5ec5</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_bus</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a5cdd31131561783868e2ae4301243abe</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_for_bus</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a33a50d23df199bd9203453400d3c0413</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_for_bus_finish</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a0301a09bbbfd543e1ab33973d199e27c</anchor>
      <arglist>(const Glib::RefPtr&lt; AsyncResult &gt; &amp;res)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_for_bus_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a4803720689c06aedae8f66a347c2cf1f</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Proxy &gt;</type>
      <name>create_for_bus_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a391ae0b70ca6fc02a024240b7c36c28e</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a896a1ec8bbd29ab21d8a97e13968ad3f</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a97c249a3ef3cf77cffd416db3dea4878</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>af7a35e0b7aec710967a3124a211b3a0a</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a196d69a6bba4b735fefbcbd2dd7ee45b</anchor>
      <arglist>(const Glib::RefPtr&lt; Connection &gt; &amp;connection, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a70e259cb3dfaa84130f9fe41e01128fc</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>aea1b302264776e180a6fd7004b7efd1f</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const SlotAsyncReady &amp;slot, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7fd33bce394e8599bf1813bc4d1f1119</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Proxy</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a8b52f673793793decbdccc948222d877</anchor>
      <arglist>(BusType bus_type, const Glib::ustring &amp;name, const Glib::ustring &amp;object_path, const Glib::ustring &amp;interface_name, const Glib::RefPtr&lt; InterfaceInfo &gt; &amp;info=Glib::RefPtr&lt; InterfaceInfo &gt;(), ProxyFlags flags=PROXY_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_properties_changed</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a1ea656f9b265c333de1660285add7128</anchor>
      <arglist>(const MapChangedProperties &amp;changed_properties, const std::vector&lt; Glib::ustring &gt; &amp;invalidated_properties)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_signal</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a09fc487c57ec6adec3b2ed35cde90427</anchor>
      <arglist>(const Glib::ustring &amp;sender_name, const Glib::ustring &amp;signal_name, const Glib::VariantContainerBase &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Proxy &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Proxy.html</anchorfile>
      <anchor>a7b5f416dd07356a82e8e36756cd3fcdf</anchor>
      <arglist>(GDBusProxy *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::Server</name>
    <filename>classGio_1_1DBus_1_1Server.html</filename>
    <base>Glib::Object</base>
    <base>Gio::Initable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a107038d7edb1d4ce4c6132521e80baeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusServer *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a0cd3fabb952476c1b9c21dee304f39c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusServer *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>ac7fd9a1e110e0bd4cf0b3f8647d05125</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDBusServer *</type>
      <name>gobj_copy</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a13e1153d897482bceec00a0632816095</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a7ed47fd7598df4f47078d8245fcf8bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a8d2159c52a96a9459e486b316b959bfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_active</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a29f05f3b211b5264e311797f578bd236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a4e097e0368dfe5bdb291166adeac69a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ServerFlags</type>
      <name>get_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>ae5ed3dfce695fc1b4ed80aadbfd053a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_client_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a16b132b2ee7c5d57147c49dad43cd3d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; bool &gt;</type>
      <name>property_active</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a37af810fddcec69014f07985e8e03bf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>af1f432115e586ca198c5935249f18e48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; Glib::RefPtr&lt; AuthObserver &gt; &gt;</type>
      <name>property_authentication_observer</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a40a9d7c6db1f7093f2de591ed1a240cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_client_address</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a485faad5c4dce0254971852e16bef303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; ServerFlags &gt;</type>
      <name>property_flags</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a2e2946d490461bd3c82d748619b864d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy_ReadOnly&lt; std::string &gt;</type>
      <name>property_guid</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a997b68078d7de6582d5a71d0217944f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::SignalProxy1&lt; bool, const Glib::RefPtr&lt; Connection &gt; &amp; &gt;</type>
      <name>signal_new_connection</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a77d8f4344f2af199ed30dbce6d4f2a94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a56d80950bacc59e76229e05ed3d2c6d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a6294a0f2e2792208b483a50350099ec8</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a2827afcc5b64812180fe4cf3b7fdf8c9</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>aca4e5768123f04ef2fb6de952f351cf3</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Server &gt;</type>
      <name>create_sync</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a571667a8f18f4c7671f45a22bd7444e7</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, ServerFlags flags=Gio::DBus::SERVER_FLAGS_NONE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a7fc50e8bfc813c2f0f01d2cdea326b8d</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a92cc34f87a739d16b17eaede57445e0a</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; Cancellable &gt; &amp;cancellable, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a4235f58283d062167758c5a1582accaa</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, const Glib::RefPtr&lt; AuthObserver &gt; &amp;observer, ServerFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Server</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a4eab0301c1628fce9b2281791f599d1e</anchor>
      <arglist>(const std::string &amp;address, const std::string &amp;guid, ServerFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::DBus::Server &gt;</type>
      <name>wrap</name>
      <anchorfile>classGio_1_1DBus_1_1Server.html</anchorfile>
      <anchor>a54e250956f902b3df91aabd16398ec7c</anchor>
      <arglist>(GDBusServer *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Gio::DBus::SubtreeVTable</name>
    <filename>classGio_1_1DBus_1_1SubtreeVTable.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; std::vector&lt; Glib::ustring &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp; &gt;</type>
      <name>SlotSubtreeEnumerate</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>af740e180d81b2a9277c10493de9f5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; std::vector&lt; Glib::RefPtr&lt; Gio::DBus::InterfaceInfo &gt; &gt;, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp; &gt;</type>
      <name>SlotSubtreeIntrospect</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a096df119a5f4991b4cdbdd5858638742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; const InterfaceVTable *, const Glib::RefPtr&lt; Connection &gt; &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp;, const Glib::ustring &amp; &gt;</type>
      <name>SlotSubtreeDispatch</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a4f483dbeb3fd1712c81e4a78b213a32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>ab142d859127f32a04de93cb4026c085e</anchor>
      <arglist>(const SlotSubtreeEnumerate &amp;slot_enumerate, const SlotSubtreeIntrospect &amp;slot_introspect=SlotSubtreeIntrospect(), const SlotSubtreeDispatch &amp;slot_dispatch=SlotSubtreeDispatch())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubtreeVTable</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a4a8853420d435f12b7402e293a2ac1f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDBusSubtreeVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>af887da7b2fca079327636e969fcdb00e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDBusSubtreeVTable *</type>
      <name>gobj</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a51e9295b3dd3d79923a57b60dc29d4b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDBusSubtreeVTable</type>
      <name>gobject_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a6a62832b20d7dc3ed66eebb8be43bbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeEnumerate *</type>
      <name>slot_enumerate_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a3b044ef83a82c6d956aa9ab23ea8d226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeIntrospect *</type>
      <name>slot_introspect_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a8623b7f82d1c7bfa63de806152e87ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SlotSubtreeDispatch *</type>
      <name>slot_dispatch_</name>
      <anchorfile>classGio_1_1DBus_1_1SubtreeVTable.html</anchorfile>
      <anchor>a911b4dfbb1e21d5eec18d37dd3617f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus::Address</name>
    <filename>namespaceGio_1_1DBus_1_1Address.html</filename>
    <member kind="function">
      <type>void</type>
      <name>get_stream</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>aa58fdb1a4137485cf491c795385932e5</anchor>
      <arglist>(const std::string &amp;address, const SlotAsyncReady slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a5f06f1e4ad09337333452543a485c46a</anchor>
      <arglist>(const std::string &amp;address, std::string &amp;out_guid)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOStream &gt;</type>
      <name>get_stream_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a8c58bb121501abcc87d72ec827c31d14</anchor>
      <arglist>(const std::string &amp;address)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_for_bus_sync</name>
      <anchorfile>namespaceGio_1_1DBus_1_1Address.html</anchorfile>
      <anchor>a4225e7aa980d9938325547157a2f1759</anchor>
      <arglist>(BusType bus_type)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gio::DBus::ErrorUtils</name>
    <filename>namespaceGio_1_1DBus_1_1ErrorUtils.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Glib</name>
    <filename>namespaceGlib.html</filename>
    <namespace>Glib::Ascii</namespace>
    <namespace>Glib::Container_Helpers</namespace>
    <namespace>Glib::Markup</namespace>
    <namespace>Glib::Threads</namespace>
    <namespace>Glib::Unicode</namespace>
    <class kind="class">Glib::BalancedTree</class>
    <class kind="class">Glib::Bytes</class>
    <class kind="class">Glib::ByteArray</class>
    <class kind="class">Glib::Checksum</class>
    <class kind="class">Glib::ConvertError</class>
    <class kind="class">Glib::IConv</class>
    <class kind="class">Glib::Date</class>
    <class kind="class">Glib::DateTime</class>
    <class kind="class">Glib::FileError</class>
    <class kind="class">Glib::DirIterator</class>
    <class kind="class">Glib::Dir</class>
    <class kind="class">Glib::IOChannelError</class>
    <class kind="class">Glib::IOChannel</class>
    <class kind="class">Glib::KeyFileError</class>
    <class kind="class">Glib::KeyFile</class>
    <class kind="class">Glib::MarkupError</class>
    <class kind="class">Glib::Module</class>
    <class kind="class">Glib::NodeTree</class>
    <class kind="class">Glib::OptionError</class>
    <class kind="class">Glib::OptionContext</class>
    <class kind="class">Glib::OptionEntry</class>
    <class kind="class">Glib::OptionGroup</class>
    <class kind="class">Glib::RegexError</class>
    <class kind="class">Glib::Regex</class>
    <class kind="class">Glib::MatchInfo</class>
    <class kind="class">Glib::ShellError</class>
    <class kind="class">Glib::SpawnError</class>
    <class kind="class">Glib::ThreadError</class>
    <class kind="class">Glib::Thread</class>
    <class kind="struct">Glib::StaticMutex</class>
    <class kind="class">Glib::Mutex</class>
    <class kind="struct">Glib::StaticRecMutex</class>
    <class kind="class">Glib::RecMutex</class>
    <class kind="struct">Glib::StaticRWLock</class>
    <class kind="class">Glib::RWLock</class>
    <class kind="class">Glib::Cond</class>
    <class kind="struct">Glib::StaticPrivate</class>
    <class kind="class">Glib::Private</class>
    <class kind="class">Glib::TimeZone</class>
    <class kind="class">Glib::ValueArray</class>
    <class kind="class">Glib::VariantBase</class>
    <class kind="class">Glib::VariantStringBase</class>
    <class kind="class">Glib::VariantContainerBase</class>
    <class kind="class">Glib::Variant</class>
    <class kind="class">Glib::Variant&lt; VariantBase &gt;</class>
    <class kind="class">Glib::Variant&lt; Variant&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Variant&lt; std::string &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</class>
    <class kind="class">Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</class>
    <class kind="class">Glib::VariantIter</class>
    <class kind="class">Glib::VariantType</class>
    <class kind="class">Glib::SignalProxyBase</class>
    <class kind="class">Glib::SignalProxyNormal</class>
    <class kind="class">Glib::SignalProxy0</class>
    <class kind="class">Glib::SignalProxy1</class>
    <class kind="class">Glib::SignalProxy2</class>
    <class kind="class">Glib::SignalProxy3</class>
    <class kind="class">Glib::SignalProxy4</class>
    <class kind="class">Glib::SignalProxy5</class>
    <class kind="class">Glib::SignalProxy6</class>
    <class kind="class">Glib::Value&lt; bool &gt;</class>
    <class kind="class">Glib::Value&lt; char &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Value&lt; int &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned int &gt;</class>
    <class kind="class">Glib::Value&lt; long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long &gt;</class>
    <class kind="class">Glib::Value&lt; long long &gt;</class>
    <class kind="class">Glib::Value&lt; unsigned long long &gt;</class>
    <class kind="class">Glib::Value&lt; float &gt;</class>
    <class kind="class">Glib::Value&lt; double &gt;</class>
    <class kind="class">Glib::Value&lt; void * &gt;</class>
    <class kind="class">Glib::Variant&lt; bool &gt;</class>
    <class kind="class">Glib::Variant&lt; unsigned char &gt;</class>
    <class kind="class">Glib::Variant&lt; gint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint16 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint32 &gt;</class>
    <class kind="class">Glib::Variant&lt; gint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; guint64 &gt;</class>
    <class kind="class">Glib::Variant&lt; double &gt;</class>
    <class kind="class">Glib::ArrayHandle</class>
    <class kind="class">Glib::ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</class>
    <class kind="class">Glib::Sequence</class>
    <class kind="class">Glib::Dispatcher</class>
    <class kind="class">Glib::Error</class>
    <class kind="class">Glib::Exception</class>
    <class kind="class">Glib::HelperList</class>
    <class kind="class">Glib::Interface</class>
    <class kind="class">Glib::ListHandle</class>
    <class kind="class">Glib::PollFD</class>
    <class kind="class">Glib::SignalTimeout</class>
    <class kind="class">Glib::SignalIdle</class>
    <class kind="class">Glib::SignalIO</class>
    <class kind="class">Glib::SignalChildWatch</class>
    <class kind="class">Glib::MainContext</class>
    <class kind="class">Glib::MainLoop</class>
    <class kind="class">Glib::Source</class>
    <class kind="class">Glib::TimeoutSource</class>
    <class kind="class">Glib::IdleSource</class>
    <class kind="class">Glib::IOSource</class>
    <class kind="class">Glib::Object</class>
    <class kind="class">Glib::ObjectBase</class>
    <class kind="class">Glib::PatternSpec</class>
    <class kind="class">Glib::PropertyBase</class>
    <class kind="class">Glib::Property</class>
    <class kind="class">Glib::PropertyProxy</class>
    <class kind="class">Glib::PropertyProxy_WriteOnly</class>
    <class kind="class">Glib::PropertyProxy_ReadOnly</class>
    <class kind="class">Glib::SignalProxyProperty</class>
    <class kind="class">Glib::PropertyProxy_Base</class>
    <class kind="class">Glib::QueryQuark</class>
    <class kind="class">Glib::Quark</class>
    <class kind="class">Glib::Rand</class>
    <class kind="class">Glib::RefPtr</class>
    <class kind="class">Glib::SListHandle</class>
    <class kind="class">Glib::StreamIOChannel</class>
    <class kind="class">Glib::ThreadPool</class>
    <class kind="class">Glib::Timer</class>
    <class kind="struct">Glib::TimeVal</class>
    <class kind="class">Glib::ustring_Iterator</class>
    <class kind="class">Glib::ustring</class>
    <class kind="class">Glib::ValueBase</class>
    <class kind="class">Glib::ValueBase_Boxed</class>
    <class kind="class">Glib::ValueBase_Object</class>
    <class kind="class">Glib::ValueBase_Enum</class>
    <class kind="class">Glib::ValueBase_Flags</class>
    <class kind="class">Glib::ValueBase_String</class>
    <class kind="class">Glib::Value_Boxed</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</class>
    <class kind="class">Glib::Value&lt; std::string &gt;</class>
    <class kind="class">Glib::Value&lt; Glib::ustring &gt;</class>
    <class kind="class">Glib::Value_Enum</class>
    <class kind="class">Glib::Value_Flags</class>
    <class kind="class">Glib::Value_Pointer</class>
    <class kind="class">Glib::Value</class>
    <class kind="class">Glib::Value&lt; T * &gt;</class>
    <class kind="class">Glib::Value&lt; const T * &gt;</class>
    <class kind="class">Glib::ArrayHandler</class>
    <class kind="class">Glib::ArrayHandler&lt; bool &gt;</class>
    <class kind="class">Glib::ListHandler</class>
    <class kind="class">Glib::SListHandler</class>
    <member kind="typedef">
      <type>GTimeSpan</type>
      <name>TimeSpan</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5e89f93f6c0c052accc8c9185df26709</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPid</type>
      <name>Pid</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a48d413f720e558ccfc0e5b141fc07f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>SArray</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4e357796ff84955c958209e877211f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NotLock</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2dd111336e3b057b51ca5871795fffa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2dd111336e3b057b51ca5871795fffa4a9681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2dd111336e3b057b51ca5871795fffa4a9681fb4e85e62ba64e39a12526eaa840</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TryLock</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7441a36336ea4cdb35c0fddbf3f97b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRY_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7441a36336ea4cdb35c0fddbf3f97b19adf6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRY_LOCK</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7441a36336ea4cdb35c0fddbf3f97b19adf6b2565785992ff637cbc453988841d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIORITY_HIGH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834faa3219d7be6fa3282a80d7a850c401db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIORITY_DEFAULT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fa597ed3aa6067516c9c752896f3816b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIORITY_HIGH_IDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834faf2d20696a8afab425c00268d981e9897</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIORITY_DEFAULT_IDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fae8c1127af0a2dab71f196a957dab8375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PRIORITY_LOW</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0c450f82b9e34689e2dda2038ba7834fac6034649b50f9f92a69c1e67b92ecfc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file_set_contents</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a4c6c4cb2115f410b15f09634909b0b7c</anchor>
      <arglist>(const std::string &amp;filename, const gchar *contents, gssize length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>file_set_contents</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a3e51edee26822f97749f589138776850</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;contents)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a671306f4a3a0cae5ab4d7a9d54886592</anchor>
      <arglist>(GIOChannel *gobject, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thread_init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ab26d01c776801f1fff00753e97af4fc7</anchor>
      <arglist>(GThreadFunctions *vtable=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>thread_supported</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad59d126f6197035e6f6a31e7f4d87818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; Glib::ustring &gt;</type>
      <name>VariantBase::cast_dynamic&lt; Variant&lt; Glib::ustring &gt; &gt;</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a807ef11423a04d9f22d6d045fbaed27a</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; std::string &gt;</type>
      <name>VariantBase::cast_dynamic&lt; Variant&lt; std::string &gt; &gt;</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>af44bc8b008e33a7ad5804c9a50226562</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>add_exception_handler</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9a79a59cac511993cfea861bebd2f391</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ac90aee10d0b90e3d8a96a86b5394f87b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; ObjectBase &gt;</type>
      <name>wrap_interface</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a75643fed688d354848a0379d3da00133</anchor>
      <arglist>(GObject *object, bool take_copy=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usleep</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5d75264c8b47f13fb33f973b0d4fc73e</anchor>
      <arglist>(unsigned long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>get_unichar_from_std_iterator</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1053052aad41d0dcf51f36c345bf4625</anchor>
      <arglist>(std::string::const_iterator pos)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2f73967c03d89b0bd6f730f6c36f748d</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9841353e0b6ffe28fd74abe40c4d005d</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ac72231155b9573af4b4d5e6ce6494620</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad806817113ad836cdd8ef5e3913316ab</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a10a4206b41c1c361c29750d76924a752</anchor>
      <arglist>(const Glib::RefPtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>const T::BaseObjectType *</type>
      <name>unwrap_copy</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2792c33cdf2e70d10e432c6cf0fcac76</anchor>
      <arglist>(const Glib::RefPtr&lt; const T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a3c4b3f9afbb1f72fcd0db0fb9d96a23e</anchor>
      <arglist>(GDrive *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aa536133405cc52c5887f4b87879e3bd6</anchor>
      <arglist>(GFile *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aecec41aa86f5a57489c23f367593802c</anchor>
      <arglist>(GMount *object, bool take_copy)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>wrap</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aa4ad6dff9c5f095f3b45b6af8124c883</anchor>
      <arglist>(GVolume *object, bool take_copy)</arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BOOL</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a0784d542e9b53c186bba6d96c131a1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a315351b721918e130a75fa64e8f595ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT16</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a88fcc49187b1e775333edd0e31fe9503</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT16</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a7e31fbcbbfdd63b923e5ba30157af2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT32</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1c7d03f6e8a214c0c9e8f93912900803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT32</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aea985e724e3ea31a3a0ba801ab0d34ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_INT64</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a9fda1870c01b8514588eaf17c1f11700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UINT64</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a52cc2e5d30a3707d03503dfbafba0a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DOUBLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1e01c96d6a7a33b47c0ce5d3678c3cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_STRING</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a5234d463a42d95bf51ed31795aa214b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_OBJECT_PATH</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>acb229115cd457c6f4c46db53179bcf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_SIGNATURE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a1ae362fd54a0dca4ff11dc91eb91e807</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_VARIANT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a423dc734d6f45d88da308c355e1daad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_HANDLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a42a8f15e75bbb853c29f82b226b8524d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_UNIT</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a401be57899373ddc4ea3fa90dd082c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_ANY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>abb0b65abaef0c0f96b5dd53c2d41d50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BASIC</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>af3dd5a8ce4eea408f082ec37239f8594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_MAYBE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>afa3c807de47227c78826fbd0c1ff1c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a44335d30ad2929ba1cb03f6b218f61f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_TUPLE</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ae4f961225712c4218460ed1a0d09e0bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DICT_ENTRY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a2351713cde6ee899e9cd5dc6792424d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_DICTIONARY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a642324aa1ad05df695012086ea4a4ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_STRING_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>aeba26de9c5d32fb0d5fd14a66279d930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTESTRING</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>ad20daf2fe6fa1235624d4180e949ad5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const VariantType</type>
      <name>VARIANT_TYPE_BYTESTRING_ARRAY</name>
      <anchorfile>namespaceGlib.html</anchorfile>
      <anchor>a046eff603c12c9414430468883cc609b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::BalancedTree</name>
    <filename>classGlib_1_1BalancedTree.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const K &amp;, const V &amp; &gt;</type>
      <name>TraverseFunc</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a4ff14046f2cef700ea37b5b9eb1e2e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const K &amp;, const K &amp; &gt;</type>
      <name>CompareFunc</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a9d637241cab431a674cadf806c0a83d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a6ad3ee2e4c7a396e059171800f703e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTree *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a3992ca9669a73f98167e988ce0ff4415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTree *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>aa95ee73b9302c6e53dce0e2b9a642b4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a80e50b78322d85f165ac2d6607ca9cb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a6530fc006eec5d249a520be7e8bf4f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a1ff2e47b569956c2c8d19ba3f538346c</anchor>
      <arglist>(const K &amp;key, const V &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a751401d64137e241cacfec8e05ea5971</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a1004e229bf2fccbd79b15a7f567a51e0</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>acc3b86a40f9c6ce3f2870d2d51627cae</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>gint</type>
      <name>height</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>ab7f312cc9aa4a0cfc4d2b8b24b3d9749</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gint</type>
      <name>nnodes</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>aa5965a94bd4afaa5da1dfb1c6406fef7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>aa1235b0242c3d7d87310adb6e370ec12</anchor>
      <arglist>(const TraverseFunc &amp;func) const </arglist>
    </member>
    <member kind="function">
      <type>V *</type>
      <name>search</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a55668fb48bb53d3099084db1088c9495</anchor>
      <arglist>(const CompareFunc &amp;search_func, const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const V *</type>
      <name>search</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>ae9339e46ced588dfc632ef35a6e97418</anchor>
      <arglist>(const CompareFunc &amp;search_func, const K &amp;key) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BalancedTree&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a346b8289fc878c1d9d3398e81800208e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; BalancedTree&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a225d6f1c845767474de9d024f9fa876a</anchor>
      <arglist>(const CompareFunc &amp;key_compare_slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a26c7764fe28c41b2527be4111ef76a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BalancedTree</name>
      <anchorfile>classGlib_1_1BalancedTree.html</anchorfile>
      <anchor>a8ded6a08615b93ef62b84418d5894499</anchor>
      <arglist>(const CompareFunc &amp;key_compare_slot_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Bytes</name>
    <filename>classGlib_1_1Bytes.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a3ebab3535510aec1ac5a230a54f490df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a26320cfa1354e83af8186fd62974a180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GBytes *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>aab7dbd47921abcdd9f9f1a336399842c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GBytes *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>aa9e557b5ef18ad79a0acf07962f0288a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GBytes *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>ad482796c48f6f8d35ae6a1aa52ec599e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gconstpointer</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>ad9c2f945fbafbb8567ced7b294025619</anchor>
      <arglist>(gsize &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a97304d598018da3ed8c5c90411fe9ba0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a8c8f1062871f4ff87a9514ef74308f07</anchor>
      <arglist>(gconstpointer data, gsize size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a06410137748117467146b3c4d4d77c7c</anchor>
      <arglist>(gconstpointer bytes)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a6296b93981e010525d71c8b3f126ce65</anchor>
      <arglist>(gconstpointer bytes1, gconstpointer bytes2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gint</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a2ea3d054c219ccde859316204b19426b</anchor>
      <arglist>(gconstpointer bytes1, gconstpointer bytes2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Bytes</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a19d12080f9b42a4d89d253680c5a0fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a4bce73ee3c5a2a9551587a8cf49d2c05</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Bytes &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Bytes.html</anchorfile>
      <anchor>a0de22eb5d159db98e1d035bc58a14cd9</anchor>
      <arglist>(GBytes *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ByteArray</name>
    <filename>classGlib_1_1ByteArray.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const guint8 *, const guint8 * &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a38ceaebf97f26f0bd4821689b6ddc02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a01d939c43678669bb9f61d1528b15d96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>abb2240977d9c126d9aee2657741111c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GByteArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af8e95da64dfe78b19784b00267f264cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GByteArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>adbe31fb532c0548bbd1a50d0f35d0c2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GByteArray *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a5d65be6eae741b19ea9ea394a8b19fb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a5bf314792ac5753ff0bc8d825f093a40</anchor>
      <arglist>(const guint8 *data, guint len)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aca57aae24d5ed23813d38abdae6af3ce</anchor>
      <arglist>(const guint8 *data, guint len)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_index</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af46449631dbf36cf491a89274c9cbeeb</anchor>
      <arglist>(guint index_)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_index_fast</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a44e29d9157601a5f58ff89935cfac1c6</anchor>
      <arglist>(guint index_)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>remove_range</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a68651ebbd16b782cc2ba22616cf618ba</anchor>
      <arglist>(guint index_, guint length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af04d56e13e7d198440ecb62bb88c5c0f</anchor>
      <arglist>(const SlotCompare &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; ByteArray &gt;</type>
      <name>set_size</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a75236ebc3491ebae5bf5e9f9dadb3341</anchor>
      <arglist>(guint length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Glib::ByteArray &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>a2b55d28aba3d00f5cd5c961dc5a2e517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ByteArray</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>af4fa6eadcb1834c8042f8ce50df1b3ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aa75e7f74d050aac45806ddeb4d0b2e33</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::ByteArray &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1ByteArray.html</anchorfile>
      <anchor>aa99add90374a6f4c13eb5ab04ebe95c1</anchor>
      <arglist>(GByteArray *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Checksum</name>
    <filename>classGlib_1_1Checksum.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ChecksumType</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_MD5</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282eba3129e0040dd5c2541baadb2d3dd87ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA1</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282eba7e5a02d18bd90f5988de70a06d22c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHECKSUM_SHA256</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282ebaf56ee9e607e115c54aaa7541ad9cb1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHECKSUM_MD5</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282eba3129e0040dd5c2541baadb2d3dd87ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHECKSUM_SHA1</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282eba7e5a02d18bd90f5988de70a06d22c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHECKSUM_SHA256</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5d1c13a9d5c34bff7dd1e74654f282ebaf56ee9e607e115c54aaa7541ad9cb1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a218ef89e5467d6cb8b2687813b286ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a1c27c48e7c6ad69617b8480b8aca4531</anchor>
      <arglist>(GChecksum *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a4839f2e9e33ac5bdb1cf696d8ecf4a10</anchor>
      <arglist>(const Checksum &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Checksum &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a830ae51f3f4cb4a024d3303f88bc6dcc</anchor>
      <arglist>(const Checksum &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a81332918818a0a29cd851e3811b1a0ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GChecksum *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a5bebbdf1ef296503c0eb86493e675cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GChecksum *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a40378be1df574c9f74fb7cc54d7b7056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GChecksum *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a6c2600dfa5258c5db06c7525396f8bb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a774f43a89f371e8c50b6ff1da56291d8</anchor>
      <arglist>(ChecksumType checksum_type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>ae817700e566bd94b9a71f358c4a4eeed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a75343718b489251d1ea7ea417674b2b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a49c961d3ecf8a4c62bd2177c2e32ac79</anchor>
      <arglist>(const guchar *data, gsize length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a6fa8c44666e92d66a6af10495e2df67d</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_digest</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a2dab438a05d0c74f25daea6c19af8f30</anchor>
      <arglist>(guint8 *buffer, gsize *digest_len) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a139a8bb447bb6617ffd0b3a2ef38808b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>compute_checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a034ca483253820866082d6ac82f81a79</anchor>
      <arglist>(ChecksumType checksum_type, const guchar *data, gsize length)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>compute_checksum</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>acfa10bceb4e7c8f7fb4f5782329a9a22</anchor>
      <arglist>(ChecksumType checksum_type, const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static gssize</type>
      <name>get_length</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a2f288fe9e08a7ac4e4f81a6e1a957606</anchor>
      <arglist>(ChecksumType checksum_type)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GChecksum *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>a7f5c4a8761c07e1062a8cb47d0b047b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::Checksum</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Checksum.html</anchorfile>
      <anchor>aede26bdadd5441f327f6b36ce9a9fbf1</anchor>
      <arglist>(GChecksum *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ConvertError</name>
    <filename>classGlib_1_1ConvertError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_CONVERSION</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a8f2c0837cb3d39247edde4926ff34a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ILLEGAL_SEQUENCE</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a335a4cb227118026dd0c25661f294d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a6c5415ccb53faa02252bad81b7b5fc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a0be7db7936eec0a931279e290e4b7635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_URI</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a9f0c06afb8e2258f079faf99807c816d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ABSOLUTE_PATH</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a44f6211a4a40cd76eb56cd962a981c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_CONVERSION</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a8f2c0837cb3d39247edde4926ff34a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ILLEGAL_SEQUENCE</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a335a4cb227118026dd0c25661f294d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a6c5415ccb53faa02252bad81b7b5fc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARTIAL_INPUT</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a0be7db7936eec0a931279e290e4b7635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_URI</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a9f0c06afb8e2258f079faf99807c816d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_ABSOLUTE_PATH</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>aea4b79ac3149c1fcfcab32155e3561a9a44f6211a4a40cd76eb56cd962a981c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a99da762bafb432b501a9adaa378e48e1</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvertError</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a1f91f82109b547d84c67b1e6e4abc863</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ConvertError.html</anchorfile>
      <anchor>a337140841bdec147d1e26406b566ebd1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IConv</name>
    <filename>classGlib_1_1IConv.html</filename>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>abb841f9db0731eb8cbc4ea2a8a5d23d5</anchor>
      <arglist>(const std::string &amp;to_codeset, const std::string &amp;from_codeset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ad2722879e0465fec5d9f2c126a602557</anchor>
      <arglist>(GIConv gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IConv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ab56fc0ef68a7f7fee554728a16c6cba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>iconv</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a094ab3c0fe74ae49968fb7ddfc9372fc</anchor>
      <arglist>(char **inbuf, gsize *inbytes_left, char **outbuf, gsize *outbytes_left)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>ab0655474f54dd933d3f6959bdafffabe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convert</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a82af42360f040532ebd4b215dc89a59d</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>GIConv</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IConv.html</anchorfile>
      <anchor>a12a8c09489388d1efcf9b70586307614</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Date</name>
    <filename>classGlib_1_1Date.html</filename>
    <member kind="typedef">
      <type>guint8</type>
      <name>Day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a217c209f5b937185e730455aed95c4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint16</type>
      <name>Year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa308aa855887d94a371adddfc23353c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>addae9bb3e6075f950f548178289d31f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a23300306fa973791ba6effc8757ac98d</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a04f4564ec663684b7062152ca56f5677</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a42ea48c26d515c1206704915b71b5076</anchor>
      <arglist>(const GDate &amp;castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Date</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0ac5c4a615593ca72f6f0600ad678974</anchor>
      <arglist>(const Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac51254df32aab40dd14cd7f9f8d8a3ac</anchor>
      <arglist>(const Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GDate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a4df664ef8c919b45dafaf1f666635ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a38645890f6a00996a1590902616a4134</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5e0612d9073939b783b6fffea9b66709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a6bd2cb5903074d5d99d8640d96e84ebb</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a214e405c758a42707dc1e7408aa7a2af</anchor>
      <arglist>(GTime time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a6c56245f4145ed4fdf882ec3bca99dba</anchor>
      <arglist>(std::time_t timet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ab4bf594a78cd4270960c70705ec48328</anchor>
      <arglist>(const GTimeVal &amp;timeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_time_current</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a094ddd3269d18d76077471647406742c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0e64dc591b387cc4847bfe62f71ced5c</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a1caed2e61aa1f492cb0e0f9dc28ff9e8</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a207373a135e2b93be1f88b949d468ba8</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a83e9f483203116684bd59d7a2457605c</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a3991f6de084bb84de962b81316b6323e</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a47cdaca7f0a4fb99f21ca6f2c5f6b609</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_days</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa811f0a4a953a9bd8e6623324a61a09a</anchor>
      <arglist>(int n_days)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a58c7a4bccf502bb9a9b10b1079a803ae</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_months</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a543992d17cac03b125bcd2e5dbcbbcbf</anchor>
      <arglist>(int n_months)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>add_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a1ea49facb5ec94dbd6b22916da2616b4</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>subtract_years</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac06467e6b8d11f2cb6862142503e51af</anchor>
      <arglist>(int n_years)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>days_between</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a4fdbe0b37d9d8079919aa4921c781e5f</anchor>
      <arglist>(const Date &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5961d351f9a2d3c924121b72bba9d88c</anchor>
      <arglist>(const Date &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aeaf508be8686588e138ea33c1f193c84</anchor>
      <arglist>(const Date &amp;min_date, const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_min</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0d54f26f46455523492785048c0e8f11</anchor>
      <arglist>(const Date &amp;min_date)</arglist>
    </member>
    <member kind="function">
      <type>Date &amp;</type>
      <name>clamp_max</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a88f3580d08fcd5a6f78247386a81cab9</anchor>
      <arglist>(const Date &amp;max_date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>order</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa16d41a82334d8d83fb6dfbcedfc8214</anchor>
      <arglist>(Date &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Weekday</type>
      <name>get_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>adf8015784a264eaf9979f637dc109fbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Month</type>
      <name>get_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>afcf98de21518e239368595bcb6eb467c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Year</type>
      <name>get_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a91e31618fdf40a89a0840013f74ca1cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Day</type>
      <name>get_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>abb2790c552325e23523382dcc0b08a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa2f8e64c2eab4380a0477095e9765809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_day_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>abe65f54c4e39c48b9834e6195e65de4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_monday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a5bb09d3eaeb81d5015d34321e2bdf7ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_sunday_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2fe45b46e0327ef8d65abd5539249d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_iso8601_week_of_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>af0add3ab3f88625e9b78eb4c648641ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_first_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a11fd435a1f2012324db453adff6a0450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_last_of_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a7048990efde0b7e67e8bb73c6af8735e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format_string</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a0b9a299ad1d7ba986b67adeeb5e35d91</anchor>
      <arglist>(const Glib::ustring &amp;format) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>to_struct_tm</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac2f8feb4d819e6af421e6c5bb4ea2321</anchor>
      <arglist>(struct tm &amp;dest) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa716c3239e93a3e557a2e3349e12eb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_days_in_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ac730164dfaafc48786e550a7d94831ce</anchor>
      <arglist>(Month month, Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_monday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2c9cb463927b05d4632dca5da920542f</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static guint8</type>
      <name>get_sunday_weeks_in_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ab670892479ab8b08a9523d14fbafef2d</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_leap_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a625818601b8b04e016b998ebd58294f1</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_day</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a409a3205d2f1e138b88df36fe0d8b1a2</anchor>
      <arglist>(Day day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_month</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aee1b51e0602590b7bbebd404ed72bbca</anchor>
      <arglist>(Month month)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_year</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a7ebb66795ecaa06a721d851451fc73ff</anchor>
      <arglist>(Year year)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_weekday</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a72f37e25f74705d8b7f735b0b8aed5cd</anchor>
      <arglist>(Weekday weekday)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_julian</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a7b94ac5b14f4051054897c07cbb86656</anchor>
      <arglist>(guint32 julian_day)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>valid_dmy</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>acae6854623e46d783a0e19a5952871d1</anchor>
      <arglist>(Day day, Month month, Year year)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Day</type>
      <name>BAD_DAY</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>af6341bae69196cb5099f1133b2225b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Year</type>
      <name>BAD_YEAR</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a836394324fc168ffac64734f7930b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const guint32</type>
      <name>BAD_JULIAN</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a2b4f287c712949a7dbd7ca61f0098531</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a27425be265a0cc57e4f731825154ec4d</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>ad12683e4457513f4f834e13c4e7f72f8</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a611ba98c72bec2ae82bbf086b81563ef</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>a4e4faf476e7d66ef88aaca8b11a60175</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>acacb699d0fcffd2443c121586b7c22da</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Date.html</anchorfile>
      <anchor>aa72d3f6e17c7aab4d16e9e50b5069e1a</anchor>
      <arglist>(const Date &amp;lhs, const Date &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DateTime</name>
    <filename>classGlib_1_1DateTime.html</filename>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4466a00f72a591a9135ca7d851c4b5dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a378567d4313c1621325c72b3640800a4</anchor>
      <arglist>(GDateTime *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aba4ab77ceac92f8a0c7fd70bff8183f3</anchor>
      <arglist>(const DateTime &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>DateTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad4fb03d477fd3c930f06d7aa65a78c6a</anchor>
      <arglist>(const DateTime &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DateTime</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a60f7eba0bd77ef79f0a7b9a463ba77a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GDateTime *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aef6bffa86154c574827f3ef1b3a2012d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GDateTime *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a139cbc4f5494f70d8e084c14f2c679f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GDateTime *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a98671dd8d9508122f7b669e8b6b6f536</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a1b365343ca46bcd3d8d470ab80f6cbaf</anchor>
      <arglist>(TimeSpan timespan) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_years</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a5996899dd825d5515070f9b0ae75af1a</anchor>
      <arglist>(int years) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_months</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a0032220ed4670d0e7dc9359a871d98c9</anchor>
      <arglist>(int months) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_weeks</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ab6f7f4705402949607cf9bc59a14d5aa</anchor>
      <arglist>(int weeks) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_days</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a14e90d166b01751c755f66a128a01033</anchor>
      <arglist>(int days) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_hours</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae3b65ea051b730f5d182d549ae7728ec</anchor>
      <arglist>(int hours) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_minutes</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a1fa7f7012716b6d4d297a6de3a6b773a</anchor>
      <arglist>(int minutes) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_seconds</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a4042da1cbdd278ae7e08dccb5d80516d</anchor>
      <arglist>(double seconds) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>add_full</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac33b87648a92a192c538baecd6fe1064</anchor>
      <arglist>(int years, int months, int days, int hours, int minutes, double seconds) const </arglist>
    </member>
    <member kind="function">
      <type>TimeSpan</type>
      <name>difference</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a82511de9401c35535a8d67c27a5850c9</anchor>
      <arglist>(const DateTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a6119bf56393f0a1cfa682c8867dd605b</anchor>
      <arglist>(const DateTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac0ec361fe2621cc7374127b439c2a0a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abc30c94af854cc5a69ad6a87d5caf268</anchor>
      <arglist>(const DateTime &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_ymd</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac800e00909bd0e0c0b02d280af29bcaf</anchor>
      <arglist>(int &amp;year, int &amp;month, int &amp;day) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a220d140aeeb7c8794bab7baee96c6b9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_month</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7dd3d0949c3abd7fc235c4b79ce00d1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_month</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a465d7aff2bd93387814d2c4cbb59d7fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_week_numbering_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abcaf8ade7fb7cdd3188177caf2f09a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_week_of_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a3603c5796c447504dfea0978033f705c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_week</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae8e1355802855d6de7661e44dce843c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_day_of_year</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a5bd2dec1108519633f5bc9e3022e4db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_hour</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac51d6cdcdfa5e10b8519a42e9b5de288</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_minute</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aef76a1424401b0908f8d4f650e7f935d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_second</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae1c5e4f766d5086aeca50e3b97c2a8a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_microsecond</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a42723abf75e9ac9a1fccf9a503316a2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_seconds</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abce64b186924b7208fa9296b6477d28a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>to_unix</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>afbcdc4230ad98fe68e484da24d79b79f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>to_timeval</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a59901087079627bd73248f6b14d3f08f</anchor>
      <arglist>(TimeVal &amp;tv) const </arglist>
    </member>
    <member kind="function">
      <type>TimeSpan</type>
      <name>get_utc_offset</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a21b707b52561ed560e396c60c4b7fa52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_timezone_abbreviation</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7721e9388145449b5180fb2bdcd6d08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_daylight_savings</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>afd141e1742670663f302e5d24e8f2e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_timezone</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a96f0edc9204c6739c0a7ea235be35531</anchor>
      <arglist>(const TimeZone &amp;tz) const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad7edb0c4f14de146d16283ae3e11e78f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DateTime</type>
      <name>to_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a732f91994ea5a1c48f3a6ad75fda6aba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae6106448b19d3a82cc2cdd94b7e2942a</anchor>
      <arglist>(const Glib::ustring &amp;format) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ad48ba71c7573b26d636b125202843613</anchor>
      <arglist>(const TimeZone &amp;tz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a15f3d384840951cbf993af14c7df0db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a7fe96fc1d4eace42e2e45906717fc428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>abbeb5890f680e19af64d4d8ade4d6b33</anchor>
      <arglist>(gint64 t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a2823b34b5116ad5e2bde0ec3c1eb1c30</anchor>
      <arglist>(gint64 t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a990034c6ead5c34c22a9e989c4a3e4e3</anchor>
      <arglist>(const TimeVal &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_now_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ac3be9be4892d8f20147f7a94e0488113</anchor>
      <arglist>(const TimeVal &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>aee0b3393970d11dc5533bf51233abb25</anchor>
      <arglist>(const TimeZone &amp;tz, int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_local</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a377401c243100e1172341c6747339c27</anchor>
      <arglist>(int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DateTime</type>
      <name>create_utc</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a6c46434388bad186f4f53988d925e110</anchor>
      <arglist>(int year, int month, int day, int hour, int minute, double seconds)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GDateTime *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>a89d0ade6e43a96039d52f666610e17c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::DateTime</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1DateTime.html</anchorfile>
      <anchor>ae0c5dfdc4615424386bbf46d1181580e</anchor>
      <arglist>(GDateTime *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::FileError</name>
    <filename>classGlib_1_1FileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXISTS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCESS_DENIED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_ENTITY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baeda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READONLY_FILESYSTEM</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_FILE_BUSY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAULTY_ADDRESS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SYMLINK_LOOP</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bab01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_ENOUGH_MEMORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TABLE_OVERFLOW</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRYAGAIN</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERRUPTED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_OWNER</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOSYS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba35c967e08b486a0e88197f5753d2df1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXISTS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba01ff8868a0b220c86c9324c99d3cd4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baff115ce7e218cc5a4aae85ec8890ab94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCESS_DENIED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa2e3135e38ebcc80a494528091ebd8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba8643f49fdab6a5ff782084c67135e1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_ENTITY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baeda2e83b22b1f6dc1da2694f1644e564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DIRECTORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa4f3b9115752cd9cf52a5b59f8909991</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babb6c725bc086a2d279e757457b030571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_DEVICE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badd3c96afe2ba945bb3560e16a9b93d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>READONLY_FILESYSTEM</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0babeea9fce53d4885b4051984276f15a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TEXT_FILE_BUSY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7e4dc1f2fd34848b7bc3000c272e1372</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAULTY_ADDRESS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badc06f883f118f4890129663191c6c17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SYMLINK_LOOP</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba162e633cd38eab5d522270c9a3ebcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bab01ef9f764fd9b893ce8642c41e767d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_ENOUGH_MEMORY</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba370079127964629a1632d9ddb9e1675e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_OPEN_FILES</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0bae6695b16a229d85ed7fe04998ded8e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TABLE_OVERFLOW</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba270fd5509672b5315c89ba895cf0a03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_FILE_DESCRIPTOR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba4fc249f01958f2637485f137984a2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9c342ad59c861942248c7c4f9856ffa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba7973f973a753e33f7334606a7b94a484</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TRYAGAIN</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba394d8e382562d6a1d98eeb324f7bb3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERRUPTED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0badddd41967fb43bd5299d7ca081e1fb2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba9f036a8ebefce2b3e4d6212a81391f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_OWNER</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0baa10eb3f9c67a9d359927839c800e9d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOSYS</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba35c967e08b486a0e88197f5753d2df1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0bdb855c813c7d07a424009706fc8f0ba1ff00bae55bf88a6bd4f5c70b78324b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a0acf54ad7899f15d9dba10a42e551181</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileError</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>adc1bae15e4393814b23e7f0743a081cc</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1FileError.html</anchorfile>
      <anchor>a86041a573547b3b349ba0acf2bac7116</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::DirIterator</name>
    <filename>classGlib_1_1DirIterator.html</filename>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a67db7ca7ce5696fe900df4f8428b2f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a596bae950cfcfbb815029929b9394bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aea087419248faa8fc677d88f6cac928e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>aaa1742565a52c5f7facc17f90f0680fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a40edc6b0e3915f39a58f068ae3246de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DirIterator</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a39fe47295f912691d1ba9e04fc4c6854</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a58e96c2c6e629c1cbf285fe9e6b82502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a094d89e945942a29635cbb5e065a8f41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a369cb93241e49b7aa1229848e88c3f15</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>afcb6c09b21dc948643431c9118b9b714</anchor>
      <arglist>(const DirIterator &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1DirIterator.html</anchorfile>
      <anchor>a29757be47b42f28e2c9a95b35a8cca3e</anchor>
      <arglist>(const DirIterator &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Dir</name>
    <filename>classGlib_1_1Dir.html</filename>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a47896460e9d37efc9e93af33e0d1ccf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DirIterator</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a87555a3d202abc6535c0479378289c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>abbcedb96cc9cf9cdfa37ab7164631fe9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dir</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a8de43168d60f9ffc12842b6d277834de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>read_name</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a0b7540337a31b10b5dd5775a46ff2f43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a13bc8d04aef36e4c77eb05710096ab26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>a9d648d71ee0ac37f57b478f8d43a3bf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>ae5b5900d5f7838b2437f36609c30d7ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Dir.html</anchorfile>
      <anchor>aded8f8cb05e1aed5fb445569c44fff68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannelError</name>
    <filename>classGlib_1_1IOChannelError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FILE_TOO_BIG</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a9c5ed72205f48bdfdd06a7d9ced2da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a1875c359005272d43ad2b611d73beec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a8ec5114383862e8cac043ec2075ad116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aa0144b7fc1c2ddf9643b9e9f3f8ddf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a5dc764550200132f93026027c7c2f09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a4820ff376a2779d8d1d3ccea6137fcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OVERFLOWN</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a64d5418a7200604cbf563cac1cf46de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a3112ffb043ecf58835762eb3d8204edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a5c504b82d394ef2594f13128fff403a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILE_TOO_BIG</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a9c5ed72205f48bdfdd06a7d9ced2da29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ARGUMENT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a1875c359005272d43ad2b611d73beec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO_ERROR</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a8ec5114383862e8cac043ec2075ad116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IS_DIRECTORY</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03aa0144b7fc1c2ddf9643b9e9f3f8ddf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SPACE_LEFT</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a5dc764550200132f93026027c7c2f09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NO_SUCH_DEVICE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a4820ff376a2779d8d1d3ccea6137fcd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OVERFLOWN</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a64d5418a7200604cbf563cac1cf46de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BROKEN_PIPE</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a3112ffb043ecf58835762eb3d8204edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>a8b02e9d69e0b5bb5455009c5929dbb03a5c504b82d394ef2594f13128fff403a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>ae1314f05ecea3220020d19b2823f545f</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOChannelError</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>ab78f3d7ead385cf0ab1738686028c10d</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1IOChannelError.html</anchorfile>
      <anchor>ae3f6615b23b1cb01e2cfdf7deceecd7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOChannel</name>
    <filename>classGlib_1_1IOChannel.html</filename>
    <base>sigc::trackable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a0a6c1cddcf00c77c6ab99b096c86544f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ae5878a4510f52f194f18c0743f6a9b5c</anchor>
      <arglist>(gunichar &amp;thechar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a1afb78d2e29a2f01a7034279a0c12636</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a4553088deea02ebea2ab7a9e2cff0a1c</anchor>
      <arglist>(Glib::ustring &amp;str, gsize count)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_line</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a2950510fff168d5753ee1eb14714d67a</anchor>
      <arglist>(Glib::ustring &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>read_to_end</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a0d64e84ab360b3c83399c94076487df1</anchor>
      <arglist>(Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>acacb5599be21f549911c6aca5f820fcf</anchor>
      <arglist>(const Glib::ustring &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a29114ed2bcb64b8af551271394968528</anchor>
      <arglist>(const char *buf, gssize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>write</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a5e0a187ff012b3b90c6d3d8593c18e92</anchor>
      <arglist>(gunichar unichar)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>seek</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a65a5048c32ecde11827b5ae1973ee0b1</anchor>
      <arglist>(gint64 offset, SeekType type=SEEK_TYPE_SET)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>flush</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aba6702093bd1c58ea22231446ed2f6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>close</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a6affd4b4cbeeefe4965544f762922c35</anchor>
      <arglist>(bool flush=true)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a2f5c5979ad729df9524fcb1940e5d2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffer_size</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a535767c92f2678e5e72051f6f4bc5326</anchor>
      <arglist>(gsize size)</arglist>
    </member>
    <member kind="function">
      <type>IOFlags</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ac15e424b863d398ed458315b7f799243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab6c16c87c174d836247f47c2b87539fd</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>abaf37b0d76cd41628fd0c41a674495de</anchor>
      <arglist>(bool buffered)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_buffered</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a3013c245f30ca81e11c01f8a031b1745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_buffer_condition</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a9ba943e998468e3b86d841c5aec8a551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ac93b128c8ee396702b2a20c5a060949d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_close_on_unref</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a3f4fbc2a4c3670863fbf504d7fc96253</anchor>
      <arglist>(bool do_close)</arglist>
    </member>
    <member kind="function">
      <type>IOStatus</type>
      <name>set_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab1d3ae667bd425ef830929a67cf526e0</anchor>
      <arglist>(const std::string &amp;encoding=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_encoding</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ae52a79ec5f3acc2b0990870668c4ea2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ad42d03bdd0288cf5517737a73f7268b3</anchor>
      <arglist>(const std::string &amp;term=std::string())</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_line_term</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>afd08e7a2a6cbfbdad2ef599c9eadcc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create_watch</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a755c88fe8c78dc0727b5686fc62b736c</anchor>
      <arglist>(IOCondition condition)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aa63e3a39347848387cd9422d0073a7be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a4c57bf6b00844fc3ddb9d0e60cac7dcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ab05ed8535a51b04749e11386c845a581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GIOChannel *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aad550f12d9d2ec2fef0a2c7ba78f2595</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_file</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ac175ea1fd6ef84ac3758ca57b42b7f33</anchor>
      <arglist>(const std::string &amp;filename, const std::string &amp;mode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOChannel &gt;</type>
      <name>create_from_fd</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a078698e18f61bb75fe3fd33d82970f5d</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOChannel</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>aded3d9a998914bcac0b3f1aef1eeb974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>abfb4faa07e80b86f21b0f18f0b8606cd</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a4ed5372da9d4ad3465012fc2317507b5</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a781de88aec2c032d05f74402779665f3</anchor>
      <arglist>(gint64 offset, SeekType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a735b70808acbb542b04bf55b0133927e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>af8f690f1e0a8945b75ad7be4949e44cf</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>ae3326db3877358b563de11fb3dd8367f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a128f2bfd977617a6a1a7e4a7fbe6aa5b</anchor>
      <arglist>(IOCondition cond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GIOChannel *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1IOChannel.html</anchorfile>
      <anchor>a6683e47c0d78492b83d7021288d9b6d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFileError</name>
    <filename>classGlib_1_1KeyFileError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ENCODING</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a24279ab7c4d83ec8774f46f1f159a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a83fae4b5fa2f269a6d4afead8b8faf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a2d2b02b32304241674b66742f55e2d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KEY_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52af5fc91a3801ecf05e20ab72578c78471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUP_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52ac5be98a4ce73c73130edbd4631d9ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_VALUE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a7290dc045af91eab91d340e7f6fc6d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ENCODING</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a24279ab7c4d83ec8774f46f1f159a255</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARSE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a83fae4b5fa2f269a6d4afead8b8faf64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a2d2b02b32304241674b66742f55e2d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52af5fc91a3801ecf05e20ab72578c78471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GROUP_NOT_FOUND</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52ac5be98a4ce73c73130edbd4631d9ee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_VALUE</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aa3cd76f47263fa75421227221563be52a7290dc045af91eab91d340e7f6fc6d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>aecd9898aacf14a6d8b1f7965e04f227a</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFileError</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>a064f4a933c5c53a16ddb919609f5ddaa</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1KeyFileError.html</anchorfile>
      <anchor>af8f7b3b7c506398a3ee34956ded1f762</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::KeyFile</name>
    <filename>classGlib_1_1KeyFile.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a574f57c39fa7627d0d38ee6660173cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a76fdf6f57ba9719b92eadd883c27a3d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyFile</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad9c90566b014ba59f545e9a663e6d34d</anchor>
      <arglist>(GKeyFile *castitem, bool takes_ownership=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_file</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a11c10834517b2e91881c6a3638daaf66</anchor>
      <arglist>(const std::string &amp;file, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a22113e3fdfa834fc688e6429b2e6332f</anchor>
      <arglist>(const Glib::ustring &amp;data, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a92109cf1e159da164c329dfdb875bd1c</anchor>
      <arglist>(const std::string &amp;file, const Glib::ArrayHandle&lt; std::string &gt; &amp;search_dirs, Glib::ArrayHandle&lt; std::string &gt; &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a421274b7a0681616f116b854ac02d3db</anchor>
      <arglist>(const std::string &amp;file, const Glib::ArrayHandle&lt; std::string &gt; &amp;search_dirs, std::string &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load_from_data_dirs</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a53221a7f8720157e1ef6e635260570b8</anchor>
      <arglist>(const std::string &amp;file, std::string &amp;full_path, KeyFileFlags flags=Glib::KEY_FILE_NONE)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>to_data</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>acb65a298d161691468cdb7add19b00e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_start_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ab619afc4e670b960a09e0199151f8a8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_groups</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a675e788637f83c2d29d268c8039b0aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_keys</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a108c2605d26beebd38330b745f55c5e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a903e3a2a27d1a7a12e0b27d87a7b3da3</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a00f44290cb03cc75ffafa1fdb006cc22</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ae407e4614dbbdaf097098fbab19506fa</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a966f044df7b35d1e7c77c96f1fe768dc</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a08218a8dbe2a8fb4200f7a0c93ede912</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a25eea13fdfc5c5ab235e2e72466cd53d</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>acfa5e79d32db20f329895e3887e5f071</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0d383ad579647505ff3376e93591aaa7</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a8829a3cac6a4addd232012b798fa63ea</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ad94dadf67bda687779774a34ac8c27e3</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a8336e9ff4ba3bdfff2f1d597b4b4b7f6</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aacf6ab260d6785d0a67d292292d98485</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a41ae373dd7a354356c6b9ea0cf0e2920</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a9d71ef3b82203b4e8dbc83c480e82ec9</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ae3bcad9bb8c99a2b682fb3188d192675</anchor>
      <arglist>(const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aa3dc433e0ea14dd66e2c843be7ded1ee</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a2437f94f6c1f56de2de338445008651c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a44f05daea63a1188cae854ca77228355</anchor>
      <arglist>(const Glib::ustring &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a440aa963a6b393618b0c1947f274e955</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aa811f080e3e9b82baac56ad188b058e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; Glib::ustring &gt;</type>
      <name>get_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a15475936afc7bd85a30624bc76a1122d</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; bool &gt;</type>
      <name>get_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a81a06db8c2ccb33c756f97ccb2f68561</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; int &gt;</type>
      <name>get_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>af74312f2d086d1ec334773975dfe7b69</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ArrayHandle&lt; double &gt;</type>
      <name>get_double_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ab1d747335102a96d99479e6827efb32f</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a23e315d219a3baecfc9c0a319ced6fb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aa8e4501b6fb4e4adb701c2ca980f663e</anchor>
      <arglist>(const Glib::ustring &amp;group_name) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aab23bdbdac01a77d9b225d166fb2261c</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_list_separator</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aed087a7066145f1859710b89dbef1ccb</anchor>
      <arglist>(gchar separator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a38bf60f9bdd209d28ae818e7dee6ea17</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a16cd249a1929d637432883848947f253</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a231e36c66336a198d4c55df81b93b711</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>aab1b3899063e934ac72ba1be1a77c4a0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a8f61f47a667f07108023930bcefc1400</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_int64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a97a7170561a1b353af36d55e613a0540</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, gint64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_uint64</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a18fad32f7e289001ec53796909be024b</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, guint64 value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ace8cc2079068c4620c6498d7d831feff</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_locale_string_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a7b6c776cf8b5f5cbe5a9fa6bf343b8e4</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;locale, const Glib::ArrayHandle&lt; Glib::ustring &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_boolean_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a54b27ca6e8158558ba10d538673e6663</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; bool &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_integer_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a374ea5bbcd271412366aa5fc5bab0f1a</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; int &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_double_list</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a9af3496d225b0638df1ed633c435fad0</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ArrayHandle&lt; double &gt; &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>ac06f9d12cbc755feba6a3a11f34bac01</anchor>
      <arglist>(const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0f1562adaf4ab68a34de7594391c1032</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a03c7baab6e892e6a9917761f5200378a</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key, const Glib::ustring &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_comment</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0cdfad92274b403f45b75954eb167d64</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_key</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a0cc1601e227a57603997ddda9d6bc6e1</anchor>
      <arglist>(const Glib::ustring &amp;group_name, const Glib::ustring &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_group</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>af6fceaccb2cd166d6039dae0552900dd</anchor>
      <arglist>(const Glib::ustring &amp;group_name)</arglist>
    </member>
    <member kind="function">
      <type>GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a456abd71e420eb7e211ba909f275e5e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GKeyFile *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a6eeac0981d8c90be7fbb21c8ae0c7804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GKeyFile *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a468dd6c8997d3b2e0e59b65174e603b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>owns_gobject_</name>
      <anchorfile>classGlib_1_1KeyFile.html</anchorfile>
      <anchor>a5479765ba8e50cbd94beef60f65212b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MarkupError</name>
    <filename>classGlib_1_1MarkupError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_UTF8</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a30c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a5b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PARSE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7adb7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a2a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7aef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTENT</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a4051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_ATTRIBUTE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7a5b9c50248b29c8796462fc28fd1e73e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_UTF8</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a30c6a6f1fcf9249db2692abc39b34c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMPTY</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a5b3981a2a475d8b0ab4481c931c816dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PARSE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7adb7227e7bfab9c3409b7f5ce7da8075c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ELEMENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a2a63efd807b6e40451b57e128b34d9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_ATTRIBUTE</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7aef0a541fa2885ffc56d0703a55afa735</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_CONTENT</name>
      <anchorfile>group__Markup.html</anchorfile>
      <anchor>ga1422c4a583441bbe490b8ed47d7fe1a7a4051754fb4e8f11408fe06445e99761e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_ATTRIBUTE</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a1422c4a583441bbe490b8ed47d7fe1a7a5b9c50248b29c8796462fc28fd1e73e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a6ae004c83ba5b4a32b3d7df5aa17dd19</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MarkupError</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>aa5324bf1f53adf5fed4be252709a1e05</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1MarkupError.html</anchorfile>
      <anchor>a93533ff4c34e76e9617dce3dc616f322</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Module</name>
    <filename>classGlib_1_1Module.html</filename>
    <member kind="function">
      <type></type>
      <name>Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a43a926bb46ae0ccc4d63217fcc0f31cd</anchor>
      <arglist>(const std::string &amp;file_name, ModuleFlags flags=ModuleFlags(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Module</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a2b0353fc01a57653c0c60774efde274a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a8426c52d92aa6be0f3077ee4ee71c5a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_resident</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>af10c2ab1a24763db0702782d4928c06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_symbol</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a9e424387004421e29f65491dd1643a09</anchor>
      <arglist>(const std::string &amp;symbol_name, void *&amp;symbol) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a19636376bf76a118b572015220b4623a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ac3b1db2a5e4dcb2771ce7376ab207951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GModule *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ad3791a114fc85afd1a07644cd839243f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>get_supported</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>ad135ce3f9e6b8b7441bd4ca8da2099fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>get_last_error</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a40669f490a2e90d7c39ede58a7ef5c2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>build_path</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a5ea64e82147d3ba9edb75f71dfffc87c</anchor>
      <arglist>(const std::string &amp;directory, const std::string &amp;module_name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GModule *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1Module.html</anchorfile>
      <anchor>a12a777846a059ffc8277ba2f196cb68e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::NodeTree</name>
    <filename>classGlib_1_1NodeTree.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, NodeTree&lt; T &gt; &amp; &gt;</type>
      <name>TraverseFunc</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a9bfeda08667567d24bc28ea6b882f48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, NodeTree&lt; T &gt; &amp; &gt;</type>
      <name>ForeachFunc</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aef52fbe6656101a9bf1dc8ad0c420979</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a24d62b0424afc56cef69022c36bb16c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa3909f3fe31329f176925791bbe368fb</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a5c27a9b91aa532347e463f3629d20dd6</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NodeTree</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a106a3ec5b9d0e0368aa43b4ef9bbe93e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>af265f6f216ea9209cec39992dd0b6175</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>GNode *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7571a3bcf836821859f83406179921d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GNode *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a48d863d06ce73068895485b3a8b25e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a664b7930de8a3d5b2f9f691d6a5d2e44</anchor>
      <arglist>(int position, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert_before</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6c0185ff53ce6f0b6574b4b93c706a29</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>insert_after</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a3217b1e57993a335daa02b7728385d32</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a65a5e8732e2b140233eb1450ab6f35d4</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; &amp;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac6d84033181fdbe1d84491bf505d6a5b</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>insert_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a988e1fd1fa5a91ac794ea859db7bcc85</anchor>
      <arglist>(int position, const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>insert_data_before</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aaa93210a10a5c3c3b31b728997354f81</anchor>
      <arglist>(NodeTree&lt; T &gt; &amp;sibling, const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>append_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac8d7b7ce8b478dfd87b8227e621b943c</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>prepend_data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2db3f440692e02d717bd9a4ec3b6604a</anchor>
      <arglist>(const T &amp;the_data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse_children</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a125bbad27e6950b6d399b9746c9ffb60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>get_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>af0b6480bbb3d432db077c8a5a1682135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>get_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa1a618273dca912e2d3d0c2d3991afdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>traverse</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a88164f3d6446ba63db1c7e633d1f042d</anchor>
      <arglist>(const TraverseFunc &amp;func, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL, int max_depth=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>foreach</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac4dae53c67e86593c5533e86a39a7c42</anchor>
      <arglist>(const ForeachFunc &amp;func, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>find_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7a553e458203bcc295bafc07c3662e9c</anchor>
      <arglist>(const T &amp;the_data, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>find_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a10016f20b49c142f9582a5e69e956ee6</anchor>
      <arglist>(const T &amp;the_data, TraverseFlags flags=TRAVERSE_ALL) const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>find</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2b7691f32ba16f902124c6c72110d1c5</anchor>
      <arglist>(const T &amp;the_data, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>find</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a84b95e45ee739d73cd35786c884d6880</anchor>
      <arglist>(const T &amp;the_data, TraverseType order=TRAVERSE_IN_ORDER, TraverseFlags flags=TRAVERSE_ALL) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>child_index</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa900e05a5eb8ae321b4569b412317d05</anchor>
      <arglist>(const T &amp;the_data) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>child_position</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae6bc31fc9c26678a5968cbe4fd3d4ba1</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;child) const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>first_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ab64b292bd177d3d513125953141e3de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>first_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>accdea338939b60daa996850da811c71c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>last_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a1ac3c8a683876db6aeb8834baeff29ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>last_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>acad549d047b291491a525b2f0a1e3346</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>nth_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae956914aaa5bba966934bab270f9ee82</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>nth_child</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a92694bf6304a94fe68e8a01a525c5f4b</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>first_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a2021001eee1ff423ec2f0a759170e4fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>first_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a255ef0115a5ce2c5b0d09b06a25b2860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>prev_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a6ed1973b99c794b1e52fdcb2fc41ba19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>prev_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a4a13060df965cfe95ee2cdcc2ce1dc71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>next_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a7b973fa140f0a392edf1d9f562c6809a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>next_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>af7952c290182814a42eed558a3701b5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NodeTree&lt; T &gt; *</type>
      <name>last_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a958c88a651bacc95d5ec944bc96df580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>last_sibling</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a896b4501c34b121448a146bbb4b7165b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_leaf</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a4b245acd3b836f19b2ed17a584cffca3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_root</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>aa0e8f12f34a1091df1fd7690b374cd0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>depth</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac1ecb9d86f4e6d84a1ee5e98c400861a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>node_count</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a95893b710363a62b6cc50bc350a3986c</anchor>
      <arglist>(TraverseFlags flags=TRAVERSE_ALL) const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>child_count</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ac787f9ab75c5c765a17317a16d73a518</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ancestor</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>acff54c49a239add277672c971c96c686</anchor>
      <arglist>(const NodeTree&lt; T &gt; &amp;descendant) const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>get_max_height</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a034f08972248866c2563ea60993add7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlink</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a63d3fec697451d006c61f3b64df22c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>ae6159ff89698b40fea479cbafdc4f067</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>data</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a205cdaaa7bf5eb6a3750c8d4609dd122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const NodeTree&lt; T &gt; *</type>
      <name>parent</name>
      <anchorfile>classGlib_1_1NodeTree.html</anchorfile>
      <anchor>a9a58a1c8f02136d52998a62897c5945d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionError</name>
    <filename>classGlib_1_1OptionError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_OPTION</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fadbffad617d2d2adc2b91b2d50e67d43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_VALUE</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fadccf631862138814c2c8c9fb5d68ee5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa30e7457812a8f2a6c32eb982d9df7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_OPTION</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fadbffad617d2d2adc2b91b2d50e67d43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_VALUE</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fadccf631862138814c2c8c9fb5d68ee5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a3ea5eb98a6e3179cf30c61aec0f92e0fa30e7457812a8f2a6c32eb982d9df7593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>abcab818ae38ae2a190b74c04f7a62794</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionError</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>ace45974f225f53b08db04bb455c05b1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1OptionError.html</anchorfile>
      <anchor>a43c1d4a45248b644f498bb3e75902321</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionContext</name>
    <filename>classGlib_1_1OptionContext.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotTranslate</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>afe53674752fc26dd9d4dd5388f988006</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ad313150579fe7f769f1c5863f8867eab</anchor>
      <arglist>(const Glib::ustring &amp;parameter_string=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae84b2223d374cf0756af7a08e6df811f</anchor>
      <arglist>(GOptionContext *castitem, bool take_ownership=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionContext</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a5871acd083020c408dcd2d399f981fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae31d88f6e0c9a3211af390e0d3f976c6</anchor>
      <arglist>(bool help_enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_help_enabled</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a4f33399c5395db9dd055f02a08712ec0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a022f6c50d608b2fabdf7287caf588d73</anchor>
      <arglist>(bool ignore_unknown=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_ignore_unknown_options</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>aa15e010efafa83d8d953c026e036dd01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a08ab225e3a4be10364f32948a6532726</anchor>
      <arglist>(int &amp;argc, char **&amp;argv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a2c81f14e99f9c84406f200286673b14e</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_main_group</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae6d57268ad6a1f05c5d6175ab8e11181</anchor>
      <arglist>(OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_help</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ab1728254b364468d687c985974068e3c</anchor>
      <arglist>(bool main_help, const OptionGroup &amp;group) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_help</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a28927fd06f3bfe78009bcb6da4804aea</anchor>
      <arglist>(bool main_help=true) const </arglist>
    </member>
    <member kind="function">
      <type>GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>af87e77207d4a437598f485fe0e7294e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a11b48b2190d2d45f43bcc8d8e26f1eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_summary</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>abb126e75fdbd6ad904918313117fbeee</anchor>
      <arglist>(const Glib::ustring &amp;summary)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_summary</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ac5ba7c5225e8122b1ee2aac0ed52dbac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a3d89734e8546a0e6051320a79ccf0816</anchor>
      <arglist>(const Glib::ustring &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ad69d2b96ea1b5c95a5237659bf93b6ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_domain</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>a579ef7926ca89106eea5b3832eb5db15</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translate_func</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>acbb334944cbe596a7c1e51baa05b9adf</anchor>
      <arglist>(const SlotTranslate &amp;slot)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionContext *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>ae5f0ab1971db754356144f720fa47ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>has_ownership_</name>
      <anchorfile>classGlib_1_1OptionContext.html</anchorfile>
      <anchor>aaf708c17aa94584e258cffd53b6344c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionEntry</name>
    <filename>classGlib_1_1OptionEntry.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_HIDDEN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280adfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_IN_MAIN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ab8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_REVERSE</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a24a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NO_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a69aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_FILENAME</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280abc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_OPTIONAL_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ae7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG_NOALIAS</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a9672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_HIDDEN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280adfc734d486122379ef2c37d9e8861644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_IN_MAIN</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ab8f1e9721d33857527515dbadd3f822f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_REVERSE</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a24a4642bdefb942e56482f6b7d05561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_NO_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a69aead0991d1cd5b29cd394c8174f25d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_FILENAME</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280abc30a617bee9b427293fdfc13f546955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_OPTIONAL_ARG</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280ae7b4fc1fd7b9f41c6a91c48c8978e4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLAG_NOALIAS</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a5b550ab1ac9884bcc614653c9cf98280a9672830777db41b709ca74252f3afd27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>aaeec52f8bd17268b8bba6e4746def3c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>afa83c0423e913e528cb073b850bdf06a</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionEntry</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a8f84e2bdc3577ed1c1a2cb7e344eca0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ae3070f22bf99398c42b51b71e44f8a7b</anchor>
      <arglist>(const OptionEntry &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a1c7f2b04d13b8bfa0e36faa0d24d35cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_long_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a31a2a6dbb9cf995a5583fc5d18724ecd</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>gchar</type>
      <name>get_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a81f59eb285439b4c6e863ad4e6435e1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_short_name</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ac4e352caaf4a977dbbaf3352eed2e6fb</anchor>
      <arglist>(const gchar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a73ccebf305d55337d9001c614b4b90bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a99ab7ba877bae068713085810d908e20</anchor>
      <arglist>(const int &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a2d21cdbc2fc6b6220bb43a63376f34d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a62bc509cca2829535c1e65db5100fc05</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a1335b0adf09d6da089e5ef4348c19cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_arg_description</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ab9f1af6b5c5a8425dd357ccc07262eb2</anchor>
      <arglist>(const Glib::ustring &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a2c861668e4a9d4601e5b95ed05d05bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionEntry *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>af18b1584aedc0f26f406334b4840be84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>enum Glib::OptionEntry::Flags</type>
      <name>GOptionFlags</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>a309fc51cdc8e6815b034e8255a4e7852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GOptionEntry *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1OptionEntry.html</anchorfile>
      <anchor>ae69569ab0df3c4f00261d7b5d3230721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::OptionGroup</name>
    <filename>classGlib_1_1OptionGroup.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; Glib::ustring, const Glib::ustring &amp; &gt;</type>
      <name>SlotTranslate</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a31831d1e603e999d2977f8a9f44f8f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::ustring &amp;, const Glib::ustring &amp;, bool &gt;</type>
      <name>SlotOptionArgString</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aa696286ee0bca78484f1cfa96064b8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; bool, const Glib::ustring &amp;, const std::string &amp;, bool &gt;</type>
      <name>SlotOptionArgFilename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a80c4f3be4d3a6ee9e8b044b8c3413a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>vecustrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a138f22b58260f1150ba6a1b177944732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>vecstrings</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a35ca2f93ada18a71a190f6120ccccbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ade69f722319b9fa89f310ffecc8f59b5</anchor>
      <arglist>(const Glib::ustring &amp;name, const Glib::ustring &amp;description, const Glib::ustring &amp;help_description=Glib::ustring())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aabf5a3a067f992f0fd400bf7906c2f76</anchor>
      <arglist>(GOptionGroup *castitem)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OptionGroup</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a101d202836391404add68fe65d7d9767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_pre_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>aaa9f099207de7735453997ad6234c8b8</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>on_post_parse</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>abe8a3bc20f23cbc677c042773b6a092f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a7cdff34c14d75c57e265a416925bad0f</anchor>
      <arglist>(OptionContext &amp;context, OptionGroup &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>abe772a54bbad294d847b77349e86c8e9</anchor>
      <arglist>(const OptionEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a21c7501faad777f5fcd0b61d7c4d5395</anchor>
      <arglist>(const OptionEntry &amp;entry, bool &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a6d9cf49759c1162a0b6b37284aa62494</anchor>
      <arglist>(const OptionEntry &amp;entry, int &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af7741ffa0cec2c9d53ed3db902616a49</anchor>
      <arglist>(const OptionEntry &amp;entry, double &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ab30d8b251e06607e8d2ca062609477f3</anchor>
      <arglist>(const OptionEntry &amp;entry, Glib::ustring &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a533fdd3d3360a9d3766dcaa60f184aee</anchor>
      <arglist>(const OptionEntry &amp;entry, std::string &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af198c0dd532f1635aec904282109f130</anchor>
      <arglist>(const OptionEntry &amp;entry, vecustrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>af983b4762a0ceb7fc884f75ad5234ef8</anchor>
      <arglist>(const OptionEntry &amp;entry, vecstrings &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a8619d19917397044c857c4bdf7e05cf5</anchor>
      <arglist>(const OptionEntry &amp;entry, const SlotOptionArgString &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_entry_filename</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a518bd89309591b0189cfab7d7a3965c3</anchor>
      <arglist>(const OptionEntry &amp;entry, const SlotOptionArgFilename &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translate_func</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a6cbd659fca7f64f630c294310eeeef39</anchor>
      <arglist>(const SlotTranslate &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_translation_domain</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ade081f34243662912f557521f7175606</anchor>
      <arglist>(const Glib::ustring &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>afdf7f68b05a285cc5096a2a342d48bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GOptionGroup *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>ab2e09acc9712806287c549263a7ef689</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GOptionGroup *</type>
      <name>gobj_give_ownership</name>
      <anchorfile>classGlib_1_1OptionGroup.html</anchorfile>
      <anchor>a675828be7840ff47c049a700297516e6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RegexError</name>
    <filename>classGlib_1_1RegexError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMPILE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac11a5bc06049b1aa4a29f359d9699311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPTIMIZE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeadb70846fd70476234317a85c25ec1e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REPLACE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea964b2c225a4537f809fc16936bc51311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MATCH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea28b46b9e23b2bf005f3412ea50a89921</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INTERNAL</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacbbe88b39fff55c68900c886c5b4c207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRAY_BACKSLASH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab09a150d6a58d66d265a2692336e52d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6ab3f5cb7bd168665596f609c6f6bf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_ESCAPE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea33644134a56f87fa49b5d844270ed115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIERS_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea13d752269e2517ee7c1da6a7d3ccd584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTIFIER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea24d6bfcc787eea10791c71c794940c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab3280ae08c36e2d9aaf300ce0398a4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_ESCAPE_IN_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea37050b2967a0bb386dc67c103bb7010b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANGE_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead6b388a8bbcd5ccf8da8eb37710d39ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTHING_TO_REPEAT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7e70a821f568e0a377549b4ffb960882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNRECOGNIZED_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea526bb53f3338d8a54bd24c8746153396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_NAMED_CLASS_OUTSIDE_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa3e8d09cb921d7e27e2bd79191af2564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNMATCHED_PARENTHESIS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaffba2d7484326e06d5a914baf701fc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INEXISTENT_SUBPATTERN_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8fb24662419e3a9a6133af54c4710c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNTERMINATED_COMMENT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8ccdb4a0c2f080a7f9b9b861041905f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPRESSION_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea91f45235369ec1cc16730c91b04ef4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEMORY_ERROR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa118cb6d4d3bb626ae3a9bf30d9d3e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIABLE_LENGTH_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5e6a6cbf028bf8b738b3f3a8c245e716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7a1872fdb4f8f4f6cdfbd20621940464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_CONDITIONAL_BRANCHES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea306ed7e26afbc0033dfcb6a9165d1fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASSERTION_EXPECTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4fd6136d54e278a286c940115a96e269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_POSIX_CLASS_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf294d16429ddf572e9ec823d48316f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0fdf31394ac2b038b4f03bb6c865125b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HEX_CODE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafc09d459086b1defaeacd98061e90688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8f51cca8f5b24f262bb8d441b1d13df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SINGLE_BYTE_MATCH_IN_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa5e256f27139c4e0797e72bc1b0558dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFINITE_LOOP</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacd23493cf9362c3ffb4e362555068202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME_TERMINATOR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafb1ca877c760c4ce5c18e8431018547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DUPLICATE_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead4db2fafc63aa0903c5f1b5162dfe144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MALFORMED_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea873ce37b67fc7c09ae809d7b69b9e995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5dc05a927bfb03177be6b8e02110a56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBPATTERN_NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac3a68206322e6a29fed5f226ad6a1363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_SUBPATTERNS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae721479a6010c73363237f3e1fe9593a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_OCTAL_VALUE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3637d2d1401f99319f36fdd7b93fa4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_BRANCHES_IN_DEFINE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9fb84562d9b50996ced63b50cec435ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFINE_REPETION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5dab0875b3b65a3137a4de2fc8ebebfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INCONSISTENT_NEWLINE_OPTIONS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4ba4eaee2bb95111513ae76be9293b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_BACK_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf89dea2fbfb11afb96019ba07b527176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_RELATIVE_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaabc52446703ec11a83dabe0a7ea4c20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1305f3e75bbb67a1096bf992b6db6949</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_BACKTRACKING_CONTROL_VERB</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0a469468f787cf9d58e1488b97c16d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6b56e0ab17250c465d1be26be1632856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac1028a6f4a636c63510e56377164963e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_DIGIT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa3a7d04eb4db040182598d933794d34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_DATA_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafc9963b82ff802d72727bebb9e28eb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXTRA_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea50cca942c5c29a78bb1e424e82c6f9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafe0eb5b09a647ccd8f3791b8ba48a5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVALID_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7eff38c8f6dfe158b84e5b5553165bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MISSING_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea616dde817d2c2c31c3d2a989f482bfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_SUPPORTED_IN_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3b5278927eff36de845edf2202106cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_MANY_FORWARD_REFERENCES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6e07bfeb637ae3ee7fb23ba1a9aaa9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab8f8f9e0f6acaa1c4f3b40d8fb57ac83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHARACTER_VALUE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeace1891b4b53d522a54f42418954d41e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COMPILE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac11a5bc06049b1aa4a29f359d9699311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OPTIMIZE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeadb70846fd70476234317a85c25ec1e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>REPLACE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea964b2c225a4537f809fc16936bc51311</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MATCH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea28b46b9e23b2bf005f3412ea50a89921</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INTERNAL</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacbbe88b39fff55c68900c886c5b4c207</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STRAY_BACKSLASH</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab09a150d6a58d66d265a2692336e52d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6ab3f5cb7bd168665596f609c6f6bf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNRECOGNIZED_ESCAPE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea33644134a56f87fa49b5d844270ed115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUANTIFIERS_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea13d752269e2517ee7c1da6a7d3ccd584</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUANTIFIER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea24d6bfcc787eea10791c71c794940c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTERMINATED_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab3280ae08c36e2d9aaf300ce0398a4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_ESCAPE_IN_CHARACTER_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea37050b2967a0bb386dc67c103bb7010b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RANGE_OUT_OF_ORDER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead6b388a8bbcd5ccf8da8eb37710d39ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTHING_TO_REPEAT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7e70a821f568e0a377549b4ffb960882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNRECOGNIZED_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea526bb53f3338d8a54bd24c8746153396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POSIX_NAMED_CLASS_OUTSIDE_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa3e8d09cb921d7e27e2bd79191af2564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNMATCHED_PARENTHESIS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaffba2d7484326e06d5a914baf701fc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INEXISTENT_SUBPATTERN_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8fb24662419e3a9a6133af54c4710c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNTERMINATED_COMMENT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8ccdb4a0c2f080a7f9b9b861041905f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXPRESSION_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea91f45235369ec1cc16730c91b04ef4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MEMORY_ERROR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa118cb6d4d3bb626ae3a9bf30d9d3e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>VARIABLE_LENGTH_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5e6a6cbf028bf8b738b3f3a8c245e716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MALFORMED_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7a1872fdb4f8f4f6cdfbd20621940464</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_CONDITIONAL_BRANCHES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea306ed7e26afbc0033dfcb6a9165d1fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ASSERTION_EXPECTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4fd6136d54e278a286c940115a96e269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_POSIX_CLASS_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf294d16429ddf572e9ec823d48316f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0fdf31394ac2b038b4f03bb6c865125b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>HEX_CODE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafc09d459086b1defaeacd98061e90688</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_CONDITION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea8f51cca8f5b24f262bb8d441b1d13df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SINGLE_BYTE_MATCH_IN_LOOKBEHIND</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa5e256f27139c4e0797e72bc1b0558dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INFINITE_LOOP</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeacd23493cf9362c3ffb4e362555068202</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_SUBPATTERN_NAME_TERMINATOR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafb1ca877c760c4ce5c18e8431018547a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DUPLICATE_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeead4db2fafc63aa0903c5f1b5162dfe144</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MALFORMED_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea873ce37b67fc7c09ae809d7b69b9e995</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_PROPERTY</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5dc05a927bfb03177be6b8e02110a56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SUBPATTERN_NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac3a68206322e6a29fed5f226ad6a1363</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_SUBPATTERNS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeae721479a6010c73363237f3e1fe9593a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_OCTAL_VALUE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3637d2d1401f99319f36fdd7b93fa4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_BRANCHES_IN_DEFINE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea9fb84562d9b50996ced63b50cec435ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DEFINE_REPETION</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea5dab0875b3b65a3137a4de2fc8ebebfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INCONSISTENT_NEWLINE_OPTIONS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea4ba4eaee2bb95111513ae76be9293b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_BACK_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaf89dea2fbfb11afb96019ba07b527176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_RELATIVE_REFERENCE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaabc52446703ec11a83dabe0a7ea4c20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea1305f3e75bbb67a1096bf992b6db6949</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNKNOWN_BACKTRACKING_CONTROL_VERB</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea0a469468f787cf9d58e1488b97c16d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NUMBER_TOO_BIG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6b56e0ab17250c465d1be26be1632856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeac1028a6f4a636c63510e56377164963e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_DIGIT</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeaa3a7d04eb4db040182598d933794d34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_DATA_CHARACTER</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafc9963b82ff802d72727bebb9e28eb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EXTRA_SUBPATTERN_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea50cca942c5c29a78bb1e424e82c6f9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeafe0eb5b09a647ccd8f3791b8ba48a5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID_CONTROL_CHAR</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea7eff38c8f6dfe158b84e5b5553165bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MISSING_NAME</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea616dde817d2c2c31c3d2a989f482bfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOT_SUPPORTED_IN_CLASS</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea3b5278927eff36de845edf2202106cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_MANY_FORWARD_REFERENCES</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeea6e07bfeb637ae3ee7fb23ba1a9aaa9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAME_TOO_LONG</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeab8f8f9e0f6acaa1c4f3b40d8fb57ac83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHARACTER_VALUE_TOO_LARGE</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a0f1ec693485b5b6c8148045e6ffa3aeeace1891b4b53d522a54f42418954d41e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexError</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>a817d8fc1cd64ac013e8a971134880103</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegexError</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>addb3a6d45d66c56a3b4a53aa4b188f02</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1RegexError.html</anchorfile>
      <anchor>ae8797270b48b55796c372a6f97c193cf</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Regex</name>
    <filename>classGlib_1_1Regex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6099ec7a4be34e4fec017a9d18eeb7f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a661a9b85f52dbaaa68a6495ace7df50a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GRegex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a640d1c5b6bc6ff05461dbf11b97e4477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRegex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ae5c9e3ee8fd94e728128ff8eacb138c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GRegex *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6766b1090ea2e97757a5585aca14f926</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_pattern</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a802f0517b6bb5d72e55bc1dcaa8174a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_backref</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac7123b6f880561ff94134c808a254387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_capture_count</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a891b0f5b73a2beb390330778a0114c94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_has_cr_or_lf</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>acaef8a96694c134997528e20af58f672</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_string_number</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a033e3e0480fc5904d307f06a35e3240b</anchor>
      <arglist>(const Glib::ustring &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>RegexCompileFlags</type>
      <name>get_compile_flags</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac785eb93ccc7e89901467763e1592ed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RegexMatchFlags</type>
      <name>get_match_flags</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a81f29d12b42f6315195a329805869594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a52a55ce94fcdf6b24cc8d6cc2ba77ebf</anchor>
      <arglist>(const Glib::ustring &amp;string, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ad19516ab8cbcad727a159160a50bf26e</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a0db06bc90254899673d1899a01f16652</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a723e145e1ed53d0c8c272386ec1bfbf6</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>acbbd6f902b679b6b34554099a2ef67ef</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6e0224ad096ba88c94e6e648a619f163</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac5d1e01c383fbf2d8646d3deaf50148f</anchor>
      <arglist>(const Glib::ustring &amp;string, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a8e2a2daa7f18c41ca37080cdd4842fae</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa28e51fff3244cb499d89ef0919d8ec3</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a3bd99c4fe2a912d0e6dd56ddaf16f9e0</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, Glib::MatchInfo &amp;match_info, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>adf0dc5f15631c6a090c5724bfa71f4bf</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match_all</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a2e393570c407f42cbf4e223fab19f499</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a447bbb8dc8ca457d1c1a4ab0740ced7e</anchor>
      <arglist>(const Glib::ustring &amp;string, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ace0220e0ed2d7bd7771030e360e5141f</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0), int max_tokens=0) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>split</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a3f2f68542607519a358dd0ada1b5e3d5</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, RegexMatchFlags match_options, int max_tokens) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ae9f40c233d33361814252f8bfb00a716</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>add3848dcec1b22547ab57fddbfdaec1d</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_literal</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a4bccbbffa1c84249b35201ee6e6f39c9</anchor>
      <arglist>(const gchar *string, gssize string_len, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_literal</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a6660f8fcf2ec8a6e90a7ecc85ced0e2a</anchor>
      <arglist>(const Glib::ustring &amp;string, int start_position, const Glib::ustring &amp;replacement, RegexMatchFlags match_options)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>replace_eval</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ac5a2cf889ebf233c5d467b3816c8d533</anchor>
      <arglist>(const Glib::ustring &amp;string, gssize string_len, int start_position, RegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Glib::Regex &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a09d723a3b495453399d9f685b528727a</anchor>
      <arglist>(const Glib::ustring &amp;pattern, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::ustring</type>
      <name>escape_string</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>abc2c9b4f7d042a125d0d65fb16b71ff1</anchor>
      <arglist>(const Glib::ustring &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>match_simple</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a74905e31f14819b84c9e9cb53c79ca6c</anchor>
      <arglist>(const Glib::ustring &amp;pattern, const Glib::ustring &amp;string, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::StringArrayHandle</type>
      <name>split_simple</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa0911a410fa5295667d54e900cce7f10</anchor>
      <arglist>(const Glib::ustring &amp;pattern, const Glib::ustring &amp;string, RegexCompileFlags compile_options=static_cast&lt; RegexCompileFlags &gt;(0), RegexMatchFlags match_options=static_cast&lt; RegexMatchFlags &gt;(0))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>check_replacement</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a54071d7bdd63db75099445fe0c84580c</anchor>
      <arglist>(const Glib::ustring &amp;replacement, gboolean *has_references)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Regex</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>ad4d1d89ce7ff8a5b9294e9d8035319a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>operator delete</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>a88fe75f456608b165b2a9e15bc31dc75</anchor>
      <arglist>(void *, std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Glib::Regex &gt;</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Regex.html</anchorfile>
      <anchor>aa502a39684fb9d59dc689da8bb9d9da8</anchor>
      <arglist>(GRegex *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MatchInfo</name>
    <filename>classGlib_1_1MatchInfo.html</filename>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a605c6230ebe86112dbe175c41dc24439</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a1d066017abad1a6f7924be2cb57b7880</anchor>
      <arglist>(GMatchInfo *castitem, bool take_ownership=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MatchInfo</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a804a1eee88368392e859e29ed3240016</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMatchInfo *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>adea5b17c9746bef9e0cdb90a17a87cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMatchInfo *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aeadcd55d3530900ba472f931310e9a79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; Regex &gt;</type>
      <name>get_regex</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a039847559f658ce78697cfcebed5a10b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; const Regex &gt;</type>
      <name>get_regex</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a98293ed4313061d3c1f141ab45618117</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a60d5033eab3e60dbcec52ee1fa843149</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ac68b9aadafa1b51d9fe50d08e5972da1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a28d78ac3e2e82907534ca2dadb28108f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_match_count</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad0f3a5717883ea1949694616a0d06766</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_partial_match</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a83c53bd96815f6e77f89061bff8f4e63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>expand_references</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad851eed313f1a78753447920a053124c</anchor>
      <arglist>(const Glib::ustring &amp;string_to_expand)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>fetch</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aea45397443944b5c4beac2bc19fe5a99</anchor>
      <arglist>(int match_num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fetch_pos</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a59b2852b02e4c8a6300790793611ee44</anchor>
      <arglist>(int match_num, int &amp;start_pos, int &amp;end_pos)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>fetch_named</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>ad599df8b8c141c3216db92a3c2e817d7</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fetch_named_pos</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a225c431a626d47343c63680534329be1</anchor>
      <arglist>(const Glib::ustring &amp;name, int &amp;start_pos, int &amp;end_pos)</arglist>
    </member>
    <member kind="function">
      <type>Glib::StringArrayHandle</type>
      <name>fetch_all</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a0a67cb709a290fa830e25a7d5bb8c491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_gobject</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>aa689c9b63c4f58316e65f9b7a688ab1f</anchor>
      <arglist>(GMatchInfo *castitem, bool take_ownership=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GMatchInfo *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a97b0386692c38045ce3a3ad3349abf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>take_ownership</name>
      <anchorfile>classGlib_1_1MatchInfo.html</anchorfile>
      <anchor>a76ffcd817000f97214a1a83d5f39a092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ShellError</name>
    <filename>classGlib_1_1ShellError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAD_QUOTING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a87a1f1990f15ec29470015c546099f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EMPTY_STRING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435af5f165fd69f79da629715dd146065b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a26b92b828bad17cb4bf1fba0ea6b51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BAD_QUOTING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a87a1f1990f15ec29470015c546099f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EMPTY_STRING</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435af5f165fd69f79da629715dd146065b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>ae36e02f4bf8e48d4fe678b30b5300435a26b92b828bad17cb4bf1fba0ea6b51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>a2ad6bcad67427196b05b0be32703d148</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShellError</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>a3398d25526f1c1262c754320e815ba32</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ShellError.html</anchorfile>
      <anchor>af6494bba8a72c2aed2687f226f9cbacb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SpawnError</name>
    <filename>classGlib_1_1SpawnError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FORK</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baab272f8c8364b7fe1f2c1f9ce6a4d932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba37ffd619ad4510d59b4649b2fa049f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CHDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac5eac452082cfe3028beff42b0d6b691</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACCES</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba10d4616b0b9d9d15fc578b1f8d24bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PERM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badb86e737d1aad71dd6532ac538f597ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOO_BIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba189c9016d246c486218c470642785d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TOOBIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baa54cc8357ae3549f0a9632150abc79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOEXEC</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba6c56a0a76b5c1592a9f27360b6185198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NAMETOOLONG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba935d2d515caf353cc72e3d83fe6ca73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOENT</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba3f2b31be9ce24ed5ab81b7bcbdaa692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOMEM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf4ec02a278d149f15c321a08f178d9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOTDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bab036aa59800c9cc46f7f77589a834972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOOP</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bace672c6e10f2d3d902556bbec469ef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TXTBUSY</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baa4c93d16fd3f7325c7a5c28dba3bc3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba945a3a6fefecec1a9117e3c004ac7b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacf9724846be21b1bf67459439d70e7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba26fed21264f3d266ecf7717bd95a9d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INVAL</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bafa94e4842081fb87483c95de9d3eb73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacd5f1c45eae2de57269e5eeb0c56fd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LIBBAD</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba663c56fe66788d6a294f435d7f9824f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FAILED</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba1cf757ff0365e455fd6b94147f389bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FORK</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baab272f8c8364b7fe1f2c1f9ce6a4d932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>READ</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba37ffd619ad4510d59b4649b2fa049f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bac5eac452082cfe3028beff42b0d6b691</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCES</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba10d4616b0b9d9d15fc578b1f8d24bd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1badb86e737d1aad71dd6532ac538f597ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOO_BIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba189c9016d246c486218c470642785d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOOBIG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baa54cc8357ae3549f0a9632150abc79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOEXEC</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba6c56a0a76b5c1592a9f27360b6185198</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NAMETOOLONG</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba935d2d515caf353cc72e3d83fe6ca73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOENT</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba3f2b31be9ce24ed5ab81b7bcbdaa692f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOMEM</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baf4ec02a278d149f15c321a08f178d9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NOTDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bab036aa59800c9cc46f7f77589a834972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LOOP</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bace672c6e10f2d3d902556bbec469ef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TXTBUSY</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1baa4c93d16fd3f7325c7a5c28dba3bc3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>IO</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba945a3a6fefecec1a9117e3c004ac7b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacf9724846be21b1bf67459439d70e7ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MFILE</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba26fed21264f3d266ecf7717bd95a9d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVAL</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bafa94e4842081fb87483c95de9d3eb73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ISDIR</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1bacd5f1c45eae2de57269e5eeb0c56fd5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LIBBAD</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba663c56fe66788d6a294f435d7f9824f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAILED</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>afb7753661f7b0607951aa8881380ed1ba1cf757ff0365e455fd6b94147f389bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a29eb55d60f444f4d84e1a505defa2a10</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpawnError</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a7a3b357b3521a7f28c1517429d57eb31</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1SpawnError.html</anchorfile>
      <anchor>a42aa5204c37243835eb2c51df579b610</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadError</name>
    <filename>classGlib_1_1ThreadError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952a77b06db0f346d5946ff02dbbb9b629a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6b42834d5d29377db4aa1c4a79f63952a77b06db0f346d5946ff02dbbb9b629a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>aac882a2e31fd93acfb341ca0ed3f1192</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a51e5c3c760bfa1b7867a29eb1637ea1f</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1ThreadError.html</anchorfile>
      <anchor>a6a73deb2a8ea71fb40bc5b93ba2dda56</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Thread</name>
    <filename>classGlib_1_1Thread.html</filename>
    <class kind="class">Glib::Thread::Exit</class>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>ab95e51699279fd84c9577c45d76b0d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>joinable</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a9feee4b860d9928f86b9d255e2f2b133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a3b323f981147d7eb4b4bd03f3fbdccf5</anchor>
      <arglist>(ThreadPriority priority)</arglist>
    </member>
    <member kind="function">
      <type>ThreadPriority</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a28d1bcf53d846b8b0d75b93178a614ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a28fbc6c46928a90d82114fa9b6b63196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a351fa5fb621a394e28037c4f50ab69ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a2775df2f24b6166e3fab41e69dcd04b6</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, bool joinable=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>self</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a9db6864c35701b1c179f48217ab76cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>af30a7a8b037c7c7a3802aa2a22cf612d</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned long stack_size, bool joinable, bool bound, ThreadPriority priority)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>acad8be7a8093ef3aca32344264461011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Thread *</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1Thread.html</anchorfile>
      <anchor>a6bfbb3119eaac9fa8cb725aa1e82f61e</anchor>
      <arglist>(GThread *gobject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Thread::Exit</name>
    <filename>classGlib_1_1Thread_1_1Exit.html</filename>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticMutex</name>
    <filename>structGlib_1_1StaticMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a7052b89e18e8c7fa2c987dc429a01296</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a874e22be27896359ecb4008cd6e6f8ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a539181ea215c00c84e90d4f7a0131e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Mutex &amp;</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a144e7de846446e2ce1740adc7bf0dc9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a381d25917d27c665d3db638b4aa8b743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticMutex.html</anchorfile>
      <anchor>a5b1b115d491997555a22bce7256cd9b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex</name>
    <filename>classGlib_1_1Mutex.html</filename>
    <class kind="class">Glib::Mutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>a0e529e72691cbab324f7c70110d95031</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mutex</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>ac1a701f93ad62d97f9c34e98b6b3f7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>abd565d2c03dbd7526729b8e56ecc675e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>aa564c753a2e51994c3faee2b1d8c903c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>a254d550a0e2197d46fa7268475f19824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Mutex.html</anchorfile>
      <anchor>affe6aea5c5044a51422dd08f2dc06d98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Mutex::Lock</name>
    <filename>classGlib_1_1Mutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ab203085bd7e2fa065f2e770ff501882e</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a613aa058601c9f05d5663cfc005093a8</anchor>
      <arglist>(Mutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ae795f9ed3b07389eb856be7610362cde</anchor>
      <arglist>(Mutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a84f0589eee0654ec60f6773ca9336752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a1f892502061ae908452f7eb0ac920065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>af2c4e590e2c7f3820df5a4fa8293f280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ac5bfb4e0c5adf5787c5d5570acc1a25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a5cfe52efbd461ff26ecb9b4dc76cb9bd</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRecMutex</name>
    <filename>structGlib_1_1StaticRecMutex.html</filename>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>af318bffd84f77b39dbfe65bf654c265b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>ad59351bd8e600907511b9ed8a693c1ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>aed1a4127138ac49d4d7f2c27da7c236b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a9c1fbb797f5e0b72b885186e67ae6ebd</anchor>
      <arglist>(unsigned int depth)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unlock_full</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a380a6ae88b358e5b8661a7e765b19e8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RecMutex &amp;</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a8fbcf435aeb1c8797f7f4584cf06e0e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRecMutex *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>afc0c434e6d72bc3260346d79e8dd5588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_REC_MUTEX_INIT</name>
      <anchorfile>structGlib_1_1StaticRecMutex.html</anchorfile>
      <anchor>a2c8e79288c96d87c64769786c733a439</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex</name>
    <filename>classGlib_1_1RecMutex.html</filename>
    <base>Glib::StaticRecMutex</base>
    <class kind="class">Glib::RecMutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>a91462697c0142d75e0b6fe7c3ddb751a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecMutex</name>
      <anchorfile>classGlib_1_1RecMutex.html</anchorfile>
      <anchor>adee3de2eb61684af89e311ab6b940473</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RecMutex::Lock</name>
    <filename>classGlib_1_1RecMutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a7648e1bd74aa9c4a3eadcee85790d24e</anchor>
      <arglist>(RecMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a8c1f4e93c943c7778b525b3e0911ef91</anchor>
      <arglist>(RecMutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a128643b7286fe5ef281c05955991d74c</anchor>
      <arglist>(RecMutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a71c88960ca417bd926a5a037f6f1808c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>abcdab81c9e753579247652bca0cb4116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a47ee33f9ea131e215acb8eaa5f47b4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a480a9e87a8e8ce59faf09487ded6bdcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>acf1b4168f46b15425251e053087b0b8d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticRWLock</name>
    <filename>structGlib_1_1StaticRWLock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>reader_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>af80746638d6252c24243fcf3159d15ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reader_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a1cf789f9ffd606ad71d0e8fd13578708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>ad5aae43bc4a3c632823bfc81fe8a70cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_lock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a9cd606ef6f61488478d92ffc02ae0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writer_trylock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>ae6e4e019daf5f307a5c1be6ee20953a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_unlock</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a3ee12daec94dc696956fcd7b89265b5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RWLock &amp;</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a91c0f044b25a8ac53ef46ce08ac73c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GStaticRWLock *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>a4714a65b490f29119d021cecb4931e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_RW_LOCK_INIT</name>
      <anchorfile>structGlib_1_1StaticRWLock.html</anchorfile>
      <anchor>abe9bd8aefb468fcda2a3945bf9d23c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock</name>
    <filename>classGlib_1_1RWLock.html</filename>
    <base>Glib::StaticRWLock</base>
    <class kind="class">Glib::RWLock::ReaderLock</class>
    <class kind="class">Glib::RWLock::WriterLock</class>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>a71bb74cd3035b4abf617a10cfc50b723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RWLock</name>
      <anchorfile>classGlib_1_1RWLock.html</anchorfile>
      <anchor>acb72fd652e847296b580f796bb82fa36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::ReaderLock</name>
    <filename>classGlib_1_1RWLock_1_1ReaderLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a3ec567d55a84fb8ddf5892ae8adf5a6f</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>aa22f3de258861a7c9cfbf2c420bf60d8</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>af3f9ffabd993ae5cc40f91afb673e96d</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReaderLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>afa8de82014987c3834dea5142642402a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ae36282c4d009bf76910d37c5b010cc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ad30060213dc44abf4b3cfed6ad6fe2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a6859ec0e0caf92a7f3da8c96b9e22082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a4d2188db0b43037dc7353385a6869e5f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RWLock::WriterLock</name>
    <filename>classGlib_1_1RWLock_1_1WriterLock.html</filename>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a5aca4e3617470e59344f4c7f64b226ab</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a8eaaeaf2e0979b8032600c0a1144bf46</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>aa662238d1b2026823bcfafaf1f9b63d4</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WriterLock</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a47bfa749496840f33b7f8451eb637850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>ae508867d3b32dc73deab37cd5d785f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a597521878f1829509119c5b76ad96032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>af8028a0eaebcebc1d71e2658e6b66b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a2e6e9c3ffb9280efccd3b1523d6fcf6f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Cond</name>
    <filename>classGlib_1_1Cond.html</filename>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a2182b1171de3bdd0b97ab2f16d88a17a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cond</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a67919ec3f33e19185f72d9c1a0043605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a072cb37a06a695b54370209bc3280f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a2ed0ec9fc4e29140f8854a05bfb5df3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>ae989bf2891954ff5ed745f447cdccf2a</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timed_wait</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>acb37b09bf04ae36e30ec32c2f3d4af69</anchor>
      <arglist>(Mutex &amp;mutex, const Glib::TimeVal &amp;abs_time)</arglist>
    </member>
    <member kind="function">
      <type>GCond *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Cond.html</anchorfile>
      <anchor>a27a794031bc8a6c104db3b9977254c61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::StaticPrivate</name>
    <filename>structGlib_1_1StaticPrivate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*</type>
      <name>DestroyNotifyFunc</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a271c1862566ae25cc81642040847fadb</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>ad208b161d8e65e26ab559da7a306e1ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a35d07a85ca83076789c2dcb268d6c25d</anchor>
      <arglist>(T *data, DestroyNotifyFunc notify_func=&amp;StaticPrivate&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>GStaticPrivate *</type>
      <name>gobj</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>abfc8325b959a71497571c53c37141d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a6c230680af925b13a85ce8507549ab76</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLIBMM_STATIC_PRIVATE_INIT</name>
      <anchorfile>structGlib_1_1StaticPrivate.html</anchorfile>
      <anchor>a2697c638215d761f0d59b1fb76965234</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Private</name>
    <filename>classGlib_1_1Private.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*</type>
      <name>DestructorFunc</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>aa98c1daee2c349a4ff6173843351a6fb</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a398953b6c89edf91b5b1be28f453006d</anchor>
      <arglist>(DestructorFunc destructor_func=&amp;Private&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a7d643790e7724ef7f63ca0b2f9309768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>a7e4636b15cd3f43010fadea300791dd2</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>GPrivate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>abc4b19a17ca795b2878b5fd5a14f6fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>classGlib_1_1Private.html</anchorfile>
      <anchor>ac98db7269b43438fb45313092ee80cb6</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::TimeZone</name>
    <filename>classGlib_1_1TimeZone.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>af9c8a7635fc43243d13799b7cf9544fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a37e807fdfc03d2bcd650d03b8c100268</anchor>
      <arglist>(GTimeZone *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a97a5c31d3146547deb2307cf1d38a734</anchor>
      <arglist>(const TimeZone &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>TimeZone &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a66afaef68db0a541e2ea1ac3978f56bc</anchor>
      <arglist>(const TimeZone &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TimeZone</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a7999de2ccd969a521d580f228925e3ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTimeZone *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a5018eca73f72727ef17c5187d83f749e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GTimeZone *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>afc6556600c7fd49b5ef596c0974a161c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GTimeZone *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a210b9c3c3478f2292b1d26b3d3171211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>find_interval</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a0f3242fb2512db7eaaa495a7c59da068</anchor>
      <arglist>(TimeType type, gint64 time) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>adjust_time</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>aecf5f84a35a598bce6a9a8ad0a61b323</anchor>
      <arglist>(TimeType type, gint64 &amp;time) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_abbreviation</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>ac412636765e4cf0b2caff196831c0f3c</anchor>
      <arglist>(int interval) const </arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_offset</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a2745bd79ce4597e1894d248ceacfb485</anchor>
      <arglist>(int interval) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dst</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a7b6ce83c671b197d12caf8a87cabe280</anchor>
      <arglist>(int interval) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>ad53f95cbf8307a835575a33becff076e</anchor>
      <arglist>(const Glib::ustring &amp;identifier)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create_local</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>ae0eeec8e8ec473789702acac8e8ed37d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimeZone</type>
      <name>create_utc</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a3321991cbc511c9c1365d1e26de6fc87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GTimeZone *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a717ab5d4a1cc6c77665dd4e78b517ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::TimeZone</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1TimeZone.html</anchorfile>
      <anchor>a2d4464f05ba65fd63df60e9bcae8d97e</anchor>
      <arglist>(GTimeZone *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueArray</name>
    <filename>classGlib_1_1ValueArray.html</filename>
    <member kind="typedef">
      <type>sigc::slot&lt; int, const Glib::ValueBase &amp;, const Glib::ValueBase &amp; &gt;</type>
      <name>SlotCompare</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ad4c19ec101b806a29cc3ab3f2c8ddd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa403923648ca619054e4c8b8be1bb801</anchor>
      <arglist>(GValueArray *gobject, bool make_a_copy=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5edd2ac638c259f60fd99bb48b95bdc6</anchor>
      <arglist>(const ValueArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aff63102ffe3754919ac79b0dcb8588bf</anchor>
      <arglist>(const ValueArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5faaac10ee8876d546e4c86e5c37db7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ad273ae0b8f05b91c78f0d372cf273bb3</anchor>
      <arglist>(ValueArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GValueArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5ba764739af03092ea3bfebdf3bdc079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GValueArray *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a5c9dfbd4b5088750a7d141621122f348</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GValueArray *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a55215a65d59dfeff744b4cdc1695a37b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a8bdecaaa39e7f8159637768e495bfa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueArray</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a836e8fb2bc4e0c5dd4030599ae7f1ffa</anchor>
      <arglist>(guint n_preallocated)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_nth</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a2c32fe81f5d6cdf3040b8e621b02b02d</anchor>
      <arglist>(guint index, Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>abe238a2bc7c967a0941a416f1caa650d</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>prepend</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>af7c30ee85c708e917cb4f0779a0ca31c</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a14fa8d4fa2bba2386ae79bbe816f1c42</anchor>
      <arglist>(guint index, const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a30dd7f25f52351968e88c545bbf911c8</anchor>
      <arglist>(guint index)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray &amp;</type>
      <name>sort</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>aa62247fd9a4574141f09814affe8ab8f</anchor>
      <arglist>(const SlotCompare &amp;compare_func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>get_type</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a0810a3c63e3d39aaf4242905bfa4b752</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GValueArray *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a9b4925a477575dacae2507e5c57ed6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>a81733df07fb956f1a78e5ff1a046c605</anchor>
      <arglist>(ValueArray &amp;lhs, ValueArray &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ValueArray</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1ValueArray.html</anchorfile>
      <anchor>ad7bd84e60b7a67eb393a76b7da88d937</anchor>
      <arglist>(GValueArray *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantBase</name>
    <filename>classGlib_1_1VariantBase.html</filename>
    <member kind="typedef">
      <type>const void *</type>
      <name>BoolExpr</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a851de05ce6f55b8a51322acf715244c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a74bb8db40a8cd10d2fed3d02c4cb413e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afac0ab2bacb3ff7c1b8eea15ac75df9c</anchor>
      <arglist>(GVariant *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a6eb13ac35e3de8d16a866aa8822aea25</anchor>
      <arglist>(const VariantBase &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a2f30d304c0343fa3e86d1f9df2726d7c</anchor>
      <arglist>(const VariantBase &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantBase</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a813a96eca0e37518ec8c67bf154ff82e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GVariant *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a3b980321e6b0d16401343129dfc439e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariant *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a45f0a920cd09d1b01a09888a38ef962d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GVariant *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a08796c6b0ca3eacfe2c1b9d4f6100c05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator BoolExpr</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a5b02a861503f991df8af088aa63ee22b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a980a39e735ac4e68dfc37fe004161018</anchor>
      <arglist>(const GVariant *cobject, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>get_type</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a3c80e6f06c6e521313becc282abc8c3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_type_string</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>af33ac1d71e48fdf3461b701b4d081d67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>abf3b9e20b90e788017520aeeef6b572e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_of_type</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>add8f349a4b28bcaa2f371ff0a1e2e156</anchor>
      <arglist>(const VariantType &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_container</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a820465e7ed6003933fcb2cc26ebb0b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GVariantClass</type>
      <name>classify</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a70d83a47f0e2d3c42df0d8059c36528d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_size</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a44e000834c16fae60ea26d95e5a4c58e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gconstpointer</type>
      <name>get_data</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a687306a73541b9b5e11e91d6d8f97831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>store</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>acf846816697993b48edc7918524f8d59</anchor>
      <arglist>(gpointer data) const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>print</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a7710b7b3452bd70c8e07679eba195fdc</anchor>
      <arglist>(bool type_annotate=false) const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>ac3961de1c9f10ab5afc3ca47b953b806</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a34a6a44b9002dcc43478a30207d2e6c7</anchor>
      <arglist>(const VariantBase &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_normal_form</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>aa132cf27e283a93954ed088444267d1b</anchor>
      <arglist>(VariantBase &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_normal_form</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>aeba3e2dafc50fe64df6408dcb44f5870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>byteswap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>adb202d5375b8f5e9ce7fc721aeff9c45</anchor>
      <arglist>(VariantBase &amp;result) const </arglist>
    </member>
    <member kind="function">
      <type>V_CastTo</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a1f65fc45c20886cd9a5351ed5fa81463</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VariantContainerBase</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a9564ae1398eb9015369b3842d50b67e8</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static V_CastTo</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>a2be3093d4b23c33d481f39a1fcf82e62</anchor>
      <arglist>(const VariantBase &amp;v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariant *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>afb327758aeb118b06e9c9e6b0a796892</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantBase</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantBase.html</anchorfile>
      <anchor>aea2fee9e9505dfd38d7f086a335655b0</anchor>
      <arglist>(GVariant *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantStringBase</name>
    <filename>classGlib_1_1VariantStringBase.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a19acc951f904841d6763ae02a82a5637</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantStringBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a2c3976489342541b352bdc5136ac108e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantStringBase</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a13ea98681709fb302d36358ee74e41f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantStringBase</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>aa5349ce2660a42307b9f4206610db0a5</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_object_path</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a16f267560818fd2c30e1e66a08ad5199</anchor>
      <arglist>(VariantStringBase &amp;output, const std::string &amp;object_path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_object_path</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>aa07e4d93db2fb3c138f1b064a7cee4f7</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>create_signature</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>af0fc3a17ced885820fba0d0303c075fb</anchor>
      <arglist>(VariantStringBase &amp;output, const std::string &amp;signature)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>is_signature</name>
      <anchorfile>classGlib_1_1VariantStringBase.html</anchorfile>
      <anchor>a75f4a50974c381d161a7e1029a6bd5e7</anchor>
      <arglist>(const std::string &amp;string)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantContainerBase</name>
    <filename>classGlib_1_1VariantContainerBase.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a0eb3bcf04293730cf0afd1d67fd68425</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantContainerBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a398df2052900b8336d5bfc7e81a266ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantContainerBase</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a47701d34a101027946e14fcc2d00d863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantContainerBase</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a87220270495aa11312652234a7bb7803</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_n_children</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a9c42953fb12be0c0bf536a34ecee511f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a48fcf1f3f8d567293c0d1cacf6526897</anchor>
      <arglist>(VariantBase &amp;child, gsize index=0) const </arglist>
    </member>
    <member kind="function">
      <type>VariantBase</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>ad0a475e0b0b07ea03242c945a5db67e0</anchor>
      <arglist>(gsize index=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_maybe</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>aaefa38a66854da27c1df42ba7d7a2bb2</anchor>
      <arglist>(VariantBase &amp;maybe) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a9153ad406feee6ad2de943cd1ed71601</anchor>
      <arglist>(const std::vector&lt; VariantBase &gt; &amp;children)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a2338b26250ab256da44ca656191ae187</anchor>
      <arglist>(const VariantBase &amp;child)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantContainerBase</type>
      <name>create_maybe</name>
      <anchorfile>classGlib_1_1VariantContainerBase.html</anchorfile>
      <anchor>a4e2ff2c8d2db762fa398901e8863cb8f</anchor>
      <arglist>(const VariantType &amp;child_type, const VariantBase &amp;child=VariantBase())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant</name>
    <filename>classGlib_1_1Variant.html</filename>
    <templarg></templarg>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant.html</anchorfile>
      <anchor>a89a7bf134385689e8483eeaa545b9f0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; VariantBase &gt;</name>
    <filename>classGlib_1_1Variant_3_01VariantBase_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>aef12dfb1114110d5cd573edcac192bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariantBase</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a47f67dd40df9181969965ea8f3cde8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; VariantBase &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a7a580dab770c100e77a143a9c1db3ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ab2430e158b28a4997d1147f0e491326c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ac561a75cec9517628abed24619626460</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a979facd06b07ec6ba85664adf08dcdb9</anchor>
      <arglist>(VariantBase &amp;variant) const </arglist>
    </member>
    <member kind="function">
      <type>VariantBase</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a8ebec758eeb406b8a4468d08d655339c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>a07d44c0d3b5f66191d8d4289749a91e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; VariantBase &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01VariantBase_01_4.html</anchorfile>
      <anchor>ab3bd9f2a48125d9bf6ec97cceffbbde4</anchor>
      <arglist>(const VariantBase &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Variant&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>GVariant *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a40bd2209ab62aaa3185928152e787d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8b20837cb229d17e30fa7caf287cb631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Variant&lt; CppType &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa4004e5a2bc50be9b3d7c55cf3d136de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a61d949e79d7fc1cc3bd5953459d7e65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2d7deb8bdc66ca87f97272e23e095848</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Variant&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aa4ce353faeb174af7e15598616720831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0f4ad10afb46e25cf6f798c7c46a7ab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; Variant&lt; T &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Variant_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6e26f8d03ba8b23b8e6a8198ebef9005</anchor>
      <arglist>(const Variant&lt; T &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; Glib::ustring &gt;</name>
    <filename>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a5932042424360b4d1676e1164f99d92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>ace721757db0e386ead99e351d9fd336f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a622d1821cce69d2025de8207d2a93603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a15f3b2cb67c274646b22a3eb5fc530dd</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>aff216b00cd8b44a9f55fa5c810fabfa2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a2955ee131498392a06f49a6cf87bb56a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; Glib::ustring &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a5d5b10360e90d0e65e278798b5c4a587</anchor>
      <arglist>(const Glib::ustring &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::string &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1string_01_4.html</filename>
    <base>Glib::VariantStringBase</base>
    <member kind="typedef">
      <type>char *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a881ebd1b1395413cfb6a9ff571c306f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a248b5bcc8c754ddae52ff4732e5e7c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>af4c043bede19c1cd87c483a9eaa71fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a3be41b4b25916571336c7d9a71013fdf</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>ad645a8f784f358f255dba5df449bd468</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a67d7c4a0a784363fa9ab0f92ca592bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::string &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a74626aadb7c3fd708cfce84afb2461ec</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af1b225914da74bcaab8ff41907134dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af75d6eb73231ac036b5322f5ffeda77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a6daacfed337a15bda8403b2b73e65932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a9d904e473de66e95937a70d5ced84a5a</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a5174219c4a5a94bc27d6d95ee6220844</anchor>
      <arglist>(gsize index) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>af001c68fea416a8e3c90840ca967c380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a8bea936a3b64a20825216f8bd80b022c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a0ecc55e8b63891da8f705701ac0e8985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; T &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a4d86a01c64270f72942903c7028eb16c</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a18535cc3390f59c46cc4c86a31ab5728</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a9e2565fdd6f74e43c7c374eb6e2f9025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a7c1bd06e5b58b05a1f8517c73b6455b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a2cc9fbf227e1da4bcf99d99da1610742</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a9e1f908fef6e60c5c8fdd54c5cfd106c</anchor>
      <arglist>(gsize index) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glib::ustring &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a408cd7c531d00182c93b75a6ac7fe1e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a0019c9aed085deafc57e0a633c293ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a2f9b40f48bb5e9a7f460b910eec609cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; Glib::ustring &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01Glib_1_1ustring_01_4_01_4.html</anchorfile>
      <anchor>a1f93fea455923e86933202fe6c1566d2</anchor>
      <arglist>(const std::vector&lt; Glib::ustring &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::vector&lt; std::string &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</filename>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a016bab30c0bebd7a36daac0bd5dbd0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a0037564dd49a7b7cc7dd29f1b4e8153d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a1543d79bd49eeaff5b73e2006e100a0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a0594edf449f985b9322722025aff01c3</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a35cfe05959a314a002169b213e4042e0</anchor>
      <arglist>(gsize index) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>aa20d2e41f44b988db1dd43669b2e9a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a17c2e1cf0c99d2478400770cfb546b80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>ab9b7a5f067bed2b705510e4cd204d0f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a2d4d4da74b992fdc8ccceca8a6de4977</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>create_from_object_paths</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</anchorfile>
      <anchor>a368c1fa22c308798dacc0aeccb954146</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;paths)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; std::map&lt; K, V &gt; &gt;</name>
    <filename>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::VariantContainerBase</base>
    <member kind="typedef">
      <type>std::pair&lt; K, V &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a7078e1b37f5804cba48eaf9d83c71c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; K, V &gt;</type>
      <name>CppContainerType</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a3e78bf5b09a70f3620121caa9fa95a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a14a8aeea0c2633a9af5b788ee6392e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a84e8c71bc7e9db7d03a1e75ac0d22867</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; K, V &gt;</type>
      <name>get_child</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a409b01984ddac46afc45560cca184310</anchor>
      <arglist>(gsize index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookup</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>ae96ff1f8a0d73a4504c5b3c857dd05b0</anchor>
      <arglist>(const K &amp;key, V &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; K, V &gt;</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a3b1ae0a981d8b0ed81db558f49867787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantIter</type>
      <name>get_iter</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>aa8829f589c4763a3f62e8c463c0c5be0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>afbc21b7a2ea13de49050ec27a47bb00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; std::map&lt; K, V &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01std_1_1map_3_01K_00_01V_01_4_01_4.html</anchorfile>
      <anchor>a2d4b3be26cac7be44c1770fcc94dd593</anchor>
      <arglist>(const std::map&lt; K, V &gt; &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantIter</name>
    <filename>classGlib_1_1VariantIter.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ad2b942a346f4e627f8d506d56d2f6ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a3740e672ee31321f23cc25d100d521cd</anchor>
      <arglist>(GVariantIter *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a0900264d5dc894f33cf4725c01ae4c2e</anchor>
      <arglist>(const VariantIter &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantIter &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>ae3904f860aa1c241e7bd2732b03819e4</anchor>
      <arglist>(const VariantIter &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a024996a3ba3b4b80a23e4e71b8db0b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GVariantIter *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>aefb89b951a1e173003a0124a872dd10d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariantIter *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>af105c662414cfff282ea7658ee51c75f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GVariantIter *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a212196095dd77ce13cc99c1b9e9aff9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantIter</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a3c6536a04708e394d5a4f484ab47a126</anchor>
      <arglist>(const VariantBase &amp;variant)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>init</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>afe28c96086ebd28d28dbf8d0b517f5da</anchor>
      <arglist>(const VariantContainerBase &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>get_n_children</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a52a5d50c12bafc2cc6d1dba74926c631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next_value</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>aaa597dd59e369c4a8bcf7e15e48568e2</anchor>
      <arglist>(VariantBase &amp;value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariantIter *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a8c9f77e7a61fa4d0a580e2e6560f880d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantIter</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantIter.html</anchorfile>
      <anchor>a7c11a76e7facaa1f56e32af7661bd012</anchor>
      <arglist>(GVariantIter *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::VariantType</name>
    <filename>classGlib_1_1VariantType.html</filename>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a7d05abfd748f0e5917996682eb8d7b3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aa9f6a6269718a433540a56b874dd9e93</anchor>
      <arglist>(GVariantType *castitem, bool make_a_copy=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>addfa490c6545d0b0a3af409a1890c5b3</anchor>
      <arglist>(const VariantType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VariantType &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a0d63c3af32d9c2eeeeea3009207457fe</anchor>
      <arglist>(const VariantType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a385bd734d00495a4a3fe8a434e216255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GVariantType *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a911a3cfa7c4fc5e56cca07f0cb765487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GVariantType *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a6155f01582363d9d4af944d1445cff17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GVariantType *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9a158b1e3cafd0b351a403937550b341</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>af02bb61ceab7e1b8f89c2cbcd39e01de</anchor>
      <arglist>(const GVariantType *castitem)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariantType</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ae10ea525df2b241b59036de7684ae565</anchor>
      <arglist>(const std::string &amp;type_string)</arglist>
    </member>
    <member kind="function">
      <type>VariantType &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a32d8cf9c965f307b1dbabf5d8845e22a</anchor>
      <arglist>(const GVariantType *castitem)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_string</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ac5c9827283fad7449ba95cd144299924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_definite</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a6a87621d2363faf21a6567ef5d902667</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_container</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a904f1b6785984c07a52f4a29aa7e6acc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_basic</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a4f7b40578243457b772e05859ca58aff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_maybe</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a4eb67b2056e91fb6139ce8c801bb3176</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_array</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a5a05d7d692655b9ae4385c24065da273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_tuple</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>af6f59e8ae01cac71c836c85cdd30dcb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dict_entry</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a843ac24bb78fb1a2fb7d21e62df0177d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_variant</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a2c088b0421b0f8613fef8f9fce174c50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>guint</type>
      <name>hash</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>abfb9813509f7cd232efe4fe2c811bac0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a588b922bcd7f44b3aefb4883a883e1df</anchor>
      <arglist>(const VariantType &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_subtype_of</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a294a688ba6d3ed2523f25365db4253a3</anchor>
      <arglist>(const VariantType &amp;supertype) const </arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>element</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ae3b6667496af1b92a4ef6eeedea68062</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>first</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a2d67b5cbfce5a23a9bab43a45a6b3501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>next</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a516269f291efca8e57f2dea6ac0875a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>gsize</type>
      <name>n_items</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a38b33a104b64fdc40cd01adcfea8a5a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>key</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>af96fc9046121be33ec629763466fd658</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>VariantType</type>
      <name>value</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a04d066ac063480d86da8e2f6af80d11d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_array</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a75cdb696a91c6fbc3cc9042bb20e66d0</anchor>
      <arglist>(const VariantType &amp;element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_maybe</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>aeac7660b174a80c9ae1ade6da36fac15</anchor>
      <arglist>(const VariantType &amp;element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_tuple</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a1e6ee0f41b29df3b43b548c267b0c16b</anchor>
      <arglist>(const std::vector&lt; VariantType &gt; &amp;items)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VariantType</type>
      <name>create_dict_entry</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>ae491f86f5ebda97b1a6aae8cb96c6251</anchor>
      <arglist>(const VariantType &amp;key, const VariantType &amp;value)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GVariantType *</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a9ca6d5b63454a54702ad5e890ec95d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Glib::VariantType</type>
      <name>wrap</name>
      <anchorfile>classGlib_1_1VariantType.html</anchorfile>
      <anchor>a7ab0237355a6c562fa30b3afc4a10332</anchor>
      <arglist>(GVariantType *object, bool take_copy=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyBase</name>
    <filename>classGlib_1_1SignalProxyBase.html</filename>
    <member kind="function">
      <type></type>
      <name>SignalProxyBase</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>af340b9d05531bbf31e50d3b0ec6dec06</anchor>
      <arglist>(Glib::ObjectBase *obj)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1SignalProxyBase.html</anchorfile>
      <anchor>af0a2ac9d830f483801c24d551e1eb57c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyNormal</name>
    <filename>classGlib_1_1SignalProxyNormal.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="function">
      <type></type>
      <name>~SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>acb9ee0a3481abefb01456306c640a8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emission_stop</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a8142f5d5f986aea2ce8bfb22d8d38cf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SignalProxyNormal</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a17cc3a55165dfbf0b2681aace390e82c</anchor>
      <arglist>(Glib::ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a051e24c3af5f41c269351d49a8d3a1aa</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::slot_base &amp;</type>
      <name>connect_notify_</name>
      <anchorfile>classGlib_1_1SignalProxyNormal.html</anchorfile>
      <anchor>a2b05fbe06539c4fb26e2afc7fb2b8bc6</anchor>
      <arglist>(const sigc::slot_base &amp;slot, bool after)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy0</name>
    <filename>classGlib_1_1SignalProxy0.html</filename>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>aa4300c4457e00ddea67b8acabfeabba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>aac0788d3e60fb9447c3a7609a106dc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy0</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>a315e1db5a8d1b5bab0c505b5450d964a</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>ad6c26072ea85fe6e61895b0750421e92</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy0.html</anchorfile>
      <anchor>a90322c64ca5a87ad417b54e03d0fece6</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy1</name>
    <filename>classGlib_1_1SignalProxy1.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>a74fd55d7458f04ca1fbb90710f50b664</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>a415fd197f0d86750931a1c48ed4c284f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy1</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>a2dd1136fffb5f33c26a6d8d5018b3580</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>a22fdfb42d11a9a838bc50377e7c9e1a6</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy1.html</anchorfile>
      <anchor>a1dd40d7c3475124bb78053805fbde3f8</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy2</name>
    <filename>classGlib_1_1SignalProxy2.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>a7fd887895fb7faaafd71497222d8b895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>aa3768003cbf85e170e5268ce0153cc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy2</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>acc63a503d2e03b7fead353796a16aa4a</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>a66b5747c9db52041b508bc889ff36fcb</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy2.html</anchorfile>
      <anchor>af3711e737bbcbce60105da0c54d573d1</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy3</name>
    <filename>classGlib_1_1SignalProxy3.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>ab5d5438ce6ed3166b6c52d25846c81c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>a42233030672ff6bec3c0dafd2a8466d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy3</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>a3b4115c9c7c64a716232900dfdcfcde5</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>a1787ab4cf55c107e3cf89c76b1f080b5</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy3.html</anchorfile>
      <anchor>a7c36c3b4bae5eaed0eb6268abab7b247</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy4</name>
    <filename>classGlib_1_1SignalProxy4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>ac2e60a471ecf54d19180816735c4d4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>a048515fb890163551ff6394f1a8086e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy4</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>a45e43eedffc2d6e4590032a1b2970a92</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>aba46198055c59fe77a23f9aeb73bd6e9</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy4.html</anchorfile>
      <anchor>ad0a0c683c2a4e6cb6256e8394d74858e</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy5</name>
    <filename>classGlib_1_1SignalProxy5.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4, P5 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>a3034ac856495c243c3605228295e19da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4, P5 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>a269a9b11fa49a786f93d874c5d69d705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy5</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>a66342621153089f9ba317d42277a8ffd</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>aeb7dfcbe15052cec862881d007860a88</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy5.html</anchorfile>
      <anchor>a742cf5ed309d74f225017c1c0a73b511</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxy6</name>
    <filename>classGlib_1_1SignalProxy6.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Glib::SignalProxyNormal</base>
    <member kind="typedef">
      <type>sigc::slot&lt; R, P1, P2, P3, P4, P5, P6 &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>aae4a380b85f13a825abb7ebc6a256925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sigc::slot&lt; void, P1, P2, P3, P4, P5, P6 &gt;</type>
      <name>VoidSlotType</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>a6ec6f095e6f25507cf5a9ef924dccdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxy6</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>a8f10bc1c1fd13b5413c7c7329ce1da05</anchor>
      <arglist>(ObjectBase *obj, const SignalProxyInfo *info)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>a9c812f443964c3ccee3ff1b3af20c15f</anchor>
      <arglist>(const SlotType &amp;slot, bool after=true)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_notify</name>
      <anchorfile>classGlib_1_1SignalProxy6.html</anchorfile>
      <anchor>accd447826dc93315aec8a764dc3785d4</anchor>
      <arglist>(const VoidSlotType &amp;slot, bool after=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; bool &gt;</name>
    <filename>classGlib_1_1Value_3_01bool_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>bool</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>ae88fb44930dbc920dac73e65c99e730c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a03e98e6b149669bab502ab2b40430125</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a9fbbbc99675113812fad12fdda11a0f2</anchor>
      <arglist>(bool data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>ac15f58528e1d076a95864787c1a5798f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a066cc345d62be564ff53b25bd11e62e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1af751f0ac927df5ccba7d584cb9e63f</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ValueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a73ceadee7e4d2298b31d1dbe4bcd35e5</anchor>
      <arglist>(const ValueBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ValueBase</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>afc9306c3f8331458eaa66de6d352bf01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1659121f15f5e840cc1eba2b0aaefbb1</anchor>
      <arglist>(GType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a1d31168845e6bb144a66904e813240e2</anchor>
      <arglist>(const GValue *value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a30c7bde0d772b87dc890da7a197c4494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a33253264f47c41526ede3f78afdbe1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GValue *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>ab8050dbb94b1708d7786d797a4657d2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01bool_01_4.html</anchorfile>
      <anchor>a66381d27357321419bfe1b3f15ec1f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GValue</type>
      <name>gobject_</name>
      <anchorfile>classGlib_1_1ValueBase.html</anchorfile>
      <anchor>a3472d8f4c0bd6513c939ee3a4633be0f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; char &gt;</name>
    <filename>classGlib_1_1Value_3_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>ace3fb1ef40b0bb9bd7531b29fd7c23c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>aa73240b41e9a7a5070d059cf48998b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a2de97ae867d772bdb9da89e1359217bc</anchor>
      <arglist>(char data)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>a4d7b34e59b6c4794068cc81c0e9fa451</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01char_01_4.html</anchorfile>
      <anchor>aa3d698cb7af0a5ca27e462370a66971e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned char &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01char_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a12690f5fdde4602c8be31f5641671d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>aa6e944a254862b4172ffb2f73f164b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>aab3178311695a913986d7e7741f65ccc</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ad9052868813c9a91b8f74e98aafc8cf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ac697709ac8d7a4ccfb19d79e69c3739d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; int &gt;</name>
    <filename>classGlib_1_1Value_3_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a488f430153510c8234488c2616fbab8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>aa49fa1442738ee32438f57060a5c5495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>abd4c8e675046c0010591b10116c9e3aa</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a11ee320cab4dd4d8b16a76764cbc1a2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01int_01_4.html</anchorfile>
      <anchor>a3cae9644d1b1b7f70391ee14bb3b7478</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned int &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01int_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a9f4c47503ccda8cc3cb8df5ba53ef4dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a3bc327c92170cb334e4ed7c0e95f4ac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>ac3fda3995e4a33f71f359785d8fa8a88</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a6cc745b3b9d106ea2a4f5ccb5eb16722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01int_01_4.html</anchorfile>
      <anchor>a31035397d045545690e68a1a08619b6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a2438871713d4f6fa942cf5321bfc543a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>glong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a5acd60426eb1c8237812342aa115f856</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a8e572e84d90bf91abfb7dd5b476e5b9e</anchor>
      <arglist>(long data)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a948ae4d98cf20efe9bc7ac30686af7a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01_4.html</anchorfile>
      <anchor>a330f13a348fd72f361642380a19bf60f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a356e9890b6eefb45260c0ad4cfb731f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gulong</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>ac21b6d7d6e739939ccd318c9449f8ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a89a290484aa20b8299a66b1023e8f135</anchor>
      <arglist>(unsigned long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a9b4981d84a70b62e440c5c91e217aed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01_4.html</anchorfile>
      <anchor>a6abf2858362e23a94500242db4ad957c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; long long &gt;</name>
    <filename>classGlib_1_1Value_3_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>abc1c49c64d34fc457730f6da71c02b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a35059c27560d29558671037cc7a7eca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a5f9d39c582e8eebccddf95614c45a8a6</anchor>
      <arglist>(long long data)</arglist>
    </member>
    <member kind="function">
      <type>long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a18fb60e520c80f2a7e089ca74d66b9c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01long_01long_01_4.html</anchorfile>
      <anchor>a93480551d41d8690fbe9207b040f7843</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; unsigned long long &gt;</name>
    <filename>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a56c12feb80208cb23be5caef7db06012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>guint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a6bc8edb39e7e3ee0b26ee993ebbd7d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a190b1c8b1a2496a9b139d98c465eaffa</anchor>
      <arglist>(unsigned long long data)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a516c72a7c3c8e215db3fed4ed78d4b74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01unsigned_01long_01long_01_4.html</anchorfile>
      <anchor>a9a3dd742b5c9c26b883cdd9ee0287f20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; float &gt;</name>
    <filename>classGlib_1_1Value_3_01float_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>float</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a433a5e8f5ef4b7acb5380c4caf8c3ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gfloat</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a0be64034f31780a00829318259a5b7f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a14489a9eb51ff17ac80f07ecc1ac9c15</anchor>
      <arglist>(float data)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a7a63eac6755dd38d690ffa0d5d07d13e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01float_01_4.html</anchorfile>
      <anchor>a887a33770700af739023cc24f5bea16c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; double &gt;</name>
    <filename>classGlib_1_1Value_3_01double_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>double</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>a26d2764c822a4d9df661bd0bc8fd9f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gdouble</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>ad421fba746b8423ad60a944c0ae42a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>aef6e3c7dfda4a135bb2ee37b4ba468f8</anchor>
      <arglist>(double data)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>af1d30d9013028b281b80e17acd1021a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01double_01_4.html</anchorfile>
      <anchor>a046afc0453d84b0accb5e5e23bcd7521</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; void * &gt;</name>
    <filename>classGlib_1_1Value_3_01void_01_5_01_4.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>void *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>a6aee0d99ba9bc3a023b71955f3f8d507</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gpointer</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>abab9376bc45d880dd7d5159b8a0fb3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>a30f8bdfdaa2391c0a4f60f179ac30082</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>ad501fcb3182b6d49a48d0a240b5a4efe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01void_01_5_01_4.html</anchorfile>
      <anchor>a14370792a114bc30b65d7b6992bceb2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; bool &gt;</name>
    <filename>classGlib_1_1Variant_3_01bool_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a30e11f1ade0a5e8f7e4a6723aac66717</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>ad97748c9042fe5ba4ce7796ddae260f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a9323d675dccad278f534955fcbb7c31d</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a2692675beda621880499b8b570828531</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>a990e17b61c7eb088f3fe8523c18319ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; bool &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01bool_01_4.html</anchorfile>
      <anchor>ac047c865f0e198ad1a651f8b4c578440</anchor>
      <arglist>(bool data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; unsigned char &gt;</name>
    <filename>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guchar</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>af1d7e66621d899e600417d8573e5fa3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ab69b5eed963bbc8eb97ef43f0678fb24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a184f13cba62575857490193baebe4d64</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>ad5b16e87addbc60ef9b2dbe7c4dfb58e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a1a81388cf3729af8af61ae6dd02bf7eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; unsigned char &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01unsigned_01char_01_4.html</anchorfile>
      <anchor>a52a2deb4b520a6c434241ed6892c9a15</anchor>
      <arglist>(unsigned char data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint16 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint16_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint16</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a4d7463c37b0646c9d4327ec588192ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>aa7d273a4d48c98efec5105c81f8d9d0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>ac7f3ca1724bb28959069bf5ebfbacb16</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint16</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>ac928052d1bda3b4dd19310b8b304db33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a7ee6db127565d7b7c374b2eb79f31a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint16 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint16_01_4.html</anchorfile>
      <anchor>a9dbecd7481845fe7f7f43bf07b0474e8</anchor>
      <arglist>(gint16 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint16 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint16_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint16</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>ae46cf07597c5fca71e218d1a9512d6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a774076b9bad170c942d748f3737f6250</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a09c14f67d836673cf68860fe478cbb57</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint16</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a8d696bc3bc10cc59c182b190d97976cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>a4bdd5cc156499df42352b585ef9b8d87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint16 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint16_01_4.html</anchorfile>
      <anchor>adf3f1a3ecad8d6ab668ce7d0063a73d9</anchor>
      <arglist>(guint16 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint32 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint32_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint32</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a5dfdb7c0001bdf81b19dd7a240cd480d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>ac3362f64a5b90323c9b30170e2e2277d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>af5927fe4a6e94c21a344f61c441e3846</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>afc736169b7e2cab7ff4597ab271058b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>ae7da319ecb0f50dbda06eb4b110c2bf4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint32 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint32_01_4.html</anchorfile>
      <anchor>a793bfc20987e13448995c3fcd7191bfe</anchor>
      <arglist>(gint32 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint32 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint32_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint32</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>ab245a7b6a5b0df5581a332d34f39ef72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>a7d615ac3d0753303f46a04c74eef6b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>afe2095ce65435bdbf87d97257e57ea00</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>accc5ccf3d09069aac2a1febe68a9f503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>adf031643028001c6819c99cdf4401e66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint32 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint32_01_4.html</anchorfile>
      <anchor>a3263926c1eb852cf40f38d78927580a7</anchor>
      <arglist>(guint32 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; gint64 &gt;</name>
    <filename>classGlib_1_1Variant_3_01gint64_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>af5724b9a424bb331ef1b5a58c1e8c723</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>abe6382d5b63afe138d86b4ba7760001e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>ab001c9471880ad8f5c739fedde7ca940</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>gint64</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a9dcfed0798fb544dd73e44e000ff2ec2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a47c763e793f8c292a8a7e1924d04c2f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; gint64 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01gint64_01_4.html</anchorfile>
      <anchor>a9be72ef1a8f27251bbe8244e49f65a50</anchor>
      <arglist>(gint64 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; guint64 &gt;</name>
    <filename>classGlib_1_1Variant_3_01guint64_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>guint64</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a32b8156ba941fda2bd201bd27db87b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>aa6eacccec95c1a3e3a64a3b7fd67804a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a95c2676841996aafe140cbbcffc57603</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>guint64</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a50ac9dacaaac5a4cee16df9f6385ac75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>ad6fe86e878a126cffb7315a5719e0ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; guint64 &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01guint64_01_4.html</anchorfile>
      <anchor>a152939bc5c20901c264671a8244d2ae1</anchor>
      <arglist>(guint64 data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Variant&lt; double &gt;</name>
    <filename>classGlib_1_1Variant_3_01double_01_4.html</filename>
    <base>Glib::VariantBase</base>
    <member kind="typedef">
      <type>gdouble</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a1528d2bd3b24d6950b279c7354adb736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>acd948e4f7e6fa69c84d97c11b8909e04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a0b7a6eeb537fbab9c84e47db71c3c0d5</anchor>
      <arglist>(GVariant *castitem, bool take_a_reference=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a63d04008e87f104c55ae9693dc223c9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const VariantType &amp;</type>
      <name>variant_type</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>a89da29f762818e4e02455e7fb50c8409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Variant&lt; double &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Variant_3_01double_01_4.html</anchorfile>
      <anchor>ad2f6d86798471ef283cf87efe2add9c3</anchor>
      <arglist>(double data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandle</name>
    <filename>classGlib_1_1ArrayHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ad9ca8fd0074e25366ce9ae85c0da9ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a2161a555c5f651233af6aa32cfd016d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a6775de1220d2725511f79629f0d3a63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ab53c3c017bf20b871e8c109446c4847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a70ac22be895a7098a53c6df48ddda3b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>acd735f11ade4130e520ef66bd5800aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a8aba00ae24aa2813f378fd157dba99c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a4a44a959d2d1efcce93d7461e1dd9d61</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>afd5d474d461196189ee41591da7f9483</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a9cdca99f478f47db5c317097d68d45b9</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ac8a366a9b0b2f464f431a84228348931</anchor>
      <arglist>(const ArrayHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a0f94a99de78be3475f1b30adfd96fc6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>aa6a2e163a4d195aac53c75cb02be7601</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a4ac069ea1060d9c0ac46efce7694e7ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a84f5166b87b6851eef6e0e53af16e173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ade98fb9849f4595c0b46a8835dec9334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>ad216b723facfa2fa70ae73fc50fdd24f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>adb97a5d3054693384c85dd7b8ff8901c</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>acd758a3b51224a9a7ce64f7ae39f09d4</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>const CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a8794146efa526907e7c9cd6fc336cbf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a015dba4b696d48db4f8644ea0772e428</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ArrayHandle.html</anchorfile>
      <anchor>a6d3451afee37c942602a6db774838ffc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</name>
    <filename>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>ArrayHandle&lt; bool, Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>Me</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a4d8f1853cab5d78f38b8f55513ddc16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container_Helpers::TypeTraits&lt; bool &gt;</type>
      <name>Tr</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a2430a2e75fdc2406f8564d4761fdeb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a6849db0d5d0c39dd7364cfd772e80803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ac73690c98aee5974a1407347558aa99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>aa6644e04baa049184d15ce8275c8bc7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>ac29a4a4b0e72c4e4973fd3ad9b14f444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a57711e2620ae2c4156427b24f7392f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>abe46910479db220d40dc339da6b3c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a000d3e3601c681e217f1b9f6f7714cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a12d3aca4f7476aaab9d77375c55f5416</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a76304a8bf776a4493bc139224d653b00</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a55a16600eb3a4a42645f0001319e77bf</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a73455e5ddfac89c3b65f7b802068e0cd</anchor>
      <arglist>(const Me &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayHandle</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>aa9c9b51e7bf5eb6d8fdfa2ffc8b995bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a5dff2fb104ac42f76be8a849450ba46c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a71d4e6effb48b1cb9568f0f9463a511b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a9ba515b2eaedfd162ff1ed6667d48d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a81df4339acd73cd3ba1152aee46b10b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>afb966dff0b67602efd3f6af0f3b43fd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a80ed8fadbbf7b13050f46895362774df</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a98799d8c5047b7b0dcc75ba68e99bffc</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>const CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a1b715addce245586253cfd766076c61b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a7efa66f9caf06cf20032b30289cd8b1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ArrayHandle_3_01bool_00_01Container__Helpers_1_1TypeTraits_3_01bool_01_4_01_4.html</anchorfile>
      <anchor>a3638e3cbee974f5ac2b1edfb6e96bdf9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Sequence</name>
    <filename>classGlib_1_1Sequence.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Sequence</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a2f556fc5bb85887bfeb6547e0076adb4</anchor>
      <arglist>(Iterator pbegin, Iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a6d7083f5215ac6dd6d3197be858abcd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a3b5ed96c1fb03690b3baef6a97ae0b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1Sequence.html</anchorfile>
      <anchor>a134b7034d435c6a1e43b770e2cb78709</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Dispatcher</name>
    <filename>classGlib_1_1Dispatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a1883255c63f36e1d218ccf3f1abfa992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a14692fe3e39140fc164cbd03149a7ce1</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Dispatcher</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a6d220afa9063f8cf1364d5a1c73eb010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a07b89c90f931db118c8c184d0615ce92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a4610275deedf1324bf71afde1c8c71ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1Dispatcher.html</anchorfile>
      <anchor>a63645395ac79c03b5ec9e81d8099dea7</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Error</name>
    <filename>classGlib_1_1Error.html</filename>
    <base>Glib::Exception</base>
  </compound>
  <compound kind="class">
    <name>Glib::Exception</name>
    <filename>classGlib_1_1Exception.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Glib::ustring</type>
      <name>what</name>
      <anchorfile>classGlib_1_1Exception.html</anchorfile>
      <anchor>a2423c81571a101571751fe0a046beef0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::HelperList</name>
    <filename>classGlib_1_1HelperList.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T_Child</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a3b4451feb1e5c827809b0683fab225c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a435dafddf9beda6c5ff688ae22f80031</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a2b2af43788aef5aafd2bbb7bc8d9f13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_Iterator</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1dcce9f64cf02136eb201d1f04a844a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aaea545a89905ab1ebe26e053c53356f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ReverseIterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a3c6722e1398ae20a1adee87cc2c82fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List_ConstIterator&lt; reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a98d0b312ab29c9f5d2cb5f3dbcf76ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T_CppElement</type>
      <name>element_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a80a39df0948d7f233e620319715fbfef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>adf77ba3e3d72d3799ca34d67b115ae73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a5e45ffb93f587550987e25516ade1cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac8e607070eb44e5a6e2d431260d1fff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aa6a1fdb8068c9a6ff8e42f626c521743</anchor>
      <arglist>(GObject *gp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HelperList</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aab4e8cc0faf4cf94666eb8799fb161c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a4bee97685b3fc46d076721f82092f12b</anchor>
      <arglist>(iterator)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a411996bdc0ef3623a1d0e1e0d307de4f</anchor>
      <arglist>(iterator start, iterator stop)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a19373c8c69f4480a98208ed41a5ce176</anchor>
      <arglist>(const_reference)=0</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a6e57dbedd07db274cca4fc96c4dc1a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1804cd42b3665f7cc6d82a41080361ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a719bfa3471825fd4d5b7061504ed9e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ab9e537275fd961f09b7fa0c6670c973c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a8569a041346fb38b60eb2aec0662bb30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a19f577c7429327eb077c723b893b1abf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a86bb7c980a0ef4277471ba29e2a59e12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a1c6d98170261d1b9c89d34ce359827f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9724ef5c75c231a1b31b6220239e007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a67f0e94fa89408e7957189b08d049a4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a6cb331f7ecc76bdcf8a8f1af5a7e7b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a103bc1541be3a1fe5c9d23aa9d23d98a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>aaae13a6d35339259d14750014ebe480a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a92b37fcdf4dfee983e8ea2af4b710bf4</anchor>
      <arglist>(size_type l) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a28f275f049a351f9cc2bd4162de3ec6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a772423e892bd3ed57a11a544a0608b9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9f7bc99c64db14a448d70db0c008eb71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a3dc8d631ba89f7173882a50dd4dc03d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GObject *</type>
      <name>gparent</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>ac3c3de8a7a9ca70ae15ae2503912a21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual GList *&amp;</type>
      <name>glist</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a7ecdcc677de72ffe14d6c43ccc02ede8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>begin_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a9ac2bf92224630aab4fcc374b9febe2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>end_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a545ca00edc737af427e693c63dab4d85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GObject *</type>
      <name>gparent_</name>
      <anchorfile>classGlib_1_1HelperList.html</anchorfile>
      <anchor>a48e04ecc5c170b9e84af28b8df046f2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Interface</name>
    <filename>classGlib_1_1Interface.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
  </compound>
  <compound kind="class">
    <name>Glib::ListHandle</name>
    <filename>classGlib_1_1ListHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ab199f3051fababc22e222dd062a98455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a4bd7e0897feb485c068580ddb3d2ffa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>aca0af53b553d99c0bd0d89cff6bcec4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a7814e858297aa12da87ccef9215eedaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>af4094e1aea2c87330aaf8f864b049ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>ae17fbd0767ba97ba409be1b8eed016e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>af52a28438ef1ba99c203aa51947b238c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a0f9a98f5c1eb08aad145a204de80f586</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a36115ce113139df07308f2800f3eb2de</anchor>
      <arglist>(GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>aa07b040bd5462d9f4693a2b32baa212a</anchor>
      <arglist>(const ListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListHandle</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a1822fff1efe8aba9c0684598ddc291e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a5ce04b9462c6d93d41584319d8a55512</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a79a10a94cf804320e34efa10bc19d89d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a69d8e7eb6c1cde260a3fb66210154439</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a1edfd38dd93f2d92685803f1ecc980e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a794a2676d7ae909910305478ffee97c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a5eb5a6d1c631d0164bebe9c82ac17baf</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a7356c6c2ca4a5f618e09f81c99f62f6e</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>GList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a63127f932d732a8c5db19b486ca977ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>af7b34308cda8e6075e5aa94044e0660b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ListHandle.html</anchorfile>
      <anchor>a6506f89c461c3e5472e85e440b5cf3fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PollFD</name>
    <filename>classGlib_1_1PollFD.html</filename>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a7ae711b0cc1ce1b0cd467381955dc62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a902e5f082ecb994abff2ddbedd8a4992</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PollFD</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a409d8d7cbbcc89331cd46944791b6657</anchor>
      <arglist>(int fd, IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>af22b12cf9e39e5a6467b8d9b338eb6f9</anchor>
      <arglist>(int fd)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_fd</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>aed3cce9d7f50df212b5680f671518ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a0ff97568715e76d4cc57f8099f0c2b38</anchor>
      <arglist>(IOCondition events)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_events</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a3796334fca0f347be79f8cc209ffc412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a6cdd3635d279b0ec322dca7604e692c9</anchor>
      <arglist>(IOCondition revents)</arglist>
    </member>
    <member kind="function">
      <type>IOCondition</type>
      <name>get_revents</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>ad89b1655f967e43b1ad953cd0fc1122e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>a2ecf367bcde791507e699bac3a38bb1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPollFD *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PollFD.html</anchorfile>
      <anchor>ab0913925b29613809c0d6a5fcd43625d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalTimeout</name>
    <filename>classGlib_1_1SignalTimeout.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a75b555ed13d91e6903e927f9e0d7afd2</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_once</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a4ea8fdd120102d7963709916f28b2bcc</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect_seconds</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>a02ad93aa55aa48d48263df628b69fa95</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_seconds_once</name>
      <anchorfile>classGlib_1_1SignalTimeout.html</anchorfile>
      <anchor>aebbfd6e94c3c04bfac53f89e53fafa93</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, unsigned int interval, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIdle</name>
    <filename>classGlib_1_1SignalIdle.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIdle.html</anchorfile>
      <anchor>ac8befbaf1d10a17d1f3f75143e967a3f</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot, int priority=PRIORITY_DEFAULT_IDLE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connect_once</name>
      <anchorfile>classGlib_1_1SignalIdle.html</anchorfile>
      <anchor>a94217dc63e35f96b5cee4c48f2cdd020</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, int priority=PRIORITY_DEFAULT_IDLE)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalIO</name>
    <filename>classGlib_1_1SignalIO.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>ac205b21234d26094e75e0931c968c5d2</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, int fd, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalIO.html</anchorfile>
      <anchor>a779227bae6390b055243d1f3083a5388</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot, const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalChildWatch</name>
    <filename>classGlib_1_1SignalChildWatch.html</filename>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalChildWatch.html</anchorfile>
      <anchor>a4c2f5be316b9600133129cc974b6b5bb</anchor>
      <arglist>(const sigc::slot&lt; void, GPid, int &gt; &amp;slot, GPid pid, int priority=PRIORITY_DEFAULT)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainContext</name>
    <filename>classGlib_1_1MainContext.html</filename>
    <member kind="typedef">
      <type>Glib::MainContext</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a1cbedd2b4d723f53cd98df1bb757f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainContext</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ada2ea4035a4809198aecbc748b750495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iteration</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>afde2e29315da1239af998f1826ad5e88</anchor>
      <arglist>(bool may_block)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>acf4631ab57318f39f3e15d98ac1aaa5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wakeup</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a5a5e60018f7549f064e71b34b1668020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>aa92ee9cfb192aa5eb6c2aa0841068bbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a68c3d19af76d4b32aeae9d2e4f5c230f</anchor>
      <arglist>(Glib::Cond &amp;cond, Glib::Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>abbb4cc661f4f5773138a733f4a2ed156</anchor>
      <arglist>(Glib::Threads::Cond &amp;cond, Glib::Threads::Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ace2d9cdfa27cbe30026932de0526f730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>af6d1fccb3c1f5aab758d5eb1b3c15d6a</anchor>
      <arglist>(int &amp;priority)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>abd1bdf8fcb0130152237e87942c89ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>query</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a49e8976cec1ae4f5b5c30feea6094927</anchor>
      <arglist>(int max_priority, int &amp;timeout, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8061ef816d51cc27372f016c683cc513</anchor>
      <arglist>(int max_priority, std::vector&lt; PollFD &gt; &amp;fds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a5c1f06dbac3bbf771c25ce76af0d4880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ad8383c8f1a1a03b904f9be608ad8eaaf</anchor>
      <arglist>(GPollFunc poll_func)</arglist>
    </member>
    <member kind="function">
      <type>GPollFunc</type>
      <name>get_poll_func</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a34a0b1e31173e163f11053dbcf21b84c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a7cdbe7d102a781b6aded3cdda45fef34</anchor>
      <arglist>(PollFD &amp;fd, int priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a33ea2db49dd93739599d19756c251627</anchor>
      <arglist>(PollFD &amp;fd)</arglist>
    </member>
    <member kind="function">
      <type>SignalTimeout</type>
      <name>signal_timeout</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>adf307c9028858449e932f5fff100d432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIdle</type>
      <name>signal_idle</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a2a12990fb67f7b5c1ed61e36952dd827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalIO</type>
      <name>signal_io</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8c8a4283456eb9036cc09dc3aaf203dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SignalChildWatch</type>
      <name>signal_child_watch</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>ab646f19ce79faa35d97e8af93e6ca6d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a71499a662e6ac07590a0972b1b0eac64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a8eaf5d38c393770f150db7bad9a67f9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a0fbf5178aca208161051097f034d3694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainContext *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a1814534a832aecafba4a790e7b5ca25d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainContext *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a3a841522a3db9ceb73742f9f235c3d2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a31bd96bf707a21c8a3003337dd3af9c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_default</name>
      <anchorfile>classGlib_1_1MainContext.html</anchorfile>
      <anchor>a1502cbed045a9fb27d18c6975e1d255d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::MainLoop</name>
    <filename>classGlib_1_1MainLoop.html</filename>
    <member kind="typedef">
      <type>Glib::MainLoop</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a5cf7f1f3137b7ecfde3a843087cc89d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMainLoop</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ad5e8a0005860126cac043cb60be70078</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a4cc8eeba5dd463189737f859974ae158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ae1a76ab4fe58b23ec8238d6aa40cbab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_running</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a9dca351bd77e00412f5e73eacc41c5fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a37b86faf3ae28cfa49c15b73b15a24f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a5e40799cc2e26b57227c269f0d4dd831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a26ac94620e6b7887aedb20df468a9123</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>aa53b9c0c885e28390b45e83aef4b2934</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GMainLoop *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>aeef011a123044d42b0422c36d28c450a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GMainLoop *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>af4d2883d0ce518a137f49f131225a99d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a37a1dcf3cb167cf02260111f533d0b5b</anchor>
      <arglist>(bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; MainLoop &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>ab02f157ce27cd8aa5592eabc739ccdec</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context, bool is_running=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>depth</name>
      <anchorfile>classGlib_1_1MainLoop.html</anchorfile>
      <anchor>a023045e5b0069af8260e721fde21f4c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Source</name>
    <filename>classGlib_1_1Source.html</filename>
    <member kind="typedef">
      <type>Glib::Source</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a2edc89f6c4601e50f5aa22cb36eb9437</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GSource</type>
      <name>BaseObjectType</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a6dbe7bc8cfb1b72d61f06a180119db7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aa61d28e643f2b286203b0d8e533b2c88</anchor>
      <arglist>(const Glib::RefPtr&lt; MainContext &gt; &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>attach</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a77c4b83960b2fd8d65b10ade1fc2e2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a98c983f075cdcb77c576b10900b3e052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a0c485044d82729a97b19cbcb841f3c53</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_priority</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>abdbea3f0b3404098729945a9973d638e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a9ca4bf99d7837587021e3cafd6775aba</anchor>
      <arglist>(bool can_recurse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_can_recurse</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ada9f428f6265066eb9879b95246795be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_id</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ad4b66f89818dcc0c22479ec3c4f8f21e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::RefPtr&lt; MainContext &gt;</type>
      <name>get_context</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a42935adf57e6605188e38236cb14b607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a4e855292e2a99861f33c3ba3e5cc3486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GSource *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>af22441954ace1f7d0d1e0314a9778787</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GSource *</type>
      <name>gobj_copy</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>affb708925e62814627bb2d332e1de0ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a72a59a45934a94a26aea8de5f1262235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unreference</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a7c87c88cbce09d3a7fb10c4e9856f57f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; Source &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aeaffb039abf99982d7a89403bca71569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy_notify_callback</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>af6135656536048436ebbb6424d366800</anchor>
      <arglist>(void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a9d081ba880470694d7aae3daaee30198</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>accc8cdb2f85ee750e196236a6533b1f0</anchor>
      <arglist>(GSource *cast_item, GSourceFunc callback_func)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Source</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>ab075ead07aec68d085190935fe49ba22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>sigc::connection</type>
      <name>connect_generic</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a7ee23894376489ae9cebf18bada4e014</anchor>
      <arglist>(const sigc::slot_base &amp;slot)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>add_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a3a0843a960cad7a25919a682c37c9d03</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>remove_poll</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a67b7133527caa4f788674af0b4f185b2</anchor>
      <arglist>(PollFD &amp;poll_fd)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_current_time</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aec16c75c6c202ea5cb4667aef2637d3c</anchor>
      <arglist>(Glib::TimeVal &amp;current_time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>gint64</type>
      <name>get_time</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a84e6fe51e3b1123c2cb2ec936133de48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>abc0e9e88fa74766818d317cd75d6aa3f</anchor>
      <arglist>(int &amp;timeout)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>a914448375c7e0dfcee1a686a006c685d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1Source.html</anchorfile>
      <anchor>aaf867fd3b09fc05d9c3e20cd89f35bd9</anchor>
      <arglist>(sigc::slot_base *slot)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::TimeoutSource</name>
    <filename>classGlib_1_1TimeoutSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::TimeoutSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a922118e49e86690ad1b1b343734eaec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>afd5504a056dbbf1c2aa38450c59c197d</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; TimeoutSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>aafe1898dd9ded8c66fc1dc9e9ba80884</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a1477a30365d9b50fc3a02c92535d084c</anchor>
      <arglist>(unsigned int interval)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimeoutSource</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>abe7d69a1390602de55a5207b1e25d64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a08b0603920ff6ca9d3986121d584746a</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a1d618d99c0d7d6b65b0118174e1cfdfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1TimeoutSource.html</anchorfile>
      <anchor>a27f49b37169765057787f68dabb0cad3</anchor>
      <arglist>(sigc::slot_base *slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IdleSource</name>
    <filename>classGlib_1_1IdleSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IdleSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a0b70fdba79b73916c80aade11346aff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>aeac761cf8634206bf4e599ae468140e1</anchor>
      <arglist>(const sigc::slot&lt; bool &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IdleSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a2d60b73fff1919fb0b9022a4d9a0b148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a4970d5053f39e3200ae09d15b7a9507f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~IdleSource</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a898491e226ae73dfc191f81905ae8165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>acc5555f554ce39e52a039da6a49bd259</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>ad909d691258ed037243d2ae444160964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IdleSource.html</anchorfile>
      <anchor>a47da1054d939bd656d704c719ddd5633</anchor>
      <arglist>(sigc::slot_base *slot_data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::IOSource</name>
    <filename>classGlib_1_1IOSource.html</filename>
    <base>Glib::Source</base>
    <member kind="typedef">
      <type>Glib::IOSource</type>
      <name>CppObjectType</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a53b297a9c28f4dfbdb25dcbd12676797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a2fc25e8e5d5ff2a1388226b92a6d7164</anchor>
      <arglist>(const sigc::slot&lt; bool, IOCondition &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ac2dd533bf8293c42a157173d8a64a9fa</anchor>
      <arglist>(int fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; IOSource &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ae47864cf6220de79dc9902719917750e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a93fc45dbe64b0c3f1a8d1fae1ede3625</anchor>
      <arglist>(int fd, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>ac6f9fd1ae2a5767e84bfb948419a168e</anchor>
      <arglist>(const Glib::RefPtr&lt; IOChannel &gt; &amp;channel, IOCondition condition)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~IOSource</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a6a55eea63478f8ecb56d3fb147940cfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>prepare</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a3a4aec26372e72bdfb709e6fe37a205d</anchor>
      <arglist>(int &amp;timeout)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>a110d00d58e547a8c3f0af3885c7ec7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>dispatch</name>
      <anchorfile>classGlib_1_1IOSource.html</anchorfile>
      <anchor>aaf471a16f9b9659af63d8f0b39cea51f</anchor>
      <arglist>(sigc::slot_base *slot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Object</name>
    <filename>classGlib_1_1Object.html</filename>
    <base virtualness="virtual">Glib::ObjectBase</base>
  </compound>
  <compound kind="class">
    <name>Glib::ObjectBase</name>
    <filename>classGlib_1_1ObjectBase.html</filename>
    <base virtualness="virtual">sigc::trackable</base>
  </compound>
  <compound kind="class">
    <name>Glib::PatternSpec</name>
    <filename>classGlib_1_1PatternSpec.html</filename>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>afc18aa40675afcdf3e62c6f5ac4d67e9</anchor>
      <arglist>(const Glib::ustring &amp;pattern)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ab8c5ce3d5297d01f0db9055bfa61d9fa</anchor>
      <arglist>(GPatternSpec *gobject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PatternSpec</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a632b3dddb4474c101ba5928c56e9241f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>ab7b6f1a9be3dacfbbd9b8ccf250879ba</anchor>
      <arglist>(const Glib::ustring &amp;str) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>match</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a01ffc20a65f707383f2940c5b23918b0</anchor>
      <arglist>(const Glib::ustring &amp;str, const Glib::ustring &amp;str_reversed) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a1fc213b6fa0c79676b0813f4f6844d2d</anchor>
      <arglist>(const PatternSpec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a8ee9597a79da95097edebc084ef7189c</anchor>
      <arglist>(const PatternSpec &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a6c01de7b965dd5bbe2bdce8527ac9af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GPatternSpec *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1PatternSpec.html</anchorfile>
      <anchor>a833bfbd56088c2edf1d17546ac9d4b78</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyBase</name>
    <filename>classGlib_1_1PropertyBase.html</filename>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a89dee7c3023f99bf2d1ce8792177a91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>notify</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>ada1c2294c7b3b159af8b5dad1ad02c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>aa6c0b97d8561766b8f4a9f5a183c9f00</anchor>
      <arglist>(Glib::Object &amp;object, GType value_type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~PropertyBase</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>abe19b39fa1b7b75b95da94390f8bc19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lookup_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a4a0e9de0bb457270b6c307d14e9c5a02</anchor>
      <arglist>(const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>install_property</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a5d63e95270aa1aa16f9a9c896897184c</anchor>
      <arglist>(GParamSpec *param_spec)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_name_internal</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a357eabbcb3ce5a694370d73a4921337e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::Object *</type>
      <name>object_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a7191a31bd5cb2665947378ea58b3a4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Glib::ValueBase</type>
      <name>value_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a82bc5e296e19c2d7e42a0b78fb5f2062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GParamSpec *</type>
      <name>param_spec_</name>
      <anchorfile>classGlib_1_1PropertyBase.html</anchorfile>
      <anchor>a227edf3035194bbb6f161c4ae9a74280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Property</name>
    <filename>classGlib_1_1Property.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyBase</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a7ab4e7520876b32d031842816c8b33f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Value&lt; T &gt;</type>
      <name>ValueType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a9e0517ff48ae26638e22768506769afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a3a9605f1efc1c170059804bed07a41ac</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a9bd490d36e1068ba4c1225d941530603</anchor>
      <arglist>(Glib::Object &amp;object, const Glib::ustring &amp;name, const PropertyType &amp;default_value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a19fbb8ff9bad70974e28e487284a48db</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>ad8d4a26b3ee23cb7f3b5067a2a7fc77b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Property&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a07169f608d8d53833c305da5936a922e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a0c32a8465004fcd2c300f84b75666335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::PropertyProxy&lt; T &gt;</type>
      <name>get_proxy</name>
      <anchorfile>classGlib_1_1Property.html</anchorfile>
      <anchor>a50f48c982d6d2fbd1fcf60bd6965a34f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy</name>
    <filename>classGlib_1_1PropertyProxy.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>ad5f4eac0a367fae18b0db33ab6c42235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>af8353d01e3ae6134eaceaf900ffb84b9</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>aff4eb140b4f4da0488c4387c1047ad82</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a4bbf4c99c138e7e33ce6393147b4e121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a4ea1719ff572be400fdce1f3257fdf59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>add4490830382a8173acf097dffffd92e</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy.html</anchorfile>
      <anchor>a127addf739d2d3f40c4a066a543ef967</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a249bf7fbed57d8feca6280747e85cd35</anchor>
      <arglist>(ObjectBase *obj, const char *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_Base</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>ad21a12ef0a572caec3b160561f60e8ee</anchor>
      <arglist>(const PropertyProxy_Base &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SignalProxyProperty</type>
      <name>signal_changed</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a19357ed2e9492700e37215edb81fd071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a0a0360fc03da108b2748285c834c81f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get_name</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a99f16695928aa09959de3046eaa6c266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a062bab7773ae2e9666a26fb6426003d2</anchor>
      <arglist>(const Glib::ValueBase &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>get_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>ad8d3fea5cc9fe955bd1cb29d8d37da99</anchor>
      <arglist>(Glib::ValueBase &amp;value) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset_property_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>a2551363499a510336507194725de6c43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectBase *</type>
      <name>obj_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>ae027890146dbc4acfa49634e7c44cce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1PropertyProxy__Base.html</anchorfile>
      <anchor>af76cdd8c35935963d0f9d5975e81a726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_WriteOnly</name>
    <filename>classGlib_1_1PropertyProxy__WriteOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>ab793e05112b9cf356d29f32f3a4389c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_WriteOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>aa8fc4a6944fa92745e6db12f8a102e04</anchor>
      <arglist>(ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a30500a1c44729093af1e5e9b1110b80a</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>a000abcd69676eeb0afefd671e4670c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyProxy_WriteOnly&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1PropertyProxy__WriteOnly.html</anchorfile>
      <anchor>aa62bc22fa9389657d8562d375b616401</anchor>
      <arglist>(const PropertyType &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_ReadOnly</name>
    <filename>classGlib_1_1PropertyProxy__ReadOnly.html</filename>
    <templarg></templarg>
    <base>Glib::PropertyProxy_Base</base>
    <member kind="typedef">
      <type>T</type>
      <name>PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>ae9be436770223139b25acd136fd1e2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyProxy_ReadOnly</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>a49910fa712bce1cd0ae51e6728f9619f</anchor>
      <arglist>(const ObjectBase *obj, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>PropertyType</type>
      <name>get_value</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>a187f0f2ba5e18198fd0cc64381b466ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator PropertyType</name>
      <anchorfile>classGlib_1_1PropertyProxy__ReadOnly.html</anchorfile>
      <anchor>af03f7075d100e4e0f8759bde8990b80f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SignalProxyProperty</name>
    <filename>classGlib_1_1SignalProxyProperty.html</filename>
    <base>Glib::SignalProxyBase</base>
    <member kind="typedef">
      <type>sigc::slot&lt; void &gt;</type>
      <name>SlotType</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>ac9c7309b66266e9da0b24d99988174b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a7fedeaa4f15140fa40b99b2dd5a9657b</anchor>
      <arglist>(Glib::ObjectBase *obj, const gchar *property_name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SignalProxyProperty</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a7f3c64d03b63a01cd29077fb4792988d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>sigc::connection</type>
      <name>connect</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a911d4e8417d1ee28b4286030ddb40e4c</anchor>
      <arglist>(const SlotType &amp;sl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>property_name_</name>
      <anchorfile>classGlib_1_1SignalProxyProperty.html</anchorfile>
      <anchor>a74a5e9f3fe2b3029bb4eb0110cd57cd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::PropertyProxy_Base</name>
    <filename>classGlib_1_1PropertyProxy__Base.html</filename>
  </compound>
  <compound kind="class">
    <name>Glib::QueryQuark</name>
    <filename>classGlib_1_1QueryQuark.html</filename>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a4373d14f457d6fa855ba8856ab2aa7a3</anchor>
      <arglist>(const GQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>af9aec4964064bfc5729d3c1dea64bfc2</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a689ea595339a8aa820889679566dad9c</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~QueryQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a11d61a902d6a2d7fa0320d8dccdd80ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QueryQuark &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a38371df4b4b7b1f8a507cb5005926a4b</anchor>
      <arglist>(const QueryQuark &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ustring</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>afad20a823ed00ee534d73c85c7356cbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GQuark</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a60cc4d06c14341960cddd6210c97ecd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GQuark</type>
      <name>id</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>aa242f5723b6e2f856ee8a7dabad54908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a9230b9306682910da0eb4c8b6109ea69</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1QueryQuark.html</anchorfile>
      <anchor>a5fb42accd107c962baf7524a3b1bc41e</anchor>
      <arglist>(const QueryQuark &amp;a, const QueryQuark &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Quark</name>
    <filename>classGlib_1_1Quark.html</filename>
    <base>Glib::QueryQuark</base>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>a951c36a3aeeba482e72e7ee1e1af1d3f</anchor>
      <arglist>(const ustring &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>a6b629a0d8f6a4ba0da254b180cab4cc4</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Quark</name>
      <anchorfile>classGlib_1_1Quark.html</anchorfile>
      <anchor>af332fd59c51a2e805609af0e4be19e29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Rand</name>
    <filename>classGlib_1_1Rand.html</filename>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a61110e0e8ef1566076feacdb4d472f78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>acec64f502eee6193abc892e85c0c4577</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Rand</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>ae0c1611e959aeeafb8f9a3f73c7ac59d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_seed</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a4a545e4f20bd7e603c14d46c17d3fe4f</anchor>
      <arglist>(guint32 seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_bool</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a4d90f1e3ef59d0b071efa0445b6fb469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>guint32</type>
      <name>get_int</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a22cefc85a2eb30bfcae6180a5ff33338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gint32</type>
      <name>get_int_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a182b9a36db153d316baf5efb1ece9fd7</anchor>
      <arglist>(gint32 begin, gint32 end)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>ae439c4403f696ee326c2569386e99819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>get_double_range</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a997d49286a48fdc484f643bf665bef86</anchor>
      <arglist>(double begin, double end)</arglist>
    </member>
    <member kind="function">
      <type>GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>a9e0662cd37ac942a23d434ae8fe861e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GRand *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Rand.html</anchorfile>
      <anchor>aa47686d4dc285684c86879bb5dfb5a57</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::RefPtr</name>
    <filename>classGlib_1_1RefPtr.html</filename>
    <templarg>T_CppObject</templarg>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a8b6c39656dbc5d452933b35faf352f74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a36b7fbe4a04bfe51f56b3c7062bb1316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>aca71e4ac99f37bf901ca3709a4bcf487</anchor>
      <arglist>(T_CppObject *pCppObject)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>abaf32caf7deadcabeec0fd7f95bd1d7f</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefPtr</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a5a8465a0045d0d7310acfc21ae318b6e</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ab54eb64fe0e872a0b88119107a5ba1f3</anchor>
      <arglist>(RefPtr&lt; T_CppObject &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; T_CppObject &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a80ea91e3e0e0c460f941266980e14416</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>RefPtr&lt; T_CppObject &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a9ea2f146765b25efa95b38d59a38f410</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a94830ac72b547040600ba157af592a93</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a18d79f08aeea24f8fdc6ed6f94c428fb</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>T_CppObject *</type>
      <name>operator-&gt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a62cd21eed81024435a6ec778e991365c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a8a7604cb37dea79a1f3e4015621bce46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>ab7fb103f02d4a0fb21d7a8d0824047cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>abdcc38a6aeef7ae330c045eaf9324b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a5ea9b5eed0b4169b85f0c46f5ee0378c</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a4120ad849d5fc65b4cbff8ee1aed06e5</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a8cc2e82247955778cf663c9f5a9ece0a</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a722711d362140718fd745f36124f9e75</anchor>
      <arglist>(const RefPtr&lt; T_CppObject &gt; &amp;src) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_dynamic</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a07c06c5c305e65d6149a139c462a78d1</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_static</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a2930d8c0eaa2610ee58cd267d325cc6e</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RefPtr&lt; T_CppObject &gt;</type>
      <name>cast_const</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a2162d6e2813b95c19866f6a03b0c9154</anchor>
      <arglist>(const RefPtr&lt; T_CastFrom &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1RefPtr.html</anchorfile>
      <anchor>a5d6b2cc2157904a53cab15d4e9b96524</anchor>
      <arglist>(RefPtr&lt; T_CppObject &gt; &amp;lhs, RefPtr&lt; T_CppObject &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SListHandle</name>
    <filename>classGlib_1_1SListHandle.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a1a0f5b4ea6dfa404fd750e1d5a299cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ae27beb74adc3d2b29e4f162ecdac2daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>abf106ec7c2ad5f59a05dccbb9cbabb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ad433b73462fff8f07b0f631eb5db584e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>aa99d21983c41e351c262918bddb8ca22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ad9a2637f0adec0d2dc56b8f26aaa9bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListHandleIterator&lt; Tr &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a37ffca039dc422b61f08981a87b62838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ac0b356f88cdc1ae822f3db5600ad8568</anchor>
      <arglist>(const Cont &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a14f6477eed92aeda49ade71915a6a172</anchor>
      <arglist>(GSList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a0c35999d203ce8723ed2b7fd0579887e</anchor>
      <arglist>(const SListHandle&lt; T, Tr &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SListHandle</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>afe0de87e1ce88e589d9ea62e1b3d1f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a4e5ceedb31cd4551f928db6b3bcbb414</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a6cab595825c6ddf437ca9c35e1222835</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::vector&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a5950390b42720f575398f66eda061216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::deque&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>ae224005563b6de5d31f712c20e2884c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; U &gt;</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>aebc0b4cfb98b55a7b2ee2664aa968e97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_to</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a36e2b69424cf20535308a4370636d644</anchor>
      <arglist>(Cont &amp;container) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a3fc65fa85beb4c461cd44719aa71bdac</anchor>
      <arglist>(Out pdest) const </arglist>
    </member>
    <member kind="function">
      <type>GSList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a6eecd613408202c9fa0ee68c6acf51cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>aeb8d0ae540028ed6307f2e2a55298cff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1SListHandle.html</anchorfile>
      <anchor>a60e282c29d1e15cc25d161afb0de0f9f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::StreamIOChannel</name>
    <filename>classGlib_1_1StreamIOChannel.html</filename>
    <base>Glib::IOChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>ab2258ca857b53e12918f4acff37b69bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>af05ec7633a97902748738417ae742d5d</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aeb3177836df152b6b4a4debacbffbb16</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Glib::RefPtr&lt; StreamIOChannel &gt;</type>
      <name>create</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aa8b797316447a92a1cd657799922b2da</anchor>
      <arglist>(std::iostream &amp;stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StreamIOChannel</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aef1abb0c118ab43a97b00a860ccf6204</anchor>
      <arglist>(std::istream *stream_in, std::ostream *stream_out)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>read_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>aad85c2e9149428db83575ff98bdac482</anchor>
      <arglist>(char *buf, gsize count, gsize &amp;bytes_read)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>write_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a9b6ce8cea1b948c1d408c946c4ad27eb</anchor>
      <arglist>(const char *buf, gsize count, gsize &amp;bytes_written)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>seek_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a82c4a6b077c542d1b79c23ecc6b1772f</anchor>
      <arglist>(gint64 offset, SeekType type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>close_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a20deabe6a3bc6b1488975375e61af626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOStatus</type>
      <name>set_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>add1a29876a6d3b553f41ef21dd654f67</anchor>
      <arglist>(IOFlags flags)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IOFlags</type>
      <name>get_flags_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a29a782e3ab6d7fc1b77f612c97c195f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Glib::RefPtr&lt; Glib::Source &gt;</type>
      <name>create_watch_vfunc</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a77595f06e524cd2cb3dc7958fd274f4f</anchor>
      <arglist>(IOCondition cond)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::istream *</type>
      <name>stream_in_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a81a491b37d051a0ea5a3c3f8177d74ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream *</type>
      <name>stream_out_</name>
      <anchorfile>classGlib_1_1StreamIOChannel.html</anchorfile>
      <anchor>a83bcd47600a9a4ab6c3f500479f683c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ThreadPool</name>
    <filename>classGlib_1_1ThreadPool.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>afd549a2867eafe34663d8935c17efbe2</anchor>
      <arglist>(int max_threads=-1, bool exclusive=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadPool</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aaed3b188194822da768fa9a29e608b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a7b37fdac9f7a6e4a8791b4668e23e264</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ae19ed9a523788e40509ee4f39d2b10a9</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_max_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a6dbe83ceeb65fd0f157e1b1895ed3db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get_num_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a2a6bc66c4eb03e346429e6f7fe3a5fe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>unprocessed</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a8eb62f226a5f5e2f93b66b25c49cc401</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>get_exclusive</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ab59582875f80b94bf4707c1c77f234ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shutdown</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a14a3e00a1fec5fec2bded78ea6a2b796</anchor>
      <arglist>(bool immediately=false)</arglist>
    </member>
    <member kind="function">
      <type>GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>ac7f444f305942afb54c45204f509bc39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThreadPool *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aba0bd84d5851f3a64269685dc102cd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>af057a2e30dc3e32137944f71658467db</anchor>
      <arglist>(int max_threads)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>get_max_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>aa0bb8c1914b2e36fa0222bbaeb44b94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>get_num_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a9904f39dc346cd44296f361415147ae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>stop_unused_threads</name>
      <anchorfile>classGlib_1_1ThreadPool.html</anchorfile>
      <anchor>a132a7f8416d29f9499ed87ba102c37a3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Timer</name>
    <filename>classGlib_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a1ff80cf54560a168274fa69be8f0c280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Timer</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a261ce5699feab81230a37fd6f2f80fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a05067986b126f147111357ff7693aea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a3c54e67ddbc01f39b843b1df45aa3c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>a82d5eef4159c73d8412b9e927073625b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>aa1cb1f3f0105ad140122e661b4c74b6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>classGlib_1_1Timer.html</anchorfile>
      <anchor>ac627928a24ff72cce9779675606aba3d</anchor>
      <arglist>(unsigned long &amp;microseconds) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::TimeVal</name>
    <filename>structGlib_1_1TimeVal.html</filename>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ab1861a9cd1f66b581b99ba9bb9456626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac72a9eada5c330236f7bc7f305b19179</anchor>
      <arglist>(long seconds, long microseconds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimeVal</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a5f889cb372ca5abb6796cfec44b8cc0d</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a2098aff57cd47005faacb51854ede6a9</anchor>
      <arglist>(const GTimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign_current_time</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a9e28e3310fc1ee5e2dba7a7ed9cbb97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assign_from_iso8601</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a0dbe47db920938db0676eb4d7a5b1abe</anchor>
      <arglist>(const Glib::ustring &amp;iso_date)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac94c07dbb768f3d1c68731e735f074ba</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac47cd4e39665d3a25e3a236b0ced620d</anchor>
      <arglist>(const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ae24a9a526b4f66a16a2bc0047ac52ad6</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_seconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aabd386d64098d531101589ba7f9aad4a</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a116ddecfdc3994b541e05d0fd27ce297</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_milliseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a08a82c224a744142db48b9d9f25a236f</anchor>
      <arglist>(long milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a55648d2e807fd75d0eafffc3a595eaf0</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>subtract_microseconds</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a495a575cdc38ec785808e58750020957</anchor>
      <arglist>(long microseconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aab1d96583d1fb003ec887f2cd6fa00b7</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a8f20714471ddf46966a0bbdda19448be</anchor>
      <arglist>(const TimeVal &amp;gtimeval)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator+=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a0fab78f2bb33e9f9dbcddbd5ea27cf76</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal &amp;</type>
      <name>operator-=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a8868ad08d7f5e874b05b1045f8b4b230</anchor>
      <arglist>(long seconds)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>as_double</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a7ed446e8ac1aade48f0091a628b0e489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>as_iso8601</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a1f1c57dfc0f335f99f4cd281e237f421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>negative</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a293fe201a8511f7a982b36accfa1e75a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a0eafa6dacfbe329fd2a47ada4170ea2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a73ff3d601bc8fa6c8930bb38bfc4b81a</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator+</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>aff0c676ec4f733efaa502a143a230c5f</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a535d26acb52dfff88be818f67fbdf374</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>TimeVal</type>
      <name>operator-</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a53bcd5233d92b3af6a55cb4aff9fb6f6</anchor>
      <arglist>(const TimeVal &amp;lhs, long seconds)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a77e3f591d386260fe9e9c63aafa31173</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a3519281c327ded4360495fc2dee669ee</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>ac68de516b4ddbd26ab553e661108fa83</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a2bbae56f9818348985dac857054f4d78</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>a288728d04ff97620e97b8742c337e21d</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structGlib_1_1TimeVal.html</anchorfile>
      <anchor>adf5ab3ded63a7ff5c134622deaf03640</anchor>
      <arglist>(const TimeVal &amp;lhs, const TimeVal &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring_Iterator</name>
    <filename>classGlib_1_1ustring__Iterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a9747bb41c8c89ff372d6c70e23f6682d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ac41f5f5a8d57b96eb23a17f481a41f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>aa32792b92260dd761d004c690b972068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a4426e6cc18ea0c46eb30244e76a40459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>aae8b8c32b749da9edfa1f181cc87e281</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>af20ce404b0ffb807ace293af4ddf7f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a456579af0eafeabf6014825dc8b3c103</anchor>
      <arglist>(const ustring_Iterator&lt; std::string::iterator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ad9584840127f854137265bf2d4c054f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ada50c68ef23fd35a3d20d4ad57b02e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a1c746bd9a2ab884ba19190fcdeb428b5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ustring_Iterator&lt; T &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a70cc9ab14d049e21a0375e97d7b8759a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ustring_Iterator&lt; T &gt;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>aeebb923631e3535e9e96a1f65edec999</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring_Iterator</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a1f4b5aaeadcc90211e016f08a0be846a</anchor>
      <arglist>(T pos)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>base</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a1c81fae5230c3f0df726972abba61c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a71d2d580e6e761fd4dd1f9a0bda9e3ab</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a913deefabb28e251ed6f29ac4316e031</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>ab187b9c8fe8307b54f5bfa3e4e6b5ce0</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a36a8542e086c203993fcddfc054dda4e</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a8a95c65ba9914b5d0c2ca56c1e3d6770</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring__Iterator.html</anchorfile>
      <anchor>a25acc98a371197b997295485b477e4de</anchor>
      <arglist>(const Glib::ustring::const_iterator &amp;lhs, const Glib::ustring::const_iterator &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ustring</name>
    <filename>classGlib_1_1ustring.html</filename>
    <member kind="typedef">
      <type>std::string::size_type</type>
      <name>size_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67bac62e72402790de6b76919a678f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a35fd6dff1d5e33f207c93b1fb9a393e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a282e7bdfd09169c91913243e65d1bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gunichar &amp;</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af7abdeaff45f1839953696b3ab2b0bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const gunichar &amp;</type>
      <name>const_reference</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a217e97c14d897f663015955d1072605f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1353523668478524d050a381540f0c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ustring_Iterator&lt; std::string::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7772ea4022ea491d6eda042265b14f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab48da172f9331e26f5691800a37910e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; const_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5cb2ea16c5fd222652cd50c5a9753b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a71802782f4c2c408ef7ac69c6564b370</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3b1f50569022372092fc6dd01ae304f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5dc4cc90abcdd62a33f9eb92852aac2e</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa8f2a6f7f4321afd3800e8fa038d2609</anchor>
      <arglist>(const ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aab10391953b67135dba63ccee17bc0c8</anchor>
      <arglist>(ustring &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa18a6019809b2cb64bb329a8422f1857</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a37655e890b5cb3a2f0fc862b85ba29cc</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4a32814b94b8158c126f9dba4cc49839</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac15b3452b5e61664c5cc03e63fc1cb87</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aca3b1f0ea95a872075249152726e26cc</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9578a8ed5b5efd1b85ff06064931cc04</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ustring</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a01e9bf49373f364a7a5650f9de806d56</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab09a3fb3ebcb703c9fe2c8a182ca61d9</anchor>
      <arglist>(const std::string &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a462c9ecbe5a1ba9f82f3d8fe65551799</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3a6b53d3bdad890c0c55a3dd5eb1ee6d</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a192af14563f29029f00e1dfc3cb97180</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a042e31ee9f6f03238776b64901386fb1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a35e75872182e516aecf7cbdc14e67ce2</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a989c810b8a7d63893adac83020f9e974</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a08c1aa84e95d2d4012faeb83b61e0c4f</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6e17c136d7fce8916c2c72af1c403fbd</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8c5e94fc459cd41784a476bfd55c5fbe</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>assign</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4338286bc81f4e54050aba273984cece</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afefb665c88b67a3eaaa00f3a07977cf1</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8b493156ea0a9b488765b4b683874ee5</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9820af75b209405f70477c42e2cf76ce</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4752324b5d6ee7d39fa6581d473a5d4c</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afdf6aaf1bdc127a37b779e872f005663</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa7d9d1a618d511a07aa8d6a297398c71</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8ee78968938b742083e3dd785be1c82e</anchor>
      <arglist>(const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a62f1635fe0971922a42c0daed6014ae9</anchor>
      <arglist>(const ustring &amp;src, size_type i, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a696bcfe283235e38a8bee7806cb80dba</anchor>
      <arglist>(const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41df279b9a20314cd810190a5732b7d4</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae1dc013550a42becdb36e407044d5b39</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae2ff748e9869b087c3a5b7b486b94ae2</anchor>
      <arglist>(size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>append</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a84e95ff4b9b5e71a20cb2c99d6168fe0</anchor>
      <arglist>(In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc7ed354d9657590e61f65dc9ea4b498</anchor>
      <arglist>(size_type i, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7dee38b14e2975f3ca60ad407bef62b6</anchor>
      <arglist>(size_type i, const ustring &amp;src, size_type i2, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67da2d68fda78fd3e1f70c915ad0c8f7</anchor>
      <arglist>(size_type i, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af3e79d497de7d2e593a1aa1e267cce64</anchor>
      <arglist>(size_type i, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c163a5f8690d593e44a2cad810bbd5f</anchor>
      <arglist>(size_type i, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3f60e626c9cdb00f1ae73804542a6cd4</anchor>
      <arglist>(size_type i, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab1b0455f1db1608834c2c6f7ab753f25</anchor>
      <arglist>(iterator p, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae74a1b439755c000f9d77e3a51f2c522</anchor>
      <arglist>(iterator p, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae0ba0b641b603d07490c90789f9592fb</anchor>
      <arglist>(iterator p, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa2ff066e10cb1ed9ecbee902e625c859</anchor>
      <arglist>(iterator p, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8dad1bbcde2adf3fc9fabc4ddac8a42d</anchor>
      <arglist>(iterator p, In pbegin, In pend)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0f0c9b5aaad58279d3ac87a86a173f4a</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0e5c1ca4f4fe63ab8ba991339676ee16</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;src, size_type i2, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab0bb3c55c72e41f856be06f0026c7289</anchor>
      <arglist>(size_type i, size_type n, const char *src, size_type n2)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8111ac295e4d589075a78e46d304f908</anchor>
      <arglist>(size_type i, size_type n, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41fd10a9dae5a6e5a48844255be3667e</anchor>
      <arglist>(size_type i, size_type n, size_type n2, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab10df235025c2bd67bbc82630ae6169f</anchor>
      <arglist>(size_type i, size_type n, size_type n2, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a440d241c8506fef8d7db45390b7082bd</anchor>
      <arglist>(iterator pbegin, iterator pend, const ustring &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6175229e79d9e8331a59cf11a572ac7a</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src, size_type n)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a44fca1dfd45c017330af208415752975</anchor>
      <arglist>(iterator pbegin, iterator pend, const char *src)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a54e65b70536fb16267c7e229db929009</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a880730452006fdb7f78a710fc5c51b9b</anchor>
      <arglist>(iterator pbegin, iterator pend, size_type n, char c)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a60dd5d7a58443e503f39b0c7372b77ed</anchor>
      <arglist>(iterator pbegin, iterator pend, In pbegin2, In pend2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a29d71bbd400b18e9e81b1f51b193a172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acd29a2b0ea0e40068a1b77a2276bb68e</anchor>
      <arglist>(size_type i, size_type n=npos)</arglist>
    </member>
    <member kind="function">
      <type>ustring &amp;</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>adc5cf169c9af32e912727ce3bf541549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac6ea980bbbeeef8bcf727543c9bd5c69</anchor>
      <arglist>(iterator p)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad550647c64ee20c076aae11c824ca147</anchor>
      <arglist>(iterator pbegin, iterator pend)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad4f3c89d55b5ce58496c01bec13fbd87</anchor>
      <arglist>(const ustring &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac0f5618d299fc7c9c9387dca4fee278e</anchor>
      <arglist>(const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a896603d088b3db98ba084ee6900b92b1</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3311a190eff2fcb3f01b6b736e574790</anchor>
      <arglist>(size_type i, size_type n, const ustring &amp;rhs, size_type i2, size_type n2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0de1dfcd10b91f85a0baea620fe30744</anchor>
      <arglist>(size_type i, size_type n, const char *rhs, size_type n2) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0ebb73a80e6a0d6604eb84713642c4bf</anchor>
      <arglist>(size_type i, size_type n, const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7c0336492100e3087fc3d12e2104d9fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>casefold_collate_key</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a387001c1a7a7e05948a0e1f4997a2e60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8fcf9d29eb96df85bd813226d4d11351</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>at</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a544f9aafff4f0148dfd58fa15cd734b8</anchor>
      <arglist>(size_type i) const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>substr</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa20ce59c438020d4bfb29348ba572a30</anchor>
      <arglist>(size_type i=0, size_type n=npos) const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6389a5bd22b924d09dd483c6f09cf80b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abd3e8c51c3ee4f2a2e077e0956ab7b59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a56e38ee05aa5ef340710e40e7d86dd6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aedf6c9ace813837cc76a4632fc3b6c96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6fa752b1bbfd0b816f338db1ec913da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a67c0a179fa38d0f69396a7827d9e781e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rbegin</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa6e3d349dd64fc8475812e3914cdd36d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const_reverse_iterator</type>
      <name>rend</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a93da84513eab5ff0d73cd2551d8dd38a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a86cec31bce94717ec2b439f328daed5c</anchor>
      <arglist>(const ustring &amp;str, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad4ed9119acd67fe3a4384da1e60ec499</anchor>
      <arglist>(const char *str, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a3550a7136033771698edff317302d94e</anchor>
      <arglist>(const char *str, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa615053805489910ba074ebc0d0cad48</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a29d8dd34e719f7cbec450fb91b4bb556</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac26846cd48a717769e1b2feeda25a221</anchor>
      <arglist>(const ustring &amp;str, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a02396723ecc7a754e7450f6adfbfdfa5</anchor>
      <arglist>(const char *str, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a95b4ed711e22a6a78860dbe59601e654</anchor>
      <arglist>(const char *str, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a218389637c6477e0cc84f0a4d5f929a5</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a869322295151ab1d23a03aee041a2fb0</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9e28bc11a6b6b1eabb2fa17b3e276d72</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae047dfb2f5e754c81c4bd820bc25d881</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0aceb3705e0d61ae8cf5c2ddd465c383</anchor>
      <arglist>(const char *match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>af493d05ec17bd0a99bc5160246fce606</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ada49e2717e9e9f903cfefac46972479b</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a828fb558a21a1dad8b665a3486c6e486</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a51da6dde12afb2cf299aaf2709692da3</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7498d0d9b746b0058297a4ba109f82b3</anchor>
      <arglist>(const char *match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a02607d18a0af132408a5e32837a45f26</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a257ee52dd685d2ea99410bc6db4b2d2c</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a40ca0b0d40320850fad996eca933764f</anchor>
      <arglist>(const ustring &amp;match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5940391f56e6459050bdbe69ad1234d8</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8e373bb5e95739837b530a7b10d7eebe</anchor>
      <arglist>(const char *match, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a268574975883bf620d021a5c2e810db6</anchor>
      <arglist>(gunichar uc, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_first_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a26019b10db1f7c2577be880b459e7274</anchor>
      <arglist>(char c, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a75d5962c3e93735ae8b90bee26f7479f</anchor>
      <arglist>(const ustring &amp;match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acea6cc5b53093ee2e20891a0357b380f</anchor>
      <arglist>(const char *match, size_type i, size_type n) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a92afa2709fe6c35c8683aff79cda02fe</anchor>
      <arglist>(const char *match, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a709427f91388967a54f1e0cad310d6a5</anchor>
      <arglist>(gunichar uc, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find_last_not_of</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5ae0acd41523b37507fccdb006ed369c</anchor>
      <arglist>(char c, size_type i=npos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a95013a2754a5c1608cca3c8eb07c9636</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6bf6aa8759abcc433e4c650b40e67172</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>length</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a992bf7d88a34cb50ecccc812e38348c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>bytes</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a39740ad670046705f115db4096d07075</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a267b95424c7ab80b79a12e569d369368</anchor>
      <arglist>(size_type n, gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acf40ef3330bbb5cb608c53346592f31a</anchor>
      <arglist>(size_type n, char c=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa69a855ee81c46cd3b3289dfc3445b09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a762f2328e195c7eb234ebaa03ced966c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7b762f649f8c349f7d3b288aec797f7c</anchor>
      <arglist>(size_type n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a65b883220a5ed55704831bde3a4cb0bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>raw</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abce477aaed0c307843e5577e0dd0ff64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa3df2e7bde58b48d8a980869f95cc442</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1a6efb61f73090178d51c716d1c73c08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>copy</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8c6aadc915926b11af63fad788c44edf</anchor>
      <arglist>(char *dest, size_type n, size_type i=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab5e9283bca93e84a8fd1d437edfac96b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae6880bcb529516f64ea7205136d65d44</anchor>
      <arglist>(iterator &amp;first_invalid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ae4eafd870c8ceaf2953e5fe0246316ab</anchor>
      <arglist>(const_iterator &amp;first_invalid) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ascii</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a61f69372c10cd3aaa37c5f4c162e60cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>normalize</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aa0e1b26aa527761c40ccf784a3d8f485</anchor>
      <arglist>(NormalizeMode mode=NORMALIZE_DEFAULT_COMPOSE) const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>uppercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac350791ba2174806abce03973e662fce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>lowercase</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6526539af982b427606c0c76d27bc044</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>casefold</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c7e3a9882aa343bff9476c1267a28b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a18e1242bc0ad8a961a28fb2198392258</anchor>
      <arglist>(const ustring &amp;fmt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a64ff7ac3d9e9899c2910f1d831f8d500</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aafa50bf6378411e84cfcb8eec3c1b78c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a23babfac57b0c753d0166bcd479d497c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a77b874fd49dcdbcee3ff00cbdc286fc6</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a668431ad045dd396be557ddb7c97e695</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aecc4d28eb153ee5801ff7c4807300b8c</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1242cfcef5bbd276621851f23e9fa8ad</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>acc5a140391a94c717645e162e00b7634</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>compose</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad549288c86e186f21ce130ee3ea01ac8</anchor>
      <arglist>(const ustring &amp;fmt, const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8, const T9 &amp;a9)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ab107f38a4f62c08156ca7235e4439792</anchor>
      <arglist>(const T1 &amp;a1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a4572cef7cea72238874f52614bbcc929</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1e7223b475a23eb1367b11abe4947c71</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a1ca54756c09e64a63e17420ce78b0806</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a47ca2aeba24825d5dc3a7e2a9df58d42</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a664c5f3d71f229bd36aa7dec6035aa52</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a21d4eadf25b9114dd467b4a1efd0d8f7</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ustring</type>
      <name>format</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7229d13d23610d00322ac33a2b162b24</anchor>
      <arglist>(const T1 &amp;a1, const T2 &amp;a2, const T3 &amp;a3, const T4 &amp;a4, const T5 &amp;a5, const T6 &amp;a6, const T7 &amp;a7, const T8 &amp;a8)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_type</type>
      <name>npos</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a61c7ec1483736fdcd15fe0a0c13abf26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6db8569e4295d0b6e620b5a423c572ac</anchor>
      <arglist>(std::istream &amp;is, Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a48666f99f399065075c916ee1742393c</anchor>
      <arglist>(std::ostream &amp;os, const Glib::ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::wistream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a767612fad39971f9573e12ae7f4fab1e</anchor>
      <arglist>(std::wistream &amp;is, ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>std::wostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a96e0d2f2a88e489fc7c2855f49e999e2</anchor>
      <arglist>(std::wostream &amp;os, const ustring &amp;utf8_string)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>aaa999f27120493fab2bbcb15ad32e1fd</anchor>
      <arglist>(ustring &amp;lhs, ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8de47e1d7bb26732cfa05ec51a4fcc36</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a5c36c162303fcac90e0cad98e5d853ba</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a41d8c9b5ed68e92cab26695fc1f4ab25</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a769fa72dab1a8593936e4d1e7427d5bf</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afabe45d06c824249d356f845339dcf79</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a589cb7a5bbc1c182a98f9a2ddcc875ac</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7db7cd5453e8ee3759e26bf4b6e64032</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a33a94fc0e34c020891dbf7ce3370e4d3</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0af331fc288b855db7a8a9a8ac4db2f1</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a2608d2a621b5dcc9d33aa70f2607c61c</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a61c211450e992dde4d07a8ee903a06c1</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a73958401c880bdfe2dfeb5f8ebda29de</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a9ffc92d15e8c999e1de479ba49dc8f1b</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a8b60486f4223c4aff0d7dcca8ca108e6</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a42b3c3fafd868c34b19590979b9f575c</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0bb54254372b88a27847dada4bd57bb0</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a501a833ed0b311598a9eef8fde525221</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>afead426b680bdfde61ba6ad91da5479f</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a6b11288ba72c136097f549369983f2ec</anchor>
      <arglist>(const ustring &amp;lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ac58ba66e58462e1ee1ff4f9408c8f351</anchor>
      <arglist>(const ustring &amp;lhs, const char *rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>abdd772f46a21d519578ac3795cb4a090</anchor>
      <arglist>(const char *lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a572b14b910b8a66510ab87f0ce6349d5</anchor>
      <arglist>(const ustring &amp;lhs, gunichar rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>ad29db04ea21d148042cd8c4ad247781f</anchor>
      <arglist>(gunichar lhs, const ustring &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a7fad3f7c5b642aaad0e3cf8a9396446f</anchor>
      <arglist>(const ustring &amp;lhs, char rhs)</arglist>
    </member>
    <member kind="function">
      <type>ustring</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1ustring.html</anchorfile>
      <anchor>a0d0409577fa7d97a469c1bd07367b53e</anchor>
      <arglist>(char lhs, const ustring &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase</name>
    <filename>classGlib_1_1ValueBase.html</filename>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Boxed</name>
    <filename>classGlib_1_1ValueBase__Boxed.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>ac3757fa4722632be1455ac5ddde63cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>a948e0b5fa5d14b14f67291d9ee8d5d9f</anchor>
      <arglist>(const void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>get_boxed</name>
      <anchorfile>classGlib_1_1ValueBase__Boxed.html</anchorfile>
      <anchor>aada9f8b16f9ea6da67e69808534a222f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Object</name>
    <filename>classGlib_1_1ValueBase__Object.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a712e2e12c2a93ac9bbc5a9ef97966686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a12d0e3946f35a2b07f95e01834f932c7</anchor>
      <arglist>(Glib::ObjectBase *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::ObjectBase *</type>
      <name>get_object</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>a1f7282ba83b55da7ab6c3cc58c05ac3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Glib::RefPtr&lt; Glib::ObjectBase &gt;</type>
      <name>get_object_copy</name>
      <anchorfile>classGlib_1_1ValueBase__Object.html</anchorfile>
      <anchor>ad0641afcf8ecdd0939c5e2fc527802a0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Enum</name>
    <filename>classGlib_1_1ValueBase__Enum.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>gint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>aa3e70968222a5e0dbd2081ef2738d176</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a60e58a7ac4f865048d8053e2983ceab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a2f6c7a5ec5a223b8991f10bd0690521f</anchor>
      <arglist>(int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>get_enum</name>
      <anchorfile>classGlib_1_1ValueBase__Enum.html</anchorfile>
      <anchor>a3986266c649b6bedf94feea0dbd2d9ae</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_Flags</name>
    <filename>classGlib_1_1ValueBase__Flags.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>guint</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a7fc1b303e0c8391f47080f9775c722cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a7b6c333eed59377834bbd2c166a3e84d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a28560a2e6e5d54f8f0b93abaf0da9eee</anchor>
      <arglist>(unsigned int data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int</type>
      <name>get_flags</name>
      <anchorfile>classGlib_1_1ValueBase__Flags.html</anchorfile>
      <anchor>a830e8b2fc793376afc10416f70cce1c5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ValueBase_String</name>
    <filename>classGlib_1_1ValueBase__String.html</filename>
    <base>Glib::ValueBase</base>
    <member kind="typedef">
      <type>const gchar *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>a699ddec928e03622e7b3d51cfe3ab96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>aedc2f0286f2ad9f40f75c515d3641ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>aef09ab6b77be252853c1e13d28129f17</anchor>
      <arglist>(const char *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const char *</type>
      <name>get_cstring</name>
      <anchorfile>classGlib_1_1ValueBase__String.html</anchorfile>
      <anchor>a4df7d13a576f0b2312050ba7c25f1775</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Boxed</name>
    <filename>classGlib_1_1Value__Boxed.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>afe1dd4bc58dcd49a38f25c66a300f5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a9e0550be1bd0036cbd16a17fa0982257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a26519e4ae30215089c64eac002a4c681</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a82ea4b97e9d6c0e8a0b274b1ef99aeaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Boxed.html</anchorfile>
      <anchor>a3e53b3ba7cb78f6cc837c7d2636919fe</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::RefPtr&lt; T &gt; &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a927b70ba197f861b76cebc0f56525eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>aee01d35cf9127b534e65d1acf086d8b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>ac0819ab1fa54af74ff8f09faa519bf4a</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a937a9cd1f225a0abacb0e80c0dc29885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a240ca7bc698f73231a398567b3dea351</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::RefPtr&lt; const T &gt; &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; const T &gt;</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>adf3a739eb96f0c509bd1bf915659dcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::BaseObjectType *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a28b76dfc9b6b8109956eb02dc59c51f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a243b6b5a244173959c6e1a2f100d4e46</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a0a6703db8911adfc5d6e6d6d872a4f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1RefPtr_3_01const_01T_01_4_01_4.html</anchorfile>
      <anchor>a59ec430d79b579a3db4921a9dcbb3d86</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; std::string &gt;</name>
    <filename>classGlib_1_1Value_3_01std_1_1string_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>std::string</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>af58206c175d88442790af8968ff39238</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a8e5930246b7013936186f464cff72ac0</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>ad0e8f4a5f43bed22382bf3e824579264</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; Glib::ustring &gt;</name>
    <filename>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</filename>
    <base>Glib::ValueBase_String</base>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>ac6e6db38eac3192d12f7173733d589b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>abb7f8cc0a7fc1b81b7e94e7959336690</anchor>
      <arglist>(const Glib::ustring &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value_3_01Glib_1_1ustring_01_4.html</anchorfile>
      <anchor>a4719b097ab75e65961538ddd180c7714</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Enum</name>
    <filename>classGlib_1_1Value__Enum.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Enum</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a47c0048474ce8024a46fbbc188eba4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a43e5aed8e5125a59a9dd4eb0de6eb93c</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Enum.html</anchorfile>
      <anchor>a84efc2d936d8e7b61fdff09d32ae460c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Flags</name>
    <filename>classGlib_1_1Value__Flags.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Flags</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>a89b8d0aec7d3742a0252e031f2739bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>aa097ffbbc6a4e925b34c369dcaaeec8e</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Flags.html</anchorfile>
      <anchor>afc17466944bafc2d94d3ff445bb99a78</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value_Pointer</name>
    <filename>classGlib_1_1Value__Pointer.html</filename>
    <templarg>T</templarg>
    <templarg>PtrT</templarg>
    <base>Glib::ValueBase_Object</base>
    <member kind="typedef">
      <type>PtrT</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a809c5275bcaa7ef88abf6858b634c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a9447a5e332b50ccbc223c621da09a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a3003fa507c1c4d9ed52936ea7b8d0220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value</name>
    <filename>classGlib_1_1Value.html</filename>
    <templarg></templarg>
    <base>Glib::ValueBase_Boxed</base>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>a43ab35a7b991e3a3383e25315593b942</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>ac841aa34bcc65ae94ea869ae8cb6ef20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>ad9750eff16879524796c8c13d4045c0e</anchor>
      <arglist>(const CppType &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>a8639f0b564d3f68d99c6a7295367f5be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value.html</anchorfile>
      <anchor>aab385c17d1f31b8fc691eb1e802548c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; T * &gt;</name>
    <filename>classGlib_1_1Value_3_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <base>Value_Pointer&lt; T, T * &gt;</base>
    <member kind="typedef">
      <type>T *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a809c5275bcaa7ef88abf6858b634c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a9447a5e332b50ccbc223c621da09a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a3003fa507c1c4d9ed52936ea7b8d0220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Value&lt; const T * &gt;</name>
    <filename>classGlib_1_1Value_3_01const_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <base>Value_Pointer&lt; T, const T * &gt;</base>
    <member kind="typedef">
      <type>const T *</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a809c5275bcaa7ef88abf6858b634c7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void *</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a9447a5e332b50ccbc223c621da09a207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>ad4b2133d4d67bfc3100bee5ce8ac7aaa</anchor>
      <arglist>(CppType data)</arglist>
    </member>
    <member kind="function">
      <type>CppType</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a3003fa507c1c4d9ed52936ea7b8d0220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Value__Pointer.html</anchorfile>
      <anchor>a09e38a57b4f7f70085ce772ceea34090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandler</name>
    <filename>classGlib_1_1ArrayHandler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>aa280106de62b604237fffdd30efc11c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>ab5f3b53ac627eee7e7e5a36bcb242bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>abe63e6d144c80c5c39ef7686cb6b5b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayKeeper&lt; Tr &gt;</type>
      <name>ArrayKeeperType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a6b25b9b9c7d1de6b5c8525081d1f4855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayIterator&lt; Tr &gt;</type>
      <name>ArrayIteratorType</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a5910f9e79bbc3bf3ad7919139e4c6dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a628dad04617f6c1df11bc5992dd5348c</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a0c14a3bdfcd6c4eabcf39a7381a28439</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArrayKeeperType</type>
      <name>vector_to_array</name>
      <anchorfile>classGlib_1_1ArrayHandler.html</anchorfile>
      <anchor>a563ad995495dd87c559f9c4c26f4c6f0</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ArrayHandler&lt; bool &gt;</name>
    <filename>classGlib_1_1ArrayHandler_3_01bool_01_4.html</filename>
    <member kind="typedef">
      <type>gboolean</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>ab5d285fc1941c0e2b967f45c08449152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>aadba5c3ac2d874a72e900f5b658cafca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a575891f98429392dc2c145720e4f3708</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayKeeper&lt; Glib::Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>ArrayKeeperType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>af64ebc394a6996448cd927a7dd6dd0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ArrayIterator&lt; Glib::Container_Helpers::TypeTraits&lt; bool &gt; &gt;</type>
      <name>ArrayIteratorType</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a849fde9d4c8895b1b9807c63c39ce5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a56a19419a89c40047423a8dd1d5464cd</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>array_to_vector</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a1cc169c72600c66215ff13452632e60d</anchor>
      <arglist>(const CType *array, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ArrayKeeperType</type>
      <name>vector_to_array</name>
      <anchorfile>classGlib_1_1ArrayHandler_3_01bool_01_4.html</anchorfile>
      <anchor>a9de28467fd9af32ad088da689e56911e</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::ListHandler</name>
    <filename>classGlib_1_1ListHandler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>ad4546a8f3604b54ec407fc6bbbb0d34a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a094b2569396d762db8d1c57387a1d707</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a2b10f041c58bf28cbebd161d32b24689</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::GListKeeper&lt; Tr &gt;</type>
      <name>GListKeeperType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>abf52ef3472095915e0fe001072451e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::ListIterator&lt; Tr &gt;</type>
      <name>ListIteratorType</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>a9ea78d8fc0c46a4b300326f61b3d6e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>list_to_vector</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>abd40edd4565d7b425021821d32e54aad</anchor>
      <arglist>(GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GListKeeperType</type>
      <name>vector_to_list</name>
      <anchorfile>classGlib_1_1ListHandler.html</anchorfile>
      <anchor>aa3f1c38cb301fa89706d517744b813a1</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::SListHandler</name>
    <filename>classGlib_1_1SListHandler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a1e27dbb454430408b92db078a87395e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a9259e74391a6ace47032654478b2928c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; CppType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>ac31e310683aca1359f7b7c297e3c267f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::GSListKeeper&lt; Tr &gt;</type>
      <name>GSListKeeperType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a11c6e5a86d1002f4cddbf5a9403cd156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::Container_Helpers::SListIterator&lt; Tr &gt;</type>
      <name>SListIteratorType</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a9a7df1c7aad4165a02b81a68953c3f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorType</type>
      <name>slist_to_vector</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>a75266d75c64e3aa8271cb2c07def9f8d</anchor>
      <arglist>(GSList *gslist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GSListKeeperType</type>
      <name>vector_to_slist</name>
      <anchorfile>classGlib_1_1SListHandler.html</anchorfile>
      <anchor>af3dc5675cfa0ed8ff8f00e3df6fa0a56</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Ascii</name>
    <filename>namespaceGlib_1_1Ascii.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a237f239d63fea6102675733dc5ad4532</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a0b553edea22d284c188942fab794cc78</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>afa8fe78a0c26cc3827c6240785aa135d</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a65a4e1ccf3858e96bcedc19d2f4b11dd</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7f484ef6bd6d06df723e31b357f868a3</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>acae72029ba931a9921a685f5a9aae892</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a8157fffa4686d541c5953fc8e12f5cfa</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7fb86bc4209b57cfb3c4f52b841d73e4</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>aa09ae30b62f155b8921cc9982342a314</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a7f02fe9caa1467a4cfd4de81b9f29ac5</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>ad56e2eca24891cbfbc94c5466f33ba7e</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a441978a247c1dc46bbe7159fa25c4365</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>affdbf0a8cc3cf286605a0ead51e524f6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a597106ad0bd771bef0698ca1482db880</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Ascii.html</anchorfile>
      <anchor>a06d4bb1120cb8b48f7a8a4f1e9aeab53</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Container_Helpers</name>
    <filename>namespaceGlib_1_1Container__Helpers.html</filename>
    <class kind="class">Glib::Container_Helpers::ArrayHandleIterator</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits</class>
    <class kind="class">Glib::Container_Helpers::ListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::SListHandleIterator</class>
    <class kind="class">Glib::Container_Helpers::ArrayIterator</class>
    <class kind="class">Glib::Container_Helpers::ListIterator</class>
    <class kind="class">Glib::Container_Helpers::SListIterator</class>
    <class kind="class">Glib::Container_Helpers::ArrayKeeper</class>
    <class kind="class">Glib::Container_Helpers::GListKeeper</class>
    <class kind="class">Glib::Container_Helpers::GSListKeeper</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Drive &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::File &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Mount &gt; &gt;</class>
    <class kind="struct">Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Volume &gt; &gt;</class>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>adff3475e83502a37f3d0dc29fa358e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a965b558895aaee9558d78b18a4726e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a9443f5a4ee0363391678a6b7e0df752b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a44b34dcb119a8fc76b8c006373becc16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a60c092f74015c67bf0cae8c9e1de41a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a3f1045d400a53be16e881e62c1d5cc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aa6045b91a0212c6a175b6dee36f5e3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a709ec1305f27a10ba5f1527e055231ac</anchor>
      <arglist>(const CType *pos)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a6131cdd2d2f97b6fc0edc51964633abc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ab6c88a12c97d54b2f5f25e4edc53edc8</anchor>
      <arglist>(difference_type offset) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7af3c97787eb1f21de2ce787f5868dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a367eb894a1d4ef9f294aa80babe3099f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7bd6570cc8c7581bc26cb8c10c2aa4b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator--</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a7656ddf477d74930f6b7ed4536cb6a20</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a9aec914efc7f70a869a7784274ebf84b</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>aeaea65c60785bd648a91fd509fe7da42</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a01667e4c2eec88c09b70af6ed4f04236</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayHandleIterator&lt; Tr &gt;</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a910ed1623ac20c62415c6f9dae2fbc31</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a343b0e83133bf4c0b4d81f9ffa0680c9</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a5c9a60ba1ef1254957846696e325c22e</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a00cfeb8f26bf3d5fedc64c6fd7ea51f7</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a448b00c676c876123f0f7c3c06e98399</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ad92dda17b4e08feeedd9cdf19c25f7f8</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>ad559afbb2c7b51b0c4689febc0afac9e</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayHandleIterator.html</anchorfile>
      <anchor>a1ff27e015e1197fe7815d0c931bb8004</anchor>
      <arglist>(const ArrayHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>ac8674dd3a910b6687a2eb99a8b049ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a255875880315ff4d66e05f285380a94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a47927adfe9619705b0a0fd015539c705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a3c7532f3fc3a23d440a3b1c9b4c5d569</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a6b238c68d4ccf001b0448c229c2e95c3</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits.html</anchorfile>
      <anchor>a2c83ea71bbe91a6edbcc0f5c364dadd3</anchor>
      <arglist>(const CType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>ac2402a5186067981f72d6e21736d93b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a67610a82695dbfd1e74f0973e9678cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>ae2691a6d2f7d64bcd7d0b698a9bb758c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a95ec1de19679cec5e8fc357643fbf106</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a0e0feb3815cb0873a4fca762470aee39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a4c826a0c6395e6e08560771577bdc687</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a4bd9eb806e945f81d06c5e6ceb85258d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a84fef11f5e094c1bb93d42230d8ffccc</anchor>
      <arglist>(const GList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a6bc683dbdbfef5863ca8976ee57c025e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a7cc9afbcb243ab911dbdeebfdb0109a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>af7a2724416fb63a7999e0bab08028b83</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a9242153510f70bd61e84d77f7625c0d6</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListHandleIterator.html</anchorfile>
      <anchor>a3f1583c79cec6d9d90cd6a16d07aa753</anchor>
      <arglist>(const ListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::SListHandleIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>ab13f3bd444bd76ff2b4724b8452a6441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>aecb831763ee474abe8e2b534177ecee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>ad8a9e6331094733970e281c2f5c75567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a248e7cc7c0e88effb208fbc4237a20e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a6a77c99b42c240e2c220ba923a93849f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>ade98ba1b16eff09a135deb10ec00e4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a45bf5e1f6d31ae05172c72b8dd7effd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListHandleIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a400ac29db268beae7ef6ee53a9b12932</anchor>
      <arglist>(const GSList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a36f8c91174e38df2cc5090f321ad6fce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListHandleIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a1dff0d5d688af87a8fd7494efac16b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListHandleIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a0d78b286f03a60cb52696d2c54eaa482</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a2b75a40dc9b1e8219374f3db19ed7741</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListHandleIterator.html</anchorfile>
      <anchor>a13ca5ae3df96c2be3976c8284988fc99</anchor>
      <arglist>(const SListHandleIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a78d7be37e03b35aec95cb7baf634894e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>af09614b9b88067a1b48f3a48475cc3e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a03aa57e895c2b7a59e71d1ef08cd4ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>af8b8e7b5d3167d8a0770e1260c97c91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>add2fbf1244a96d307c4506625443d086</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a17d697f9516d7ff3f8d420de6a247f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a24e77641193d4704ca71aea8c3f9e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>affe9e7547aa9decb61c6cedb4ecbca7c</anchor>
      <arglist>(const CType *pos)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a782214e1211a6dd422126936db6d68db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator[]</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ac914e359c4be754a04ca03b8d3164dfb</anchor>
      <arglist>(difference_type offset) const </arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a67f799767366b08a73e9e89ff2072dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a27bf7d5709d26b17934a11d2e2c789d5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a690c81ce8119e94420dd4c356024fcb8</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>ArrayIterator&lt; Tr &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a9bf5a3d1b8a3e92d48a439a74d92134b</anchor>
      <arglist>(difference_type rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator+</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a2af070cc19c0dfe1c6da723473f0b9be</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ArrayIterator&lt; Tr &gt;</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ab1e1e84dd97b7253dbb42311142e5e01</anchor>
      <arglist>(difference_type rhs) const </arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a3ade2b84ca4ec27899a160ba7e209b80</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a8fa60532c4f8166f0dab6bc252b54dd6</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>ac4ecb375f04d78316f87ee45c21b9e81</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>abe515c38fbe0a17d93038f261ea4df1b</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>af2f8c96996125ae49d0a379801cc7ee0</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a8e2c15fb79b33fdee0c2ca9b7f1efe5f</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayIterator.html</anchorfile>
      <anchor>a57cec4ebd6c6a1ee253a88c08c7e511b</anchor>
      <arglist>(const ArrayIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ListIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1ListIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>acb5ee52a932c06b50322bd36bff79956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a3cda97b93e4e8cd795253a4e1cce09a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>afc28ec7ec852e14b2e1329c81bab1e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a042eedca2477e0bbb6e5708b3137071a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae85496818ea6e34fcece6bc0c889f088</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ab9c3802e1d1a1206567454217b23788c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ab4682f0cda81703018ad04dfde820661</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>af75e072bb9bb5d978e9318d38d41e987</anchor>
      <arglist>(const GList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ab5c68ea821bac6ce4d42e5a07d153c44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ListIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a2f03bb91148b9ef9062775c15c0e6225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ListIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae0e911e059a707e72f00d99995ea18da</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>a631508bf967da47c16871031194b5f3e</anchor>
      <arglist>(const ListIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ListIterator.html</anchorfile>
      <anchor>ae9fcd67337f4669c58b611ce39d86848</anchor>
      <arglist>(const ListIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::SListIterator</name>
    <filename>classGlib_1_1Container__Helpers_1_1SListIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a2b8a328c05ade47079e00cc1c6f2c8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a70fc74428b78188ebda0fe7045c315b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a9a7dfa1675e1c48c98505220555851ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CppType</type>
      <name>value_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a816fc2a16d66a08b7f0820e8576be138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a2bb8cebfe9ee95fad81e3c9c7868fbd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>reference</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a6e8f145a31ca7f86c029fe5bb52d8db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>pointer</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>afd36e2b4977363922c7c99d3419c8929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SListIterator</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>aad762f13c4389f707b53552097405d41</anchor>
      <arglist>(const GSList *node)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator*</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a0eca8c73108834a1a28e549920fc9381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SListIterator&lt; Tr &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>ab3c2778ef489b7e01d6b7fe7c258391a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SListIterator&lt; Tr &gt;</type>
      <name>operator++</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a99d7fc56cee6d4d32f060551221e47e6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a021525ac62867028ddbbc025703cf3d4</anchor>
      <arglist>(const SListIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1SListIterator.html</anchorfile>
      <anchor>a6b76d244198d26e3ae7931a7c9b72418</anchor>
      <arglist>(const SListIterator&lt; Tr &gt; &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::ArrayKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a1a5a526bdf1d9222c990d8f2d92ee1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a7d98339c910ed28f9b3a45c621da77e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a5aef24f8ff4c0f9d5e5b75f34ed5557e</anchor>
      <arglist>(const CType *array, std::size_t array_size, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a738365225944b868725261e4a6a78e19</anchor>
      <arglist>(const ArrayKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArrayKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a23577b55341aed0c4bb5938ea6510da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CType *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1ArrayKeeper.html</anchorfile>
      <anchor>a18f975bdb32d597905cac18321853676</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::GListKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1GListKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a90ac15f84f6b3f055aa651b29f0c5258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a0a730b0c4ea34673aa944f34ae9ccd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a4207dc51d04222c557591b1c95efa0fc</anchor>
      <arglist>(const GList *glist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>abddfd000ad4ba2a9e2b7cf0db8254690</anchor>
      <arglist>(const GListKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a2f5fc263abf15d826a4c39b23d39b463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GListKeeper.html</anchorfile>
      <anchor>a4091150e8dbfbdf5c55addf13293972c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Container_Helpers::GSListKeeper</name>
    <filename>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Tr::CppType</type>
      <name>CppType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>abe1223204dc0199739bd134861893c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tr::CType</type>
      <name>CType</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a469fbee81c36aa432f8fe3b9a86d40c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a56d04d54749cddddb44867817e6a9794</anchor>
      <arglist>(const GSList *gslist, Glib::OwnershipType ownership)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a55b3a94dd66f6db1301130ff649d345d</anchor>
      <arglist>(const GSListKeeper &amp;keeper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GSListKeeper</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>afc3f3785df16dea0ff73b8b5999b04a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GSList *</type>
      <name>data</name>
      <anchorfile>classGlib_1_1Container__Helpers_1_1GSListKeeper.html</anchorfile>
      <anchor>a6ea489f2d272afd5dbaafa91e1ec47f7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Drive &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Drive &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>acecf8f6b87045f97d6fe30773b546296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GDrive *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>acffbaf5358dd41e1ede3b0d0cb3c8a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GDrive *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a774f8e7708c03dbfcb9a656651394110</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a39979c5275c9c8dcc114efc0b9fa2acc</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a2d3459e328ec2c09086d98b58e6e0e73</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Drive_01_4_01_4.html</anchorfile>
      <anchor>a2ba23e994f19d07f8beb7bf566842db5</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::File &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::File &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a4ef5847d9a1ceb3540c6f37fb84f3f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GFile *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a8e7f39ac1d1f8eee5fe499c477d54037</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GFile *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a1d6f26bc8a4c8c0bbe31d9fb63f74496</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a5ed75ac118201014697bba4563b92b09</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>ad96b5b0c8e14d8a9907b883b71c0b866</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1File_01_4_01_4.html</anchorfile>
      <anchor>a0499b2de3c3f92b15c7e73a0d08dc585</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Mount &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Mount &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>a1544d5de772910991310167282209acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMount *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>aee169ccd1865dc4cd88d61272bbd4881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GMount *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>a133325bbd340966fd5ee45aff5df459d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>ab5638c270c5876aa521d758318cdd239</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>aae55a6c1829d0f46e764a5a2513950f2</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Mount_01_4_01_4.html</anchorfile>
      <anchor>abaa937fd38274773b5c41600c5b9e3a4</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Glib::Container_Helpers::TypeTraits&lt; Glib::RefPtr&lt; Gio::Volume &gt; &gt;</name>
    <filename>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</filename>
    <member kind="typedef">
      <type>Glib::RefPtr&lt; Gio::Volume &gt;</type>
      <name>CppType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a25b3589f99e04e543efd31a529306627</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GVolume *</type>
      <name>CType</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a53ef1d8bff532d98523216446dc8b579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GVolume *</type>
      <name>CTypeNonConst</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a95d0af91f41c0440742aacdf8e66852d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CType</type>
      <name>to_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>ab1bfc901853062c1538dd99fd979721e</anchor>
      <arglist>(const CppType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CppType</type>
      <name>to_cpp_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>a20856c33c26b630c1635dc226d59830a</anchor>
      <arglist>(const CType &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release_c_type</name>
      <anchorfile>structGlib_1_1Container__Helpers_1_1TypeTraits_3_01Glib_1_1RefPtr_3_01Gio_1_1Volume_01_4_01_4.html</anchorfile>
      <anchor>aa0d7950b93e2b3c9c04ad1458ec72886</anchor>
      <arglist>(CType item)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Markup</name>
    <filename>namespaceGlib_1_1Markup.html</filename>
    <class kind="class">Glib::Markup::AttributeKeyLess</class>
    <class kind="class">Glib::Markup::Parser</class>
    <class kind="class">Glib::Markup::ParseContext</class>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::AttributeKeyLess</name>
    <filename>classGlib_1_1Markup_1_1AttributeKeyLess.html</filename>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>first_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>aa895a53dfd0959afb851bde44ba25a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Glib::ustring</type>
      <name>second_argument_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a582ece5a1a2865e997e2df0f341b0ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>result_type</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>aa640c46e68bcaa011cee7f72284f3b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classGlib_1_1Markup_1_1AttributeKeyLess.html</anchorfile>
      <anchor>a9ec46a3ed1da9e184aeb9b593803aa97</anchor>
      <arglist>(const Glib::ustring &amp;lhs, const Glib::ustring &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::Parser</name>
    <filename>classGlib_1_1Markup_1_1Parser.html</filename>
    <base>sigc::trackable</base>
    <member kind="typedef">
      <type>std::map&lt; Glib::ustring, Glib::ustring, Glib::Markup::AttributeKeyLess &gt;</type>
      <name>AttributeMap</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a65bc2af877b64b3077f8635ef81213dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a9932a9141e04ece2d063dad4eefa0380</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Parser</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ab36908e49f4d711f0490837f4d1cdfe7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_start_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ae6d6ae3c4f3aab7c2ee22a079fcb7915</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name, const AttributeMap &amp;attributes)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_end_element</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>ac0917070686ec7dc72d544feeda24942</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;element_name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_text</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a481ae1c7007fe49e968bfc4393b9ad3d</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_passthrough</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>a2f01a92bf1571497c23cfc38137751a5</anchor>
      <arglist>(ParseContext &amp;context, const Glib::ustring &amp;passthrough_text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>on_error</name>
      <anchorfile>classGlib_1_1Markup_1_1Parser.html</anchorfile>
      <anchor>addad19d661fea6b71fa0a88cb677b3cc</anchor>
      <arglist>(ParseContext &amp;context, const MarkupError &amp;error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Markup::ParseContext</name>
    <filename>classGlib_1_1Markup_1_1ParseContext.html</filename>
    <base>sigc::trackable</base>
    <member kind="function">
      <type></type>
      <name>ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a550fecdf32455c57fb84e8de8b53ef78</anchor>
      <arglist>(Parser &amp;parser, ParseFlags flags=ParseFlags(0))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ParseContext</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>af549ca123bac2ddafc27980dc03d86e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a1158f306b9d7211d97fa02fdfbfddf50</anchor>
      <arglist>(const Glib::ustring &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>ae173b1cb8e2c9e9a5ef288006ccdbda7</anchor>
      <arglist>(const char *text_begin, const char *text_end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end_parse</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>acd4b854317c6c562f55e0595f62aafb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Glib::ustring</type>
      <name>get_element</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a5324c8b9dcfd837c3ed79173c9aaf7fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_line_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a2d9fc34abb30f2e2a75c23ed7da78c41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get_char_number</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>aed00dd8c7ca8bd43a44158c9491477e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a4dcbfbf2ba04a4014378bc9b74bab281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Parser *</type>
      <name>get_parser</name>
      <anchorfile>classGlib_1_1Markup_1_1ParseContext.html</anchorfile>
      <anchor>a9dfac516a37a2fc5a82dc162e259e75b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Threads</name>
    <filename>namespaceGlib_1_1Threads.html</filename>
    <class kind="class">Glib::Threads::ThreadError</class>
    <class kind="class">Glib::Threads::Thread</class>
    <class kind="class">Glib::Threads::Mutex</class>
    <class kind="class">Glib::Threads::RecMutex</class>
    <class kind="class">Glib::Threads::RWLock</class>
    <class kind="class">Glib::Threads::Cond</class>
    <class kind="class">Glib::Threads::Private</class>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::ThreadError</name>
    <filename>classGlib_1_1Threads_1_1ThreadError.html</filename>
    <base>Glib::Error</base>
    <member kind="enumeration">
      <type></type>
      <name>Code</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37a83b462aa961053067108eb87335421b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AGAIN</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a4f9ffae8fe56d267e8b7d0bcd75cff37a83b462aa961053067108eb87335421b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a45bc20ae4202207f5d1c3de12ab6b4bb</anchor>
      <arglist>(Code error_code, const Glib::ustring &amp;error_message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ThreadError</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>afb5189c1799f808995c9935493363e72</anchor>
      <arglist>(GError *gobject)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>code</name>
      <anchorfile>classGlib_1_1Threads_1_1ThreadError.html</anchorfile>
      <anchor>a05205875391ac1d5e471258b2f0ff122</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Thread</name>
    <filename>classGlib_1_1Threads_1_1Thread.html</filename>
    <class kind="class">Glib::Threads::Thread::Exit</class>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ad68ccd7d8209913f09f742aef95758e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ae2afcdad184e8064ab21edcb287e50d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GThread *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a36d0432f001070d70cc52946b9e797f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>ad89d142f0a9fd02d476dbed49dd17b85</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a2ffdf8dd86ea405669f610c7d47c90e9</anchor>
      <arglist>(const sigc::slot&lt; void &gt; &amp;slot, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>self</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a7289f43e01199fa1cf7df67f725f8cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>yield</name>
      <anchorfile>classGlib_1_1Threads_1_1Thread.html</anchorfile>
      <anchor>a0b4e6d3fe278429716f0e0cca3654fde</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Thread::Exit</name>
    <filename>classGlib_1_1Threads_1_1Thread_1_1Exit.html</filename>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Mutex</name>
    <filename>classGlib_1_1Threads_1_1Mutex.html</filename>
    <class kind="class">Glib::Threads::Mutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>Mutex</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a14093e5f7604912966d399e88755f933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Mutex</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>ae525272c2cecaadbad2cd801eccab6e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a30558c72364c4831189ea4529b7051be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>ad308197d22158afbb66f16e924cdc406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a3d18b139afd37b7b46a3498dbe7ed3d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex.html</anchorfile>
      <anchor>a9d3dcff3f9119aa44693d6cf357ef477</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Mutex::Lock</name>
    <filename>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a83c71f5c904aae6553bbb9bb89fc6dca</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a570f656f028c95c94e3c7c486432d3a6</anchor>
      <arglist>(Mutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a42b4f2672e1de510d292a8aa1ed443c9</anchor>
      <arglist>(Mutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ad0dc9df566df28e107b73f9938ddd366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a30732c6fbd6a7f63bc77caa2720ecac2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a74426ec0cc13f9a228aebc7c602a709d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>a8e90e519fc479bb20ef2bc30db46d994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1Mutex_1_1Lock.html</anchorfile>
      <anchor>ae3adcdbf26b2841369c4cfb22a6bc038</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RecMutex</name>
    <filename>classGlib_1_1Threads_1_1RecMutex.html</filename>
    <class kind="class">Glib::Threads::RecMutex::Lock</class>
    <member kind="function">
      <type></type>
      <name>RecMutex</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a6546c1d24d34726458107b46345632e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RecMutex</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>ac782c3e809dcb6d021bbd788099ad1f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a1cfcbbfc6591f014f045862fdada3c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>ad28bb4286cda5db9a5eff077838dbbbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a004144b9f8dff6536629c7e8d75c23ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GRecMutex *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex.html</anchorfile>
      <anchor>a0b022fdcda869c9c53a99516c797d56e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RecMutex::Lock</name>
    <filename>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</filename>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ad2ff1b2598d8fc557860e50d2699e67a</anchor>
      <arglist>(RecMutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a05c2fe5b7b0f02b3d6b00dde118ce6a7</anchor>
      <arglist>(RecMutex &amp;mutex, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a064781d272167121a075619dd249b67f</anchor>
      <arglist>(RecMutex &amp;mutex, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ad709baa357e6f1ed4723fc06b2eda41f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>ac6f060a8097d5aeabd920bf4ac9af07d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a31122edac8700bbbb5ce03800bd36054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>a321d39a0d0da1783db452a77629396ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RecMutex_1_1Lock.html</anchorfile>
      <anchor>aa83bbdceff70fc834c421a2bbaf19c6c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock.html</filename>
    <class kind="class">Glib::Threads::RWLock::ReaderLock</class>
    <class kind="class">Glib::Threads::RWLock::WriterLock</class>
    <member kind="function">
      <type></type>
      <name>RWLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a4de0016496df8d84672d324744d6b9cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RWLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a79400545ef8c48abcab8e04bf7082d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a4baa11d561b690e83830caf76172291c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reader_trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a524f9df39169b9e5bc552e1f052f12ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reader_unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>af5b67ec536bf340aee46647ec9ba35c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_lock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a07c1d3b85c1324c34ddc4df500a9d233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writer_trylock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>afd77b9bcdcd712dbd422c51fef9595a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writer_unlock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a64c9ae6cd44743db54cf487c7c04d2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GRWLock *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock.html</anchorfile>
      <anchor>a591025ba8a3f5f2a6cff66661ec7462b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock::ReaderLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</filename>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ae1eca9fdd9e6f73ba1622a727bec39e3</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a292a2d4ce43e18ecdbac02c157541bdf</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a6cd164baf5f67161770aa031104fbe3a</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReaderLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>a7facab400e5bedfa6445ad0fb035b7c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ad5e4330977d11520f6c373d9d9d3ca7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>acf16f4371633d11f843fa04fcdecb9b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>abfd4f21a1c033cdb63f1b8f9130e3d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1ReaderLock.html</anchorfile>
      <anchor>ad5460e89ecb115431d84041ff13cc6a9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::RWLock::WriterLock</name>
    <filename>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</filename>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>adc7f880f51901ebe308fd6996279311a</anchor>
      <arglist>(RWLock &amp;rwlock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a95a9d4cdfa30b1c239894c97e2d566fa</anchor>
      <arglist>(RWLock &amp;rwlock, NotLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a2a829657b52a6572ad6d979567d925f3</anchor>
      <arglist>(RWLock &amp;rwlock, TryLock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WriterLock</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a0c45be95afc565b0d339523584744d3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>aadc0d240f68f823f4f2a8157359e2ca3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>try_acquire</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a7b1f555c1e7240438d8ef072d8dd70f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a2a695a3770a3cf88246cedcf5406c21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>locked</name>
      <anchorfile>classGlib_1_1Threads_1_1RWLock_1_1WriterLock.html</anchorfile>
      <anchor>a018803bc818f2f5c55bf6b4d8f58a59c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Cond</name>
    <filename>classGlib_1_1Threads_1_1Cond.html</filename>
    <member kind="function">
      <type></type>
      <name>Cond</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a1a61666d7577c6ac28232c388923aa42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Cond</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a674e83a368694681ad7f145512e79055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>signal</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a9db57dd8e743968ee7ac6932d0acabf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>broadcast</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>ac59292a7e51e8e6cc85bcdd071c982e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a08e9c45266817a95001135e2b7698598</anchor>
      <arglist>(Mutex &amp;mutex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wait_until</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>ab8c8842a5962291411b67abd9bb4746d</anchor>
      <arglist>(Mutex &amp;mutex, gint64 end_time)</arglist>
    </member>
    <member kind="function">
      <type>GCond *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Cond.html</anchorfile>
      <anchor>a74fd007fcce8d7e40322289b46d746a5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Glib::Threads::Private</name>
    <filename>classGlib_1_1Threads_1_1Private.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void(*</type>
      <name>DestructorFunc</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>ac716d81812280be9842ed62193800c3d</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Private</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a72666cd6d6792e4c1efa3fe800a4c4e5</anchor>
      <arglist>(DestructorFunc destructor_func=&amp;Private&lt; T &gt;::delete_ptr)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a835b6cba77e88023798f40a2fe1ebfb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>ab0740eaa856abbe880ba8466d82c81cc</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>aa4a8cd09419878b96b69ab4d12e98f6b</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <type>GPrivate *</type>
      <name>gobj</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a1e04fbb3f71768d75d4bc7ddfea3d914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>delete_ptr</name>
      <anchorfile>classGlib_1_1Threads_1_1Private.html</anchorfile>
      <anchor>a440d3f7cd5ef614679c6348ceaab63be</anchor>
      <arglist>(void *data)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Glib::Unicode</name>
    <filename>namespaceGlib_1_1Unicode.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>validate</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ab64054c4576955fd0285dae603fad4bc</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalnum</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>abd50a6139564bb0d2351855470d1a69b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isalpha</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a9620b1df5b96a81a44cebbee81b2f09a</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iscntrl</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a937030a624b77cf949f95c0e9a8c6461</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a1f82bfebc6c5094bfb6372a6ba4c4019</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isgraph</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8c3c04d4dcdafc485266a393da455ee3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>islower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>aeef7ef9a28faaa25215b1c5e94bab1dd</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isprint</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ae4d9f8199f86bd64d269854dffb92008</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ispunct</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ab81127c9fc1a6ddc04f3f7171c23111b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isspace</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>aa78d1b888a48ab92ddcbc6122592478f</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a042c4000427af2f777150f5d88f3d154</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isxdigit</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a059de050d5449076c62756a490c91eba</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>istitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a083a3cf6b6fd165b0e272ad1e4c6ac33</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isdefined</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8d4c5c43e6892e7567d3e30f817ff9a2</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iswide</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>afa1f9e1a5bcba3dc2e2c6bf4d39620c7</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>toupper</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a1abe6ec99b03e1a4eb4462251e088e85</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>tolower</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a0b6fd738acb468a21fd83e66af9b67a8</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>gunichar</type>
      <name>totitle</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a5c4a3831dfd19f0a05aaea992795f939</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>digit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a5cf00f04bd69129448f48cd278bff522</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>xdigit_value</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a8f036631847c5058f13196a9f815822b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeType</type>
      <name>type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>a042d1c3fdb1a22daf647211210af80c3</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
    <member kind="function">
      <type>Glib::UnicodeBreakType</type>
      <name>break_type</name>
      <anchorfile>namespaceGlib_1_1Unicode.html</anchorfile>
      <anchor>ac426083d525f1e30e4b5bff28962575b</anchor>
      <arglist>(gunichar uc)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>std::bernoulli_distribution</name>
    <filename>namespacestd_1_1bernoulli__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::binomial_distribution</name>
    <filename>namespacestd_1_1binomial__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::bitset</name>
    <filename>namespacestd_1_1bitset.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::cauchy_distribution</name>
    <filename>namespacestd_1_1cauchy__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::chi_squared_distribution</name>
    <filename>namespacestd_1_1chi__squared__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::discrete_distribution</name>
    <filename>namespacestd_1_1discrete__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::exponential_distribution</name>
    <filename>namespacestd_1_1exponential__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::extreme_value_distribution</name>
    <filename>namespacestd_1_1extreme__value__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::fisher_f_distribution</name>
    <filename>namespacestd_1_1fisher__f__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::gamma_distribution</name>
    <filename>namespacestd_1_1gamma__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::geometric_distribution</name>
    <filename>namespacestd_1_1geometric__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::lognormal_distribution</name>
    <filename>namespacestd_1_1lognormal__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::normal_distribution</name>
    <filename>namespacestd_1_1normal__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::piecewise_constant_distribution</name>
    <filename>namespacestd_1_1piecewise__constant__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::piecewise_linear_distribution</name>
    <filename>namespacestd_1_1piecewise__linear__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::poisson_distribution</name>
    <filename>namespacestd_1_1poisson__distribution.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::uniform_int_distribution</name>
    <filename>namespacestd_1_1uniform__int__distribution.html</filename>
  </compound>
  <compound kind="dir">
    <name>giomm</name>
    <path>/home/murrayc/checkouts/gnome/glibmm/gio/giomm/</path>
    <filename>dir_02fef2a40270467d72a7f717cf991d8a.html</filename>
    <file>action.h</file>
    <file>actiongroup.h</file>
    <file>actionmap.h</file>
    <file>appinfo.h</file>
    <file>applaunchcontext.h</file>
    <file>application.h</file>
    <file>applicationcommandline.h</file>
    <file>asyncinitable.h</file>
    <file>asyncresult.h</file>
    <file>bufferedinputstream.h</file>
    <file>bufferedoutputstream.h</file>
    <file>cancellable.h</file>
    <file>charsetconverter.h</file>
    <file>contenttype.h</file>
    <file>converter.h</file>
    <file>converterinputstream.h</file>
    <file>converteroutputstream.h</file>
    <file>credentials.h</file>
    <file>datainputstream.h</file>
    <file>dataoutputstream.h</file>
    <file>dbusactiongroup.h</file>
    <file>dbusaddress.h</file>
    <file>dbusauthobserver.h</file>
    <file>dbusconnection.h</file>
    <file>dbuserror.h</file>
    <file>dbuserrorutils.h</file>
    <file>dbusinterface.h</file>
    <file>dbusinterfacevtable.h</file>
    <file>dbusintrospection.h</file>
    <file>dbusmenumodel.h</file>
    <file>dbusmessage.h</file>
    <file>dbusmethodinvocation.h</file>
    <file>dbusobject.h</file>
    <file>dbusownname.h</file>
    <file>dbusproxy.h</file>
    <file>dbusserver.h</file>
    <file>dbussubtreevtable.h</file>
    <file>dbusutils.h</file>
    <file>dbuswatchname.h</file>
    <file>desktopappinfo.h</file>
    <file>drive.h</file>
    <file>emblem.h</file>
    <file>emblemedicon.h</file>
    <file>enums.h</file>
    <file>error.h</file>
    <file>file.h</file>
    <file>fileattributeinfo.h</file>
    <file>fileattributeinfolist.h</file>
    <file>fileenumerator.h</file>
    <file>fileicon.h</file>
    <file>fileinfo.h</file>
    <file>fileinputstream.h</file>
    <file>fileiostream.h</file>
    <file>filemonitor.h</file>
    <file>filenamecompleter.h</file>
    <file>fileoutputstream.h</file>
    <file>filterinputstream.h</file>
    <file>filteroutputstream.h</file>
    <file>icon.h</file>
    <file>inetaddress.h</file>
    <file>inetsocketaddress.h</file>
    <file>init.h</file>
    <file>initable.h</file>
    <file>inputstream.h</file>
    <file>iostream.h</file>
    <file>loadableicon.h</file>
    <file>memoryinputstream.h</file>
    <file>memoryoutputstream.h</file>
    <file>menu.h</file>
    <file>menuattributeiter.h</file>
    <file>menuitem.h</file>
    <file>menulinkiter.h</file>
    <file>menumodel.h</file>
    <file>mount.h</file>
    <file>mountoperation.h</file>
    <file>networkaddress.h</file>
    <file>networkservice.h</file>
    <file>outputstream.h</file>
    <file>pollableinputstream.h</file>
    <file>pollableoutputstream.h</file>
    <file>proxy.h</file>
    <file>proxyaddress.h</file>
    <file>proxyresolver.h</file>
    <file>remoteactiongroup.h</file>
    <file>resolver.h</file>
    <file>resource.h</file>
    <file>seekable.h</file>
    <file>settings.h</file>
    <file>simpleaction.h</file>
    <file>simpleactiongroup.h</file>
    <file>socket.h</file>
    <file>socketaddress.h</file>
    <file>socketaddressenumerator.h</file>
    <file>socketclient.h</file>
    <file>socketconnectable.h</file>
    <file>socketconnection.h</file>
    <file>socketcontrolmessage.h</file>
    <file>socketlistener.h</file>
    <file>socketservice.h</file>
    <file>srvtarget.h</file>
    <file>tcpconnection.h</file>
    <file>themedicon.h</file>
    <file>threadedsocketservice.h</file>
    <file>tlscertificate.h</file>
    <file>tlsclientconnection.h</file>
    <file>tlsconnection.h</file>
    <file>tlsdatabase.h</file>
    <file>tlsfiledatabase.h</file>
    <file>tlsinteraction.h</file>
    <file>tlspassword.h</file>
    <file>tlsserverconnection.h</file>
    <file>unixconnection.h</file>
    <file>unixcredentialsmessage.h</file>
    <file>unixfdlist.h</file>
    <file>unixfdmessage.h</file>
    <file>unixinputstream.h</file>
    <file>unixoutputstream.h</file>
    <file>unixsocketaddress.h</file>
    <file>volume.h</file>
    <file>volumemonitor.h</file>
    <file>zlibcompressor.h</file>
    <file>zlibdecompressor.h</file>
  </compound>
  <compound kind="dir">
    <name>glibmm</name>
    <path>/home/murrayc/checkouts/gnome/glibmm/glib/glibmm/</path>
    <filename>dir_98c789a82e29670547769c353b486e1a.html</filename>
    <file>arrayhandle.h</file>
    <file>balancedtree.h</file>
    <file>bytearray.h</file>
    <file>bytes.h</file>
    <file>checksum.h</file>
    <file>class.h</file>
    <file>containerhandle_shared.h</file>
    <file>containers.h</file>
    <file>convert.h</file>
    <file>date.h</file>
    <file>datetime.h</file>
    <file>debug.h</file>
    <file>dispatcher.h</file>
    <file>error.h</file>
    <file>exception.h</file>
    <file>exceptionhandler.h</file>
    <file>fileutils.h</file>
    <file>helperlist.h</file>
    <file>i18n-lib.h</file>
    <file>i18n.h</file>
    <file>init.h</file>
    <file>interface.h</file>
    <file>iochannel.h</file>
    <file>keyfile.h</file>
    <file>listhandle.h</file>
    <file>main.h</file>
    <file>markup.h</file>
    <file>miscutils.h</file>
    <file>module.h</file>
    <file>nodetree.h</file>
    <file>object.h</file>
    <file>objectbase.h</file>
    <file>optioncontext.h</file>
    <file>optionentry.h</file>
    <file>optiongroup.h</file>
    <file>pattern.h</file>
    <file>priorities.h</file>
    <file>property.h</file>
    <file>propertyproxy.h</file>
    <file>propertyproxy_base.h</file>
    <file>quark.h</file>
    <file>random.h</file>
    <file>refptr.h</file>
    <file>regex.h</file>
    <file>sarray.h</file>
    <file>shell.h</file>
    <file>signalproxy.h</file>
    <file>signalproxy_connectionnode.h</file>
    <file>slisthandle.h</file>
    <file>spawn.h</file>
    <file>streamiochannel.h</file>
    <file>stringutils.h</file>
    <file>thread.h</file>
    <file>threadpool.h</file>
    <file>threads.h</file>
    <file>timer.h</file>
    <file>timeval.h</file>
    <file>timezone.h</file>
    <file>unicode.h</file>
    <file>uriutils.h</file>
    <file>ustring.h</file>
    <file>utility.h</file>
    <file>value.h</file>
    <file>value_basictypes.h</file>
    <file>value_custom.h</file>
    <file>valuearray.h</file>
    <file>variant.h</file>
    <file>variant_basictypes.h</file>
    <file>variantiter.h</file>
    <file>varianttype.h</file>
    <file>vectorutils.h</file>
    <file>wrap.h</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>glibmm Reference Manual</title>
    <filename>index</filename>
    <docanchor file="index" title="Description">description</docanchor>
    <docanchor file="index" title="Features">features</docanchor>
    <docanchor file="index" title="Basic Usage">basics</docanchor>
  </compound>
</tagfile>
